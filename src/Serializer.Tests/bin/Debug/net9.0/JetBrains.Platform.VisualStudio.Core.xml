<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.VisualStudio.Core</name>
    </assembly>
    <members>
        <member name="T:JetBrains.VsIntegration.AssemblyReferenceClass_PlatformVisualStudioCore">
            <summary>
            Forces the compiler to add assembly references.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.BuildScript.InstalledVsVersionsArtifact">
            <summary>
            Caches access to <see cref="M:JetBrains.Util.DevEnv.DevenvHostDiscovery.EnumInstalledVs" />.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.BuildScript.PreCompile.VsManagedProjectsDevKitAndSdk">
            <summary>
            Emits props for VS-aware projects to know path to Visual Studios (preferrably, to an instance which has our profile installed).
            Works for both classic (per-project generated props) and SDK-based (global sdk params) projects.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.BuildScript.PreCompile.VsManagedProjectsDevKitAndSdk.EmitVsVersionsProperties(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything,JetBrains.VsIntegration.BuildScript.InstalledVsVersionsArtifact,JetBrains.Application.BuildScript.ProfileNameArtifact,JetBrains.Util.ILogger)">
            <summary>
            MSBuild properties which allow to get installdirs per VS version (eg for use in JustVs* debugger settings).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.BuildScript.PreCompile.VsManagedProjectsDevKitAndSdk.CollectVsVersionsProperties(JetBrains.VsIntegration.BuildScript.InstalledVsVersionsArtifact,JetBrains.Application.BuildScript.ProfileNameArtifact,JetBrains.Util.ILogger)">
            <summary>
            MSBuild properties which allow to get installdirs per VS version (eg for use in JustVs* debugger settings).
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.ConflictingShortcutDialog.ConflictingShortcutListView">
            <summary>
            ConflictingShortcutListView
            </summary>
            <summary>
            Interaction logic for ConflictingShortcutWindow.xaml
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.ConflictingShortcutDialog.ConflictingShortcutListView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.ConflictingShortcutDialog.ConflictingShortcutWindow">
            <summary>
            ConflictingShortcutWindow
            </summary>
            <summary>
            Interaction logic for ConflictingShortcutWindow.xaml
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.ConflictingShortcutDialog.ConflictingShortcutWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.SelectShortcutSchemeDialog.ShortcutKeyView">
            <summary>
            ShortcutKeyView
            </summary>
            <summary>
            Interaction logic for ShortcutKeyView.xaml
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.SelectShortcutSchemeDialog.ShortcutKeyView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.SelectShortcutSchemeDialog.ShortcutSamplesView">
            <summary>
            ShortcutSamplesView
            </summary>
            <summary>
            Interaction logic for ShortcutSamplesView.xaml
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.SelectShortcutSchemeDialog.ShortcutSamplesView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.SelectShortcutSchemeDialog.ShortcutSchemeOptionTitleView">
            <summary>
            ShortcutSchemeOptionTitleView
            </summary>
            <summary>
            Interaction logic for ShortcutSchemeOptionView.xaml
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.SelectShortcutSchemeDialog.ShortcutSchemeOptionTitleView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.SelectShortcutSchemeDialog.ShortcutSchemeOptionView">
            <summary>
            ShortcutSchemeOptionView
            </summary>
            <summary>
            Interaction logic for ShortcutSchemeOptionView.xaml
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.SelectShortcutSchemeDialog.ShortcutSchemeOptionView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.SelectShortcutSchemeDialog.ShortcutSchemeSelectionWindow">
            <summary>
            ShortcutSchemeSelectionWindow
            </summary>
            <summary>
            Interaction logic for ShortcutSchemeSelectionWindow.xaml
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.SelectShortcutSchemeDialog.ShortcutSchemeSelectionWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.ChangeExportedVsSettingsUtil.UpdateShortcuts(JetBrains.Util.ILogger,System.IO.TextWriter,JetBrains.Util.FileSystemPath,System.Func{System.String,JetBrains.VsIntegration.Shell.ActionManagement.VsCommandScope,System.String,System.Boolean,System.Boolean},System.Action{System.IO.TextWriter,System.Collections.Generic.IList{JetBrains.VsIntegration.Shell.ActionManagement.VsCommandScope}})">
            <summary>
            Writes file with changed shortucts to import
            </summary>
            <param name="logger">Logger</param>
            <param name="writer">Destination file writer</param>
            <param name="exportedSettingsPath">Path to exported settings file</param>
            <param name="isToBeRemoved">Function to process read shortcut. Returns true if the shortcut should not be copied to output.</param>
            <param name="writeShortcutsAction">Action to be called when it's time to write new  shortcuts</param>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.DebugVsActionManagerServices">
            <summary>
            Debug helper for VS Action Manager.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsActionManagerEx.ExecuteVsCommand(JetBrains.VsIntegration.Shell.ActionManagement.IVsActionManager,System.Guid,JetBrains.VsIntegration.Interop.Declarations.VsShell.VSStd97CmdID)">
             <summary>
             used to call VS internal commands
             </summary>
            <param name="actionman"></param>
            <param name="cmdGroupGuid"> Real guid of command usually it is: VSConstants.GUID_VSStandardCommandSet97</param>
             <param name="cmdid">Id of command look into http://msdn.microsoft.com/en-us/library/microsoft.visualstudio.vsconstants.vsstd97cmdid(VS.80).aspx</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsActionManagerEx.ExecuteVsCommand(JetBrains.VsIntegration.Shell.ActionManagement.IVsActionManager,System.ComponentModel.Design.CommandID)">
             <summary>
             used to call VS internal commands
             </summary>
            <param name="actionman"></param>
            <param name="commandid"> Real GUID:ID of command usually it is: VSConstants.GUID_VSStandardCommandSet97, Id of command look into http://msdn.microsoft.com/en-us/library/microsoft.visualstudio.vsconstants.vsstd97cmdid(VS.80).aspx</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsActionManagerEx.ExecuteVsCommand(JetBrains.VsIntegration.Shell.ActionManagement.IVsActionManager,System.Guid,JetBrains.VsIntegration.Interop.Declarations.VsShell.VSStd97CmdID,System.Object@,System.Object@)">
             <summary>
             used to call VS internal commands
             </summary>
            <param name="actionman"></param>
            <param name="cmdGroupGuid"> Real guid of command usually it is: VSConstants.GUID_VSStandardCommandSet97</param>
             <param name="cmdid">Id of command look into http://msdn.microsoft.com/en-us/library/microsoft.visualstudio.vsconstants.vsstd97cmdid(VS.80).aspx</param>
             <param name="customIn">custom IN param, see comand</param>
             <param name="customOut">custom OUT Param, see command</param>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.VsActionManagerMnemonicHelper">
            <summary>
            Handles updating mnemonics on action groups.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.ActionManagement.VsActionManagerSettings.ShortcutSchemeName">
            <summary>
            Overrides <see cref="F:JetBrains.Application.UI.Utils.UserInterfaceSettings.ShortcutSchemeName"/>
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandExtensions.TryGetItem(JetBrains.VsIntegration.Shell.EnvDte.IEnvDteCommands,System.ComponentModel.Design.CommandID)">
            <summary>
            Calls the commands collection by the GUID:INT command ID. Returns <c>Null</c> if missing.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandHelpers">
            <summary>
            Manipulates VS commands and command bars.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandHelpers.EnumDescendantCommandBars(Microsoft.VisualStudio.CommandBars.CommandBar,JetBrains.Util.CompoundException)">
            <summary>
            BFS-enums descendant command bars of a command bar. Includes the starting command bar itself as the first item.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandHelpers.EnumDescendantControls(Microsoft.VisualStudio.CommandBars.CommandBar,JetBrains.Util.CompoundException)">
            <summary>
            Does BFS on descendant controls and command bars of a command bar.
            Each returned item is the descandant control plus an array of its parents, top to bottom.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandHelpers.GetLocationInMainMenu(System.ComponentModel.Design.CommandID,JetBrains.VsIntegration.Shell.EnvDte.IEnvDteWrapper)">
            <summary>
            <para>Looks up the command in the main menu. If found, returns the step-by-step path to the action, including the name of the command that represents the action.</para>
            <para>If not found, returns <c>""</c>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandHelpers.GetVsCommandAutomationObject(System.ComponentModel.Design.CommandID,JetBrains.VsIntegration.Shell.EnvDte.IEnvDteWrapper)">
            <summary>
            Gets the VS Automation (DTE) object by the ID of a command.
            Avoid using automation objects whenever possible, prefer early-bound COM interfaces when available.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandHelpers.TryGetVsCommandAutomationObject(System.ComponentModel.Design.CommandID,JetBrains.VsIntegration.Shell.EnvDte.IEnvDteWrapper)">
            <summary>
            Gets the VS Automation (DTE) object by the ID of a command.
            Avoid using automation objects whenever possible, prefer early-bound COM interfaces when available.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandHelpersTodo.ParseVsCommandNameOrCommandId(System.String,System.ComponentModel.Design.CommandID@,System.String@)">
            <summary>
            Parses a string representation of a VS command, which can either be a “<c>(GUID:INT)</c>” command ID, or a command name.
            </summary>
            <param name="commandstring">String to parse.</param>
            <param name="commandid">GUID:INT command ID. Mutually exclusive with <paramref name="cmdName"/>.</param>
            <param name="cmdName">String VS command name. Mutually exclusive with <paramref name="commandid"/>.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandHelpersTodo.EnumerateAllCommandBars(JetBrains.VsIntegration.Shell.EnvDte.IEnvDteWrapper)">
            <summary>
            Does a recursive enumeration on VS command bars.
            </summary>
            <param name="dte"></param>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter">
            <summary>
            Roundtripping for <see cref="T:System.ComponentModel.Design.CommandID"/> in our format.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.ConvertFromInvariantString(System.String)">
            <summary>
            Parses the special format of the <see cref="T:System.ComponentModel.Design.CommandID"/> we use in Actions.Xml for referring to VS actions.
            It contains the GUID:ID of a command in the “(GUID:INT)” format.
            Eg: <c>({D309F791-903F-11D0-9EFC-00A0C911004F}:260)</c>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.ConvertFromInvariantString(JetBrains.Util.dataStructures.Sources.StringSource)">
            <summary>
            Parses the special format of the <see cref="T:System.ComponentModel.Design.CommandID"/> we use in Actions.Xml for referring to VS actions.
            It contains the GUID:ID of a command in the “(GUID:INT)” format.
            Eg: <c>({D309F791-903F-11D0-9EFC-00A0C911004F}:260)</c>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.ConvertToInvariantString(System.ComponentModel.Design.CommandID)">
            <summary>
            Converts a <see cref="T:System.ComponentModel.Design.CommandID"/> to a string so that it could roundtrip with <see cref="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.String_To_CommandID(System.String,System.Globalization.CultureInfo)"/>.
            It contains the GUID:ID of a command in the “(GUID:INT)” format.
            Eg: <c>({D309F791-903F-11D0-9EFC-00A0C911004F}:260)</c>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.CommandID_To_String(System.ComponentModel.Design.CommandID,System.Globalization.CultureInfo)">
            <summary>
            Converts a <see cref="T:System.ComponentModel.Design.CommandID"/> to a string so that it could roundtrip with <see cref="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.String_To_CommandID(System.String,System.Globalization.CultureInfo)"/>.
            It contains the GUID:ID of a command in the “(GUID:INT)” format.
            Eg: <c>({D309F791-903F-11D0-9EFC-00A0C911004F}:260)</c>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.String_To_CommandID(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses the special format of the <see cref="T:System.ComponentModel.Design.CommandID"/> we use in Actions.Xml for referring to VS actions.
            It contains the GUID:ID of a command in the “(GUID:INT)” format.
            Eg: <c>({D309F791-903F-11D0-9EFC-00A0C911004F}:260)</c>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. </param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to. </param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to. </param><exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandScopeMonitor.ActiveCommandScopes">
            <summary>
            Lists the currently active command scopes.
            When this object has just been constructed, has an empty list until the class binds to VS on the main thread, and starts live monitoring.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandTextControlActionAttribute">
            <summary>Marks VS Editor Commands with mapping to our text control actions.</summary>
            <remarks>
            Even though marks the action as related to text control, is not marked with text controls zone itself, because it's used for marking the common VS Command IDs set which should be shell-available in all zones.
            </remarks>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.ActionManagement.VsConflictingShortcutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsConflictingShortcutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsConflictingShortcutForm.InitializeComponent(JetBrains.Application.Threading.IThreading,JetBrains.Application.UI.Components.Fonts.IFontsManager,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.ActionManagement.VsCtoCommandConstants.CommandNamePrefix">
            <summary>
            The prefix we add to all command names we generate for the CTO, to distinguish them from other commands.
            Normally VS adds the parent menu name as a prefix with a dot, but this happens only for menu-parented commands, and we want a consistent behavior for all our commands.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.ActionManagement.VsCtoCommandConstants.GuidVsGroupsCommandSet">
            <summary>
              <para>
                <c>#define GuidVsGroupsCommandSet {9142D617-6500-478F-9DE9-3185145372D0}</c>
              </para>
              <para>Command set GUID for the VS Command Groups that are generated to accomodate commands (created from IExecutableActions) in menus (created from IActionGroups).
                The IDs are entirely autogenerated by VSCT/CTO tool.
                In a VS-integrated product, must be overridden with a meaningful GUID.</para>
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.VsKeyBindingsCache">
            <summary>
            Caches VS key bindings.
            </summary>
            <remarks>
            Note: the cache is not initialized automatically, one has to call CollectKeyBindings.
            </remarks>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.ActionManagement.VsLocalizer.Locale">
            <summary>
            Gets the VS locale. MUST be called on primary thread only.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsLocalizer.GetLocaleAsync">
            <summary>
            A free-threaded version of <see cref="P:JetBrains.VsIntegration.Shell.ActionManagement.VsLocalizer.Locale" />. Sync and fast maybe except for the first time.
            </summary>
            <returns></returns>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.ActionManagement.VsLocalizer.XamlUIDesignerScope">
            <summary>
            First appeared in VS11
            Necessary to override shortcuts in the scope as well as in <see cref="T:EnvDTE.TextEditor"/>
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.ActionManagement.VsShortcutManagerConflicts.myConflictStorage">
            <summary>
            Lazy-loads from settings on first touch.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.VsShortcutManagerConflicts.ConflictStorage">
            <summary>
            Tracks <see cref="F:JetBrains.VsIntegration.Shell.ActionManagement.VsShortcutManagerConflicts.ConflictStorage.Map"/> and <see cref="F:JetBrains.VsIntegration.Shell.ActionManagement.VsShortcutManagerConflicts.ConflictStorage.LiveListOfIds"/> in sync, also loads initial set from settings, and saves all modifications to settings.
            </summary>
            <param name="mySettingsAccessor"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsShortcutManagerConflicts.ConflictStorage.#ctor(JetBrains.Application.Settings.OneToSetSettingAccessor{JetBrains.VsIntegration.Shell.ActionManagement.ConflictingActionsSettings,System.String,JetBrains.Application.Shortcuts.ActionShortcut})">
            <summary>
            Tracks <see cref="F:JetBrains.VsIntegration.Shell.ActionManagement.VsShortcutManagerConflicts.ConflictStorage.Map"/> and <see cref="F:JetBrains.VsIntegration.Shell.ActionManagement.VsShortcutManagerConflicts.ConflictStorage.LiveListOfIds"/> in sync, also loads initial set from settings, and saves all modifications to settings.
            </summary>
            <param name="mySettingsAccessor"></param>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.VsShortcutManagerOnConflictingActionExecute">
            <summary>
            Called when a user executes a conflicting shortcut in VS.
            Uses both Conflicts and BulkApply, so a separate class to oversee them both.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsShortcutManagerOnConflictingActionExecute.#ctor(JetBrains.Application.Components.ILazy{JetBrains.VsIntegration.Shell.ActionManagement.VsShortcutManagerConflicts},JetBrains.Application.Components.ILazy{JetBrains.VsIntegration.Shell.ActionManagement.VsShortcutManagerBulkApplyShortcuts},JetBrains.Application.Threading.IThreading,JetBrains.Application.Components.ILazy{Microsoft.VisualStudio.Shell.Interop.IVsCmdNameMapping},JetBrains.Application.Components.ILazy{JetBrains.VsIntegration.Interop.VsCommandIdMapping},JetBrains.Application.Components.ILazy{JetBrains.Application.UI.ActionsRevised.Loader.IActionDescriptorDefs},JetBrains.Application.Components.ILazy{JetBrains.Application.UI.Help.HelpSystem},JetBrains.Application.Components.ILazy{JetBrains.Application.BuildScript.Application.IWindowBranding},JetBrains.Application.Components.ILazy{JetBrains.Application.UI.Components.UIApplication.IApplicationModalState},JetBrains.Application.Components.ILazy{JetBrains.Application.StdApplicationUI.IMainWindow},JetBrains.Application.Components.ILazy{JetBrains.Application.UI.Components.Theming.ITheming},JetBrains.Application.Components.ILazy{JetBrains.Application.Interop.NativeHook.IWindowsHookManager},JetBrains.Application.Components.ILazy{JetBrains.VsIntegration.Shell.Actions.Revised.IVsOleCommandTargetExecuter},JetBrains.Application.Components.ILazy{JetBrains.UI.Design.DesignSystem},JetBrains.Util.ILogger)">
            <summary>
            Called when a user executes a conflicting shortcut in VS.
            Uses both Conflicts and BulkApply, so a separate class to oversee them both.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.VsShortcutManagerOobeAskForShortcutSchemeService">
            <summary>
            A service which looks for OOBE conditions to show the shortcut dialog, and does that. Not to be used by anyone.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.VsShortcutManagerSelectInitialShortcutScheme">
            <summary>
            For VS shortcuts manager, reads the currently active scheme from per-VS-hive settings.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsShortcutManagerSelectInitialShortcutScheme.#ctor(JetBrains.VsIntegration.Shell.ActionManagement.VsActionManagerSettingsStorage)">
            <summary>
            For VS shortcuts manager, reads the currently active scheme from per-VS-hive settings.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.VsShortcutManagerSelectSchemeDlg">
            <summary>
            Shows the modal dialog for selecting the shortcut scheme, such as from OOBE or from the notification that smth is wrong with keyboard shortcuts.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsShortcutManagerSelectSchemeDlg.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Components.ILazy{JetBrains.UI.StdApplicationUI.ShowDialogs},JetBrains.Application.Components.ILazy{JetBrains.UI.Design.DesignSystem},JetBrains.Application.Components.ILazy{JetBrains.Application.BuildScript.Application.IWindowBranding},JetBrains.Application.Components.ILazy{JetBrains.Application.UI.Help.HelpSystem},JetBrains.Application.Components.ILazy{JetBrains.VsIntegration.Shell.ActionManagement.SelectShortcutSchemeDialog.ShortcutSchemeSelectionWindowCollector},JetBrains.Application.Components.ILazy{JetBrains.Application.UI.Components.Theming.ITheming},JetBrains.Application.Components.ILazy{JetBrains.Application.UI.Progress.UITaskExecutor},JetBrains.Application.Components.ILazy{JetBrains.VsIntegration.Shell.ActionManagement.VsShortcutManager},JetBrains.Application.Components.ILazy{JetBrains.VsIntegration.Shell.ActionManagement.VsShortcutManagerBulkApplyShortcuts},JetBrains.Application.Threading.IThreading)">
            <summary>
            Shows the modal dialog for selecting the shortcut scheme, such as from OOBE or from the notification that smth is wrong with keyboard shortcuts.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Actions.Revised.IVsOleCommandTargetExecuter.ExecuteVsCommand(System.ComponentModel.Design.CommandID,Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT,System.Object@,System.Object@)">
            <summary>
            Executes a command in the Visual Studio main OLE Command Target.
            </summary>
            <param name="commandid">A GUID:int ID of the command.</param>
            <param name="cmdExecOpt">Specifies how the object should execute the command.</param>
            <param name="customIn">Optional. In-parameter for the command.</param>
            <param name="customOut">Optional. Out-parameter (result) of the command.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Actions.Revised.IVsOleCommandTargetExecuter.QueryVsCommandStatus(System.ComponentModel.Design.CommandID)">
            <summary>
            Query if the command is available.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Actions.Revised.VsActionManagerPriorityCommandTarget">
            <summary>
            Intercepts first-chance VS command execution to enable overriding VS commands.
            Also handles dynamic product commands because they wouldn't be routed to the package, even though they have its command set guid.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Actions.Revised.VsOleCommandTargetExecuter.ExecuteVsCommand(System.ComponentModel.Design.CommandID,Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT,System.Object@,System.Object@)">
            <summary>
            Executes a command in the Visual Studio main OLE Command Target.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Actions.Revised.VsOleCommandTargetHandler.CommandTargetQueryStatus(System.Guid,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
            <summary>
            Queries the command status against a list of Visual Studio identifiers.
            Capable of handling the comboboxes and their aux commands.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Actions.Revised.VsOleCommandTargetHandler.CommandTargetExec(System.ComponentModel.Design.CommandID,Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT)">
            <summary>
            Executes a command against its Visual Studio identifier.
            Capable of handling the comboboxes and their aux commands.
            </summary>
            <param name="commandid">The command.</param>
            <param name="cmdExecOpt">Specifies how the command should be handled. Only two modes are distinguished: execution (any type, user-modal or not), and help.</param>
            <returns>HRESULT to give out to OLE callers.</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Actions.Revised.VsOleCommandTargetHandler.QueryProductCommandStatus(JetBrains.VsIntegration.Shell.Actions.Revised.ActionEvaluationResult,System.IntPtr)">
            <summary>
            Return the command status of R# action.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Actions.Revised.VsOleCommandTargetHandler.QueryOverriddenCommandStatus(JetBrains.VsIntegration.Shell.Actions.Revised.VsOverridingDef)">
            <summary>
            Return the command status of an overridden VS command, Null if the command should not be intercepted.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Actions.Revised.VsOleCommandTargetHandler.TryFallBackToVs(JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithIdDescriptor,System.Action{System.ComponentModel.Design.CommandID})">
            <summary>
            Try fall R# command back to VS command.
            </summary>
            <remarks>
            Works for overridden VS commands only.
            If R# action is not supported (R# doesn't support the current language), try to fall back to the overridden VS command.
            </remarks>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Actions.Revised.VsOleCommandTargetHandler.Evaluate(JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithIdDescriptor)">
            <summary>
            Evaluate the action.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Actions.Revised.VsOleCommandTargetHandler.Execute(JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithIdDescriptor)">
            <summary>
            Execute the action.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Actions.Revised.VsOverridingDef.ActionDef">
            <summary>
            Action definition.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Actions.Revised.VsOverridingDef.OverriddenCommandId">
            <summary>
            VS command ID to override.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Actions.Revised.VsOverridingDef.HideVsCommand">
            <summary>
            See <see cref="T:JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.VsOverrideActionAttribute"/>.<see cref="P:JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.VsOverrideActionAttribute.HideVsCommand"/>.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Actions.Revised.VsOverridingDef.FallbackOnly">
            <summary>
            See <see cref="T:JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.VsOverrideActionAttribute"/>.<see cref="P:JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.VsOverrideActionAttribute.FallBackOnly"/>.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Actions.Revised.VsOverridingDef.Configurable">
            <summary>
            See <see cref="T:JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.VsOverrideActionAttribute"/>.<see cref="P:JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.VsOverrideActionAttribute.Configurable"/>.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Alter.AlterStatusBarIndicator">
            Used only for quick detection of async typing status
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.Alter.FrontendAlter.ValidState">
            An event which fires after frontend revision changes and the state of the visual studio matches the frontend revision value.
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.Alter.FrontendAlter.IsApplying">
            True when we are playing changes from backend. 
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.Alter.FrontendAlter.IsUndoing">
            True when we are undoing changes from backend. New alter requests are prohibited during undoing.
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Alter.FrontendAlter.ProcessQueue">
            No write lock
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Alter.IFrontendAlterExecutor">
            <summary>
            An executor of alter request on the obedient side.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Alter.IFrontendAlterExecutor.IsApplicable(JetBrains.Application.Alter.IAlterRequest)">
            <summary>
            Determines whether the request can be handled by the current executor
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Alter.IFrontendAlterExecutor.Apply(JetBrains.Application.Alter.IAlterRequest,JetBrains.VsIntegration.Shell.Alter.FrontendAlter)">
            <summary>
            Apply changes to the exact same world state on which it was created.
            In case of obedient (=frontend) side these changes are usually coming from backend.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Alter.IFrontendAlterExecutor.Retry(JetBrains.Application.Alter.IAlterRequest,JetBrains.VsIntegration.Shell.Alter.FrontendAlter)">
            <summary>
            Apply changes to the different state of the world.
            That means, that one or more other alter requests were applied after this request was created.
            In case of obedient (=frontend) side that means that this optimistic change was already "Undone" by calling our
            undo method and now asks us to replay the change.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Alter.IFrontendAlterExecutor.Undo(JetBrains.Application.Alter.IAlterRequest)">
            <summary>
            Undo changed from optimistic alter request, which was applied earlier. During invocation cannot produce additional commits in FrontendAlter.
            In case of obedient (=frontend) side that means that our optimistic change request was rejected because history diverges.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Alter.TypedFrontendAlterExecutor`1">
            <summary>
            An base implementation of frontend executor with specific request type.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Alter.TypedFrontendAlterActionExecutor`1">
            Base implementation for Action alter requests, which can only be applied and does not produce a revision id.
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Build.VsEnvironmentInformationArtifact.#ctor(JetBrains.Util.DevEnv.IVsEnvironmentInformation)">
            <summary>
            Wraps an existing VS environment object.
            </summary>
            <param name="implementation"></param>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Build.VsPackageAssemblyArtifact">
            <summary>
            Represents the VS integartion entry assembly, which is generated dynamically out of all the installation data provided, including the actions etc.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.EnvDte.IEnvDteCommand">
            <summary>
            Wrapper over EnvDTE.Command
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.EnvDte.IEnvDteCommands">
            <summary>
            Wrapper over EnvDTE.Commands
            See the https://docs.microsoft.com/en-us/dotnet/api/envdte.commands?view=visualstudiosdk-2019 for details
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.EnvDte.IEnvDteCommands.Count">
            <summary>
            Number of commands in the collection
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.EnvDte.IEnvDteCommands.TryGetCommand(System.Object,System.Int32)">
            <summary>
            Finds the command either by its name ot by its guid and index i.e. obtained from <see cref="M:JetBrains.VsIntegration.Shell.EnvDte.IEnvDteCommands.CommandInfo(System.Object,System.String@,System.Int32@)"/> or <see cref="P:JetBrains.VsIntegration.Shell.EnvDte.IEnvDteCommand.Guid"/> and <see cref="P:JetBrains.VsIntegration.Shell.EnvDte.IEnvDteCommand.ID"/>
            Use the <see cref="M:JetBrains.VsIntegration.Shell.EnvDte.EnvDteCommandsEx.TryGetCommandByName(JetBrains.VsIntegration.Shell.EnvDte.IEnvDteCommands,System.String)"/> to find command by name
            </summary>
            <param name="index">Command name or its guid index with braces (guid.ToString("B")</param>
            <param name="id">Optional command id</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.EnvDte.IEnvDteCommands.CommandInfo(System.Object,System.String@,System.Int32@)">
            <summary>
            Returns the command GUID and ID associated with the given Microsoft.VisualStudio.CommandBars.CommandBar control.
            </summary>
            <param name="control">Command bar control. We do not have a wrapper for it yet</param>
            <param name="cmdGuid">Command guid with braces</param>
            <param name="cmdID">Command id</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.EnvDte.IEnvDteCommands.Raise(System.String,System.Int32,System.Object,System.Object)">
            <summary>
            Executes the specified command.
            </summary>
            <param name="guid">Command guid with braces</param>
            <param name="id">Command id</param>
            <param name="customIn">Arguments in a SafeArray passed in from the OLECommandTarget.</param>
            <param name="customOut">Arguments in a SafeArray passed out to be returned by the OLECommandTarget.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.EnvDte.EnvDteCommandsEx.TryGetCommandByName(JetBrains.VsIntegration.Shell.EnvDte.IEnvDteCommands,System.String)">
            <summary>
            Finds command by name
            </summary>
            <param name="commands">Commands object</param>
            <param name="commandName">Name of the command</param>
            <returns>Command in question or null</returns>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.EnvDte.IEnvDteObject">
            <summary>
            Base interface for all wrappers to objects from EnvDTE namespace
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.EnvDte.IEnvDteObject.Dte">
            <summary>
            Root DTE object
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.EnvDte.IEnvDteObject.Raw">
            <summary>
            Raw object value. Should be used in rare case when it is needed to try-cast it to something 
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.EnvDte.IEnvDteSolutionFolder.GetProject">
            <summary>
            Containing project
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.EnvDte.IEnvDteSolutionFolder.AddFromFile(System.String)">
            <summary>
            Adds existing on disk project to the solution folder 
            </summary>
            <param name="projectFileLocation">Full path to the project file to add</param>
            <returns>Added project</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.EnvDte.IEnvDteSolutionFolder.AddSolutionFolder(System.String)">
            <summary>
            Creates nested solution folder with the specified name
            </summary>
            <param name="name">Nested solution folder name</param>
            <returns>Created project</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.EnvDte.IEnvDteWindows.TryGetWindow(System.Object)">
            <summary>
            Fetches window by its index.
            </summary>
            <param name="index">Window index. Normally it is a guid's string representation with braces. <see cref="T:JetBrains.VsIntegration.Interop.Declarations.VsConstants.StandardToolWindows"/>
            If you hold guid use <see cref="M:JetBrains.VsIntegration.Shell.EnvDte.EnvDteWindowEx.TryGetOutputWindow(JetBrains.VsIntegration.Shell.EnvDte.IEnvDteWindow)"/> or use index.ToString("B")
            </param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.EnvDte.IEnvDteWrapper">
            <summary>
            Wraps Visual Studio's EnvDTE.DTE interface to access it uniformly in different Visual Studio versions.
            This is necessary because of the breaking change (see https://github.com/microsoft/VSExtensibility/wiki/Breaking-API-List)
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostApi">
            <summary>
            Shared API to the <see cref="T:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostApi.AttachToProcess(System.UInt32)">
            <summary>
            Instructs the debugger to attach to the process with the PID <paramref name="pid"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostApi.AttachToRemoteProcess(System.String,System.UInt32)">
            <summary>
            Instructs the debugger to attach to the process with the PID <paramref name="pid"/> on machine <paramref name="remoteAddr"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostApi.DetachAll">
            <summary>
            Instructs the debugger to detach from all the debuggee processes.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostClient">
            <summary>
            Client for controlling the debugger in another process with <see cref="T:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer"/> running in that process.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostClient.AttachDebugger(System.Diagnostics.Process,System.Diagnostics.Process)">
            <summary>
            Instructs the remote (or local) <see cref="T:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer"/> in the <paramref name="debugger"/> process to attach to the <paramref name="debuggee"/> process.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostClient.AttachDebuggerRemote(System.Diagnostics.Process,System.Diagnostics.Process,System.String)">
            <summary>
            Instructs the remote (or local) <see cref="T:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer"/> in the <paramref name="debugger"/> process to attach to the <paramref name="debuggee"/> process.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostClient.DetachAll(System.Diagnostics.Process)">
            <summary>
            Instructs the remote (or local) <see cref="T:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer"/> in the <paramref name="debugger"/> process to detach from all the debuggee processes.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer">
            <summary>
            Runs in the debugger-aware process and receives remote requests for debugging through COM RPC.
            Advertises an <see cref="T:JetBrains.VsIntegration.Shell.Features.Debugger.IDebuggerHostApi"/> / <see cref="T:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostApi"/> instance to the Running Objects Table.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer.GetRunningInstance(System.UInt32)">
            <summary>
            Gets the API to the debugger host running in the given process as a late-bound <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer.DetachAll">
            <summary>
            Instructs the debugger to detach from all the debuggee processes.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer.InitRot(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Register/Revoke the Running Objects Table entry.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Features.Debugger.IDebuggerHostApi">
            <summary>
            Shared API to the <see cref="T:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.IDebuggerHostApi.AttachToProcess(System.UInt32)">
            <summary>
            Instructs the debugger to attach to the process with the PID <paramref name="pid"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.IDebuggerHostApi.DetachAll">
            <summary>
            Instructs the debugger to detach from all the debuggee processes.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.IDebuggerHostApi.AttachToRemoteProcess(System.String,System.UInt32)">
            <summary>
            Instructs the debugger to attach to the process with the PID <paramref name="pid"/> on machine <paramref name="remoteAddr"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.IVsDebuggerHostServer.LaunchDebugTarget(JetBrains.VsIntegration.Shell.Features.Debugger.VsDebugTarget)">
            <summary>
            Launch debugger. Depending on how target is set up, will either create a process or attach to an existing on.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.IVsDebuggerHostServer.DetachAll">
            <summary>
            Instructs the debugger to detach from all the debuggee processes.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.IVsDebuggerHostServer.TerminateAll">
            <summary>
            Terminate all the debuggee processes.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Features.Debugger.VsDebugLaunchFlags">
            <summary>
            A copy of Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS (not to reference VS assemblies).
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Features.Debugger.VsDebugLaunchOperation">
            <summary>
            A copy of Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION (not to reference VS assemblies).
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Features.Debugger.VsDebugStartupData">
            <summary>
            A VS version independent structure that contains all the data Microsoft.VisualStudio.Shell.Interop.VsDebugStartupInfo.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Features.Debugger.VsDebugTarget">
            <summary>
            A VS version independent structure that contains all the data of Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo3.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Features.Debugger.VsDsiFlags">
            <summary>
            A copy of Microsoft.VisualStudio.Shell.Interop.__DSI_FLAGS (not reference VS assemblies).
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.AssertsAllPackagesRegisteredIntoVs">
            <summary>
            Deferred-asserts that we got all the packages registered with VS that we're running now.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.CommandLineInstallerVs">
            <summary>
            Registers the command line switches in Visual Studio.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.EmittedVsPackageInstaller">
            <summary>
            The post-build-emitted package assembly and class are registered in the Registry, and the file is scheduled for deployment.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.RegistrationUtil.CleanupUIFromVisualStudio(System.String,System.String,JetBrains.VsIntegration.Shell.ActionManagement.IVsActionManager,JetBrains.Application.IApplicationHost)">
            <summary>
            Performs the post-uninstallation actions that include removing the ReSharper UI items from the Visual Studio.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.RegistrationUtil.GetDevEnvInstallDirFromRegistry(System.String)">
            <summary>
            Goes to the Registry and extracts the DevEnv install dir, which points to the "Common7\IDE" folder that contains the DevEnv.exe file.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.EmitsBitmapResourcesToResx">
            <summary>
            After the bitmap resources have been allocated resource IDs, they're written as ResXes.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.EmitsVsPackageResourcesToFile">
            <summary>
            Writes all package resources into the binary .resources file.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.IEmitVsPackageGeneratedCodeGen2">
            <summary>
            Base interface for build helpers which can emit generated code into the VS Package generated assembly which serves as the entry point for our package.
            </summary>
            <remarks>
              <para>Gen 1 emit were with collecting CodeDOM trees via <see cref="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageSourceFile" /> and then making an assembly with CodeDOM. Disadvantages: running the full compiler, requiring thorough assembly references for compilation, using an outdated pre-roslyn compiler from CLR installation.</para>
              <para>Gen2 attempts using dynamic assemblies.</para>
            </remarks>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.IEmitVsPackageGeneratedCodeGen2.EmitVsPackageGeneratedCode(System.Reflection.Emit.ModuleBuilder)">
            <inheritdoc cref="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.IEmitVsPackageGeneratedCodeGen2" />
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsBitmapResourceKind.CommandImage">
            <summary>
            <para>CTO CommandImage which goes into VS menus and is produced out of our actions icons.</para>
            <para>VS8+ can have this 32-bit with alpha-channel, which covers our needs.</para>
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsBitmapResourceKind.WindowFrameBitmap">
            <summary>
            <para>Bitmap for the window frame icon, e.g. tool window frame icon. Comes from our tool window descriptor.</para>
            <para>Seems like all VS versions still want to see chroma-keyed 24-bit bitmaps here.</para>
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsExtensionClipart">
            <summary>
            An artifact for providing clipart of a VS extension.
            Create a build step yielding this artifcat in your product so that the package assembly emitter and VSIX writer could use it.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsExtensionClipart.BmpForVsSplashScreen">
            <summary>
            The Splash Screen icon, see <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct.IdBmpSplash(System.UInt32@)" />.
            This resource will be post-build-compiled into RESX.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsExtensionClipart.ProductPreviewExtensionManager">
            <summary>
            Gets an image that should appear on the product entry in VS 10 Extension Manager.
            Optional.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageActionIcons.CompiledIconIdentity.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageAssemblyConstants">
            <summary>
            Common convention constants used when emitting package class / assembly.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageAssemblyConstants.IdBmpSplash">
            <summary>
            <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct.IdBmpSplash(System.UInt32@)" />.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageAssemblyConstants.IdIcoLogoForAboutbox">
            <summary>
            <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct.IdIcoLogoForAboutbox(System.UInt32@)" />.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageAssemblyConstants.GetDefaultGenericIconThemeForVs(JetBrains.Util.Version2,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            The default generic (non-symbol) icon theme, selected by VS version.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageBitmapResource">
            <summary>
            Bitmaps which go into native package resources. These are identified with integers throughout the system, so each icon submitted to resources is assigned an integer which should be used in emitted code to represent the resource with VS.
            You emit the <see cref="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageBitmapResource" /> without an ID yet. When all of these are collected, they're assigned IDs and a <see cref="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageBitmapResourceWithAssignedId" /> is issued per each unique original resource.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageBitmapResourceWithAssignedId">
            <summary>
            See <see cref="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageBitmapResource" />.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageIcon">
            <summary>
            Icons to be emitted to package's CTO and (since VS14) to image manifest.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageIcon.IconId">
            <summary>
            Identifier of the icon which was precompiled into the product DLL.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageIcon.ImageID">
            <summary>
            Image ID for CTO and image manifest.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageIcon.InImageManifest">
            <summary>
            Whether the icon should be included into the image manifest.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageResXDataNode_ToRemove">
            <summary>
            ResX file entries to be embedded into the package resources.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageResXDataNode_ToRemove.File">
            <summary>
            The file content of the resx node (e.g. bitmap, byte array, string, etc).
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageResXDataNode_ToRemove.ResourceName">
            <summary>
            As in <see cref="P:System.Resources.ResXDataNode.Name" />.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageResXDataNode_ToRemove.Type">
            <summary>
            Serialization type for the node.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageServiceArtifact">
            <summary>
            Types which should be exposed as package services to the runtime component container.
            Currently, the emitted classes cannot be components, so if they need to be accessible as components, they're to be submitted here.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageSourceFile">
            <summary>
            Source files in the form of CodeDOM type declarations which should be added for compilation to the MSBuild project file.
            </summary>
            <remarks>Gen 1 emit. See <see cref="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.IEmitVsPackageGeneratedCodeGen2"/>.</remarks>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageSourceFile.AssemblyReferences">
            <summary>
            The list of assembly references required to compile your <see cref="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageSourceFile.Code" />.
            Previously, this used to be deduced by magic by walking all of the types in the <see cref="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageSourceFile.Code" />, but that's slow and not so reliable.
            Now that we got only so few emitted types it figures to make this more explicit.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.ListsPackagesRegisteredIntoVs">
            <summary>
            Keeps the list of packages we've registered into VS with this installation.
            Allows the runtime to make sure the set from bindir it's running off actually matches (and VS will have all the expected items registered).
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.ProductIconClassesIndex">
            <summary>
            Allows to look up icon Ids by icon types.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.ProductIconClassesIndex.GetIconId(JetBrains.Util.dataStructures.Sources.StringSource,JetBrains.Metadata.Utils.AssemblyNameInfo,System.String)">
            <summary>
            Looks up the icon identifier.
            </summary>
            <param name="sIconTypeFullName">Type name of the icon identifier class.</param>
            <param name="assemblyUsage">Name of the assembly which contains the code referencing the icon. It's validated that the icon is reachable from that assembly.</param>
            <param name="sReferencingObjectName">Name of the entity referencing the icon, for diagnostics.</param>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageAssemblyEmitter">
            <summary>
            The entry point for emitting the VS package assembly with all of the generated classes and resources.
            NOTE: most of the particular operations reside next to subsystems which require those operations, like tool window icons etc, or in the Platform VS-Core assembly where interfaces are declared. This is the preferred strategy.
            Some components however essentially belong to buildtasks assembly (because they reference non-runtime DLLs, such as VSCT compiler), so this cannot be removed.
            That's why this class has to remain here.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageAssemblyEmitter.MarkEmittedAssemblyZone(JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters.PackageInfo,JetBrains.VsIntegration.Shell.Install.VsEnvironmentZoneForBuild,JetBrains.Util.ILogger)">
            <summary>
            To enable instantiating components from the emitted assembly, it must be zone marked.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters">
            <summary>
            Emits the entry point class for the VS Package.
            Also knows all the details about the package, for use with emitter or package registration routines.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters.PackageInfo.Constants.DynamicAssemblyStrongNameKey">
            <summary>
            A random predefined key just for using when emitting the assembly.
            Is NOT equal to any of our compilation keys, so leaking the private part here is not an issue.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters.PackageInfo.Constants.VsPackageLoadKey">
            <summary>
              <para>
                <c>#define VsPackageLoadKey JetBrains s.r.o.;ReSharper;9.0;standard;AHR2RRIDC0RRA9ZMJMEQPPR8ICZZH1D3ZREDEZRRRJR0AARDEPEIC0IAZHQ2KAR8D1QKH3AKIZJCJKHEITIEIJRHHTZEDCIJJ1P8CPAEE2A2JKH9MHMPZPJ9HKHII3HM</c>
              </para>
              <para>VS PLK, as received from the Microsoft website. See “Changing Product Name and Version SOP” on how to do that.
            		Format: “CompanyName;ProductName;ProductVersion2;VsMinEdition;PLK”. See VsPackageClassEmitter::PackageInfo for format details.</para>
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClipartResourceIds.IdBmpSplash">
            <summary>
            Bitmap for the VS Splash Screen. Applicable to VS 9 and below. Or probably even to VS7, as VS8-9 seem to use about box icon for the splash screen.
            Emitted to resources, value assigned here by package emitted class. Zero means not supported.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClipartResourceIds.IdIcoLogoForAboutbox">
            <summary>
            Icon for the VS About Box. Applicable to all VS versions. VS 8-9 also use this for splash screen.
            Emitted to resources, value assigned here by package emitted class. Zero means not supported.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClipartWriters">
            <summary>
            Writes the special package clipart.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageHostComponentsEmitter">
            <summary>
            Emits the host components which should be available in the component container at runtime.
            Serializes them into the resources as a structured storage.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageInstallHelper.EmitPkgDef_Package(JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters.PackageInfo,JetBrains.Application.Install.InstallationData.InstalledRegistryKey,System.Collections.Generic.ICollection{JetBrains.Application.Install.InstallationData.InstalledRegistryValue})">
            <summary>
            Core. The package itself.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageInstallHelper.EmitPkgDef_AutoLoadPackages(JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters.PackageInfo,JetBrains.Application.Install.InstallationData.InstalledRegistryKey,System.Collections.Generic.ICollection{JetBrains.Application.Install.InstallationData.InstalledRegistryValue})">
            <summary>
            Enables loading the package right at Visual Studio startup.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageInstallHelper.EmitPkgDef_InstalledProducts(JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters.PackageInfo,JetBrains.Application.Install.InstallationData.InstalledRegistryKey,System.Collections.Generic.ICollection{JetBrains.Application.Install.InstallationData.InstalledRegistryValue})">
            <summary>
            Registers the package with the Installed Products (eg About Box, Splash Icon, etc).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageInstallHelper.EmitPkgDef_Menus(JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters.PackageInfo,JetBrains.Application.Install.InstallationData.InstalledRegistryKey,System.Collections.Generic.ICollection{JetBrains.Application.Install.InstallationData.InstalledRegistryValue})">
            <summary>
            Package commands, menus, toolbars, context menus, etc.
            </summary>
            <remarks>
            This places a registry key named CLSIDofPackage in the [HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\{version}\Menus] section.
            To avoid disrupting the existing IDE commands and menus with those of your package while you are debugging it, your VSPackage is registered in an alternate registry called the experimental hive. For more information about this, see Experimental Build.
            There are two possible values for CLSIDofPackage:
            {blank space}, 1000, 10
            {drive}:\VisualStudio\bin\MyPackage.dll, 1000, 10
            The data field for CLSIDofPackage is split into three sections separated by commas.
            First Section: The full path name to the .cto file. If you leave this field blank, which is the recommended method, then the environment searches for the .cto information in your VSPackage's satellite DLL, as specified under the VSPackages section in the registry. If you need to, however, you can provide a specific path to the .cto file.
            Second Section: The resource number of the menus in the .cto file. This must be a number, not a name or identifier.
            Third Section: The version of the menu resource. Increment this number as you update the menus. Visual Studio will detect the version number change and re-merge the menus.
            </remarks>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageInstallHelper.EmitPkgDef_ToolsOptionsPages(JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters.PackageInfo,JetBrains.Application.Install.InstallationData.InstalledRegistryKey,System.Collections.Generic.ICollection{JetBrains.Application.Install.InstallationData.InstalledRegistryKey},System.Collections.Generic.ICollection{JetBrains.Application.Install.InstallationData.InstalledRegistryValue})">
            <summary>
            The option pages category in Visual Studio options, and the package's main Options Page (to enable/disable the product and open the Product's Options).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageInstallHelper.JetBrains#VsIntegration#Shell#Install#VsPackageAssembly#IEmitVsPackageGeneratedCodeGen2#EmitVsPackageGeneratedCode(System.Reflection.Emit.ModuleBuilder)">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsResourceHelper.ChromaKeyOpacityThreshold">
            <summary>
            When converting to chroma key, we treat less opaque pixels as transparent.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsResourceHelper.WriteIconBitmapFile(JetBrains.UI.Icons.IconId,JetBrains.Util.FileSystemPath,System.Version,JetBrains.Application.Icons.IThemedIconManager,JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsBitmapResourceKind)">
            <summary>
            Converts the bitmap into VS-version-specific format, and writes to disk.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsResourceHelper.WriteIconBitmapStream(JetBrains.UI.Icons.IconId,System.IO.Stream,System.Version,JetBrains.Application.Icons.IThemedIconManager,JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsBitmapResourceKind)">
            <summary>
            Converts the bitmap into VS-version-specific format, and writes to disk.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsResourceHelper.ConvertAlphaToChromaKey(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Flattens alpha channel and turns the bitmap into a chroma-keyed image on magenta background.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageSerializedComponentArtifact">
            <summary>
            Lists build artifact values which should be serialized to VS Package resource during the Local Install to be then available at runtime as components.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.IVsCmdNameMappingEx.MapCommandIdToVsCommandName(Microsoft.VisualStudio.Shell.Interop.IVsCmdNameMapping,System.ComponentModel.Design.CommandID)">
            <summary>
            Translates the AppID — GUID:ID mapping for VS commands.
            Does not query Registry, like DTE Commands object would do for names.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.IVsCmdNameMappingEx.TryGetBrowserCommandId(System.ComponentModel.Design.CommandID)">
            <summary>
            VS does not return names for commands from this group.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsFileChangeFlags">
            <summary>
            See Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS
            Until VS 17: Microsoft.VisualStudio.Shell.Interop, Version=7.1.40304.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
            Since VS 17: Microsoft.VisualStudio.Interop, Version=17.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.JetVisualStudioHost">
            <summary>
            Represents the VS host that can load our products.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.JetVisualStudioHost.OnVsPackageAssembly(JetBrains.Application.Environment.JetHostItems.Engine,JetBrains.Lifetimes.Lifetime,System.Reflection.Assembly)">
            <summary>
            Inits running the VS host.
            </summary>
            <param name="input"></param>
            <param name="lifetime"></param>
            <param name="assemblyPackage"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.JetVisualStudioHost.OnVisualStudioServiceProviderAndAssembly(JetBrains.Application.Environment.JetHostItems.Empty,JetBrains.Lifetimes.Lifetime,System.Object,System.Reflection.Assembly)">
            <summary>
            A special version for Dev17 which takes object instead of IServiceProvider interface.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsHostCommandLine">
            <summary>
            Exposes the full command line of the VS host, with all the keys from all the products.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsHostCommandLine.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsAppCommandLine,System.String,JetBrains.Util.FileSystemPath)">
            <summary>
            Creates the cmdline.
            </summary>
            <param name="vsAppCommandLine">VS object.</param>
            <param name="sVsHiveRootSuffix">If VS is running in non-default hive, defines the root suffix of that hive. Keys with such a suffix will be recognized and stripped off the suffix. Keys belonging to the default hive will always be recognized. In the default hive, use an empty string.</param>
            <param name="startupDirectory">The startup directory which is required for treating relative paths in command line args.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsHostCommandLine.GetCommandLineArgName(System.String,System.String,System.String)">
            <summary>
            Forms the complete Visual Studio command line argument name, such as you should enter in the DEVENV command line.
            </summary>
            <param name="sArgName">Command line arg name.</param>
            <param name="sProductName">Product name (prefixes the arg).</param>
            <param name="sVsRootSuffix">Root suffix (suffixes the arg, if non-empty).</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsHostCommandLine.GetCommandLineText(System.Collections.Generic.IEnumerable{JetBrains.Application.Hosting.CommandLineParameter},System.String,System.String)">
            <summary>
            Forms the standalone host command line containing multiple parameters.
            </summary>
            <param name="parameters">Each parameter will be presented with <see cref="M:JetBrains.VsIntegration.Shell.VsHostCommandLine.GetCommandLineArgName(System.String,System.String,System.String)"/>, plus its value as a separate VS command line argument.</param>
            <param name="sProductName">Product name (prefixes the arg).</param>
            <param name="sVsRootSuffix">Root suffix (suffixes the arg, if non-empty).</param>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsDebuggerMonitor">
            <summary>
            Monitors changes of the debugger state.
            </summary>
            The difference between DebuggerState property and DebuggerStateChanged signal is that the property doesn't reflect all the changes.
            For example you are standing at a breakpoint and than run to the next breakpoint.
            IVsDebuggerEvents can skip the Run state and generate the next Breakpoint event only.
            So the value of DebuggerState property won't changed, but DebuggerStateChanged signal will be raised.
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsDoIdleDispatcherSink">
            <summary>
            Drives <see cref="T:JetBrains.Threading.JetDispatcher" />'s idle-priority tasks scheduling by sinking the VS' DoIdle event.
            TODO: check if this be unified with VsJetComponentManager in some way, but keep in mind that this must JIT and create fast.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsDoIdleDispatcherSink.FromComponentManagerObject(JetBrains.Lifetimes.Lifetime,System.Object)">
            <summary>
            A special version for Dev17 which takes component manager object instead of IOleComponentManager interface.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsFileChangeWrapperEx.IgnoreFileAsync(JetBrains.VsIntegration.Shell.IVsFileChangeWrapper,JetBrains.Lifetimes.Lifetime,JetBrains.Util.FileSystemPath)">
            <summary>
            Makes VS to ignore changes in a file.
            <remarks>
            The returned task becomes completed when the call to VS is completed, and VS has started to ignore changes in the file.
            On lifetime termination un-ignoring file changes is executed asynchronously without cancellation and with NoAwait. 
            If you need different behavior please use <see cref="T:JetBrains.VsIntegration.Shell.IVsFileChangeWrapper"/> methods directly.
            </remarks>
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsFileChangeWrapperEx.IgnoreDirAsync(JetBrains.VsIntegration.Shell.IVsFileChangeWrapper,JetBrains.Lifetimes.Lifetime,JetBrains.Util.FileSystemPath)">
            <summary>
            Makes VS to ignore changes in a directory.
            <remarks>
            The returned task becomes completed when the call to VS is completed, and VS has started to ignore changes in the directory.
            On lifetime termination un-ignoring directory changes is executed asynchronously without cancellation and with NoAwait. 
            If you need different behavior please use <see cref="T:JetBrains.VsIntegration.Shell.IVsFileChangeWrapper"/> methods directly.
            </remarks>
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsFileChangeWrapperEx.AdviseVsFileChangesAsync(JetBrains.VsIntegration.Shell.IVsFileChangeWrapper,JetBrains.Lifetimes.Lifetime,JetBrains.Util.FileSystemPath,JetBrains.VsIntegration.Shell.VsFileChangeFlags,System.Action)">
            <summary>
            Creates a subscription to changes for a single file.
            <remarks>
            The returned task becomes completed when the call to VS is completed, and VS has created a subscription to changes in the file.
            On lifetime termination removing the subscription is executed asynchronously without cancellation and with NoAwait. 
            If you need different behavior please use <see cref="T:JetBrains.VsIntegration.Shell.IVsFileChangeWrapper"/> methods directly.
            </remarks>
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsJetComponentManager">
            <summary>
            Visual Studio implementation of Jet Component Manager.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsJetComponentManager.VsJetMsoComponent.FPreTranslateMessage(JetBrains.Interop.WinApi.MSG[])">
            <summary>
            Processes the message before it is translated and dispatched.
            </summary>
            <returns>
            true if the message is consumed, false otherwise.
            </returns>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsJetDispatcherPreTranslate">
            <summary>
            Register a message translator that translates keys (shortcuts) to VS commands.
            </summary>
            <remarks>
            When <see cref="T:JetBrains.Threading.JetDispatcher" /> pumps, VS should have an opportunity to pre-translate messages.
            Otherwise the focus could unexpectedly jump to another text control. See NP-606, RSRP-453981.
            </remarks>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsJetDispatcherPreTranslate.Suspend(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Suspend pretranslation for the lifetime.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsOneTimeInitializationManager">
            <summary>
            Adapts the one-time-init manager to VS by properly queuing the one-time-init and checking if VS is ready.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsOneTimeInitializationManager.OnCheckFailed(System.Exception)">
            <summary>
            Invoked when one-time-init fails to read/write the Registry. Should report to the user in an app-dependent manner.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.VsOneTimeInitializationManager.IsOneTimeInitAllowed">
            <summary>
            Gets whether the one-time-init is allowed to run at the moment, eg the main window has already been created.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsOneTimeInitializationManager.OneTimeInitRegistryInstaller">
            <summary>
            Resets the one-time-init in the Registry on installation and re-registration.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsOneTimeInitializationManager.OneTimeInitRegistryInstaller.MarkAsOneTimeInitDirty(JetBrains.Application.BuildScript.Application.HostInfo,JetBrains.VsIntegration.Shell.Build.VsEnvironmentInformationArtifact,System.Collections.Generic.IList{JetBrains.Application.Install.InstallationData.InstalledRegistryKey}@,System.Collections.Generic.IList{JetBrains.Application.Install.InstallationData.InstalledRegistryValue}@)">
            <summary>
            Called once on the object during the registration process.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsPopulateAboutBox">
            <summary>
            Adds VS version and RootSuffix to the About Box.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsPopulateAboutBox.#ctor(JetBrains.Util.DevEnv.IVsEnvironmentInformation)">
            <summary>
            Supplies VS version info to the About Box.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.VsSaveMonitor.SaveExecuted">
            <summary>
            <para>When user changes Visual Studio options, sometimes this event would fire.</para>
            <para>It's not quite guaranteed that any VS options change will be advertised with this event, but it's a suitable workaround if you haven't gotten the real event.</para>
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.VsToolsOptionsMonitorInterop.VsOptionsMightHaveChanged">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.VsToolsOptionsMonitorInterop.VsOptionsDialogHaveBeenClosed">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsToolsOptionsMonitorInterop.OnVsOptionsChanged(System.String)">
            <summary>
            Used by other components to notify that VS options are changed.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsToolsOptionsMonitorInterop.OnVsOptionsDialogClosed(System.String)">
            <summary>
            Used by other components to notify that VS options dialog is closed.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsUIHostCommandDispatcher">
            <summary>
            Wraps and exposes the VS global command target object to make sure it could be imported reliably (otherwise might get some other <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget"/> on a local component in a nearby container, because this interface is implemented by various classes in our product).
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.VsUIHostCommandDispatcher.Raw">
            <summary>
            Raw VS global command target.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.WindowManagement.VsPopupWindowContextInterop">
            <summary>
            See <see cref="T:JetBrains.VsIntegration.ProjectModel.VsPopupWindowContextProjectModel"/> for the project-model-aware part of the logic.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.RunConfig.ExecRunConfigView">
            <summary>
            ExecRunConfigView
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.RunConfig.ExecRunConfigView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.RunConfig.RunConfigCommonView">
            <summary>
            RunConfigCommonView
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.RunConfig.RunConfigCommonView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.RunConfig.RunConfigMethodView">
            <summary>
            RunConfigMethodView
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.RunConfig.RunConfigMethodView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.RunConfig.RunConfigProjectView">
            <summary>
            RunConfigProjectView
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.RunConfig.RunConfigProjectView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.RunConfig.RunConfigSettingsDialog">
            <summary>
            RunConfigSettingsDialog
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.RunConfig.RunConfigSettingsDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.RunConfig.RunStartupProject.DebugLaunch(JetBrains.VsIntegration.Shell.EnvDte.IEnvDteProject,System.Boolean)">
            <summary>
            Do a project launch just like VS does it
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.RunConfig.RunStartupProject.GetStartupInfo(JetBrains.VsIntegration.Shell.EnvDte.IEnvDteProject)">
            <summary>
            Gets the process start info (executable, cmdline args, and working folder) for the startup project of the solution.
            Throws on fatal errors.
            </summary>
            <param name="projStartup"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.RunConfig.RunStartupProject.GetStartupProjectPath(JetBrains.VsIntegration.Shell.EnvDte.IEnvDteWrapper)">
            <summary>
            Gets the project pah for the startup project in the solution. Null if we aren't able to get path. Also check for emptyness.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.RunConfig.RunStartupProject.GetStartupProject(JetBrains.VsIntegration.Shell.EnvDte.IEnvDteWrapper)">
            <summary>
            Gets the VS Project for the startup project in the solution.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.IDE.Internal.Actions.DebugActions.DTEPropertiesTesterWindow.ShowWindow">
            <summary>
            Shows the monitor window.
            Routed thru a signal to deactivate on disposal.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.EditorManager.Install.InstallVsEditorFactoryAttribute">
            <summary>
            Registers a new Editor Factory.
            This involves several things:
            (1) Registry information is written to list the editor factory as affined to our package (<see cref="T:JetBrains.VsIntegration.IDE.EditorManager.Install.VsEditorFactoryInstaller"/>).
            (2) A derived class is emitted to the VS Package Assembly. This is required because the factory class should be annotated with a GUID, and the GUID should be different for different products to avoid runtime conflicts (VsPackageEmitEditorFactory).
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.EditorManager.Install.VsEditorFactoryInstaller">
            <summary>
            Emits Registry entries for registering the editor factories.
            NOTE that the main <see cref="T:JetBrains.VsIntegration.Util.EditorFactory.VsPersistableViewEditorFactory" /> does NOT use this mechanism because its particular registered class is in the emitted VS Package assembly.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.EditorManager.Install.VsPackageEmitsEditorFactory">
            <summary>
            Emits the derived class for <see cref="T:JetBrains.VsIntegration.IDE.EditorManager.Install.InstallVsEditorFactoryAttribute" /> into the package assembly, see the attribute for comments.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.EditorManager.Install.VsPackageEmitsEditorFactory.AssertValidFactoryImplementationType(JetBrains.Application.Catalogs.PartCatalogType)">
            <summary>
            The ready factory class to be used as a service.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.EditorManager.Install.VsPackageEmitsEditorFactory.AssertValidFactoryType(System.Type)">
            <summary>
            The base factory class which is to be overridden with the emitted class.
            </summary>
            <param name="typeFactory"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.EditorManager.VsProvisionalTabHelper.ShouldOpenInProvisionalTab(JetBrains.IDE.TabOptions)">
            <summary>
            Based on tab options, our settings for provisional tab override, and Visual Studio settings for provisional tab, checks which way it should be.
            </summary>
            <param name="taboptions"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.EditorManager.VsProvisionalTabHelper.UsingProvisionalTabMode(System.Boolean)">
            <summary>
            Temporarily overrides provisional tab mode to ON/OFF.
            NOTE that you should not force ON for VS versions which do not support it.
            </summary>
            <param name="isProvisionalNotPermanent"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.EditorManager.VsProvisionalTabHelper.IsVsProvisionalNewDocumentState">
            <summary>
            Whether VS thinks new editors should be opened in provisional mode.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.PersistableView.VsPersistableViewManager.PersistableDocumentRegisteredInVsHierarchy">
            <summary>
            Registers the document in our-maintained VS hierarchy.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.IDE.PersistableView.VsPersistableViewManager.PersistableDocumentRegisteredInVsHierarchy.PersistableDocument">
            <summary>
            The document object.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.IDE.PersistableView.VsPersistableViewManager.PersistableDocumentRegisteredInVsHierarchy.VsHierarchyItem">
            <summary>
            The hierarchy and item ID of the document object registered in it.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.PersistableView.VsPersistableViewWindowPane.OpenVsEditor(Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument,JetBrains.VsIntegration.Util.RawVsServiceProvider,JetBrains.VsIntegration.UI.WindowManagement.VsWindowFrameManager,JetBrains.Application.Interop.NativeHook.IWindowsHookManager,JetBrains.Application.Shortcuts.ShortcutManager.ShortcutScope)">
            <summary>
            <para>Opens the window pane in a VS window frame.</para>
            <para>This actually makes use of the freshly-created pane in VS: VS prepares a window frame in a document tab and calls our IVsWindowPane::CreatePaneWindow to actually create the content control.</para> 
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.IDE.PersistableView.VsPersistableViewWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsDpiAware#Mode">
            <summary>
            Required by VS16 in PMv2 DPI mode.
            Problem: without this flag, we're created in <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSDPIMODE.VSDM_System" />, and all of the controls on our creation stack also go as System.
            Then thread is switched to PMv2 for the most of the time.
            So when we create and add a control later, it becomes PMv2 (derived from thread), and would silently fail to become a child of our UI (this is only a problem with System-PMv2 parenting).
            Ensure we're ALWAYS operating under PMv2.
            NOTE: this only applies to VS16+, but as we have it as an embed-interop-type, there's no problem in implementing on the base class.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.PersistableView.VsUIHierarchy.AddItem(JetBrains.Lifetimes.Lifetime,System.String)">
            <summary>
            Adds an item to the hierarchy, returns the VS Item ID assigned to the item.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.PersistableView.VsUIHierarchy.GetHierarchyItem(System.String)">
            <summary>
            Gets the hierarchy item by its registered moniker.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.PersistableView.VsUIHierarchy.SetIcon(JetBrains.Lifetimes.Lifetime,JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID,System.Void*)">
            <summary>
            Assigns an icon to the hierarchy item for the given lifetime.
            </summary>
            <param name="lifetime"></param>
            <param name="itemid"></param>
            <param name="hIcon">Non-<c>Null</c> icon. NOTE: to remove an icon, just terminate the lifetime of the previous icon.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.PersistableView.VsUIHierarchy.FireVsHierarchyEvents(System.Action{Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents})">
            <summary>
            Helps with firing <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents"/> to those that have called <see cref="M:JetBrains.VsIntegration.IDE.PersistableView.VsUIHierarchy.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.VsEnsureWritableHandlerBackToFrontInterop">
            <summary>
            Attaches to SolutionBase events related to handling making the files writable.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.VsResultListIdeActions">
            <summary>
            Binds to the VS ResultList.
            When our result list is present, it's guaranteed to also be present in VS (because we NULL it down when VS publishes smth else), so we might be calling directly in this case.
            When our result list is missing, check VS's to see if it's there. If not, return disabled state (VS' action would never report as disabled). If yes, delegate to VS for action execution.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.VsResultListSync">
            <summary>
            Syncs our results list management with VS'es.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.resources.ReSharperPlatformImages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.ReSharperPlatformImages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.ReSharperPlatformImages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.ReSharperPlatformImages.EapProductAboutBox">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.ReSharperPlatformImages.EapProductAboutBoxHighDpi">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.ReSharperPlatformImages.ProductError">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.ReSharperPlatformImages.ProductIcon">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.ReSharperPlatformImages.ProductSuspended">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.ReSharperPlatformImages.RtmProductAboutBox">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.ReSharperPlatformImages.RtmProductAboutBoxHighDpi">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = RunConfigThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(RunConfigThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;RunConfigThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotCoverNoBuild">
             <summary>
            	<para>
            		<para>DotCoverNoBuild Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotCoverNoBuild.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                        .-:^~=;\*77?r!!~:-`  
               /!!!;=LcL/~"_-..````--_,=/)Ft?
               /!``` ?T` ````````____---.``uu
               /!!!;=T7-`.'''''''""""""",.-oF
             ///!!!;=TJ".--------~~~~~~~"-~5T
             //.```` -tr--_______=======":|a~
             ///!!!;==tt^__::::::!!!!!!;^=55`
               /!!!;==+1}^,""""""++++++;!jk^ 
               /!```   "ut~"^~~~~LLLLr\*oP*  
               /!!!;====LuIr~~~==TT|LrJkE;   
                          =2Ir===sTTtkXL`    
                           `!uei+{5XUL-      
                              ,TEb]~         
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+DotCoverNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.DotCoverNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.DotCoverNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.DotCoverNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotCoverNoBuild.Id">
             <summary>
            	<para>
            		<para>DotCoverNoBuild Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotCoverNoBuild"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                        .-:^~=;\*77?r!!~:-`  
               /!!!;=LcL/~"_-..````--_,=/)Ft?
               /!``` ?T` ````````____---.``uu
               /!!!;=T7-`.'''''''""""""",.-oF
             ///!!!;=TJ".--------~~~~~~~"-~5T
             //.```` -tr--_______=======":|a~
             ///!!!;==tt^__::::::!!!!!!;^=55`
               /!!!;==+1}^,""""""++++++;!jk^ 
               /!```   "ut~"^~~~~LLLLr\*oP*  
               /!!!;====LuIr~~~==TT|LrJkE;   
                          =2Ir===sTTtkXL`    
                           `!uei+{5XUL-      
                              ,TEb]~         
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+DotCoverNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.DotCoverNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.DotCoverNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.DotCoverNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotCoverNoBuild.Load_Color">
            <summary>Loads the image for Themed Icon DotCoverNoBuild theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotCoverNoBuild.Load_Gray">
            <summary>Loads the image for Themed Icon DotCoverNoBuild theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotCoverNoBuild.Load_GrayDark">
            <summary>Loads the image for Themed Icon DotCoverNoBuild theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotCoverNoBuild.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DotCoverNoBuild.</summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotMemoryNoBuild">
             <summary>
            	<para>
            		<para>DotMemoryNoBuild Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotMemoryNoBuild.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                               DD9y{|+-      
                          `"/rT88=!r|aDwL-   
               !!;;===~~r{VJ/^-NN=====!JONl` 
               !!``    TE+-.~~=$$+++++++rE$U`
               !!;;==!kk^`~:___QQ|||||||||XQ{
             /!!!;;==Iw+.=-----ggllllllllltg$
             /!````  EH,-,-----gggggggggggggg
             /!!!;;==aOr-~............"-/Oy  
               !!;;==+Ow~_^``````````,,"wR,  
               !!``   `kRc,~~-.```-"~:?#4-   
               !!;;===~={GD2?/=""~!ru#dc`    
                          -LuZA%%#Xj|_       
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+DotMemoryNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.DotMemoryNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.DotMemoryNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.DotMemoryNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotMemoryNoBuild.Id">
             <summary>
            	<para>
            		<para>DotMemoryNoBuild Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotMemoryNoBuild"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                               DD9y{|+-      
                          `"/rT88=!r|aDwL-   
               !!;;===~~r{VJ/^-NN=====!JONl` 
               !!``    TE+-.~~=$$+++++++rE$U`
               !!;;==!kk^`~:___QQ|||||||||XQ{
             /!!!;;==Iw+.=-----ggllllllllltg$
             /!````  EH,-,-----gggggggggggggg
             /!!!;;==aOr-~............"-/Oy  
               !!;;==+Ow~_^``````````,,"wR,  
               !!``   `kRc,~~-.```-"~:?#4-   
               !!;;===~={GD2?/=""~!ru#dc`    
                          -LuZA%%#Xj|_       
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+DotMemoryNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.DotMemoryNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.DotMemoryNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.DotMemoryNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotMemoryNoBuild.Load_Color">
            <summary>Loads the image for Themed Icon DotMemoryNoBuild theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotMemoryNoBuild.Load_Gray">
            <summary>Loads the image for Themed Icon DotMemoryNoBuild theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotMemoryNoBuild.Load_GrayDark">
            <summary>Loads the image for Themed Icon DotMemoryNoBuild theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotMemoryNoBuild.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DotMemoryNoBuild.</summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.ExecuteWithBuild">
             <summary>
            	<para>
            		<para>ExecuteWithBuild Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.ExecuteWithBuild.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                   ;;=,`                     
                   !!`_;=_`                  
                   //   '^/~-                
                   ++     `_!*^.             
                   ++````````.^+/:`          
                   rr```````````_;r!-        
                   LL`````````````."+L~      
                   ))..............,/)/      
                   TT..........._!)r"`       
                   77--------_=cT;-          
                   ll------~rl+:             
                   tt___^+lT~`               
                   CC"/i{/-                  
                   IIIc"                     
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+ExecuteWithBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.ExecuteWithBuild))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.ExecuteWithBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.ExecuteWithBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.ExecuteWithBuild.Id">
             <summary>
            	<para>
            		<para>ExecuteWithBuild Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.ExecuteWithBuild"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                   ;;=,`                     
                   !!`_;=_`                  
                   //   '^/~-                
                   ++     `_!*^.             
                   ++````````.^+/:`          
                   rr```````````_;r!-        
                   LL`````````````."+L~      
                   ))..............,/)/      
                   TT..........._!)r"`       
                   77--------_=cT;-          
                   ll------~rl+:             
                   tt___^+lT~`               
                   CC"/i{/-                  
                   IIIc"                     
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+ExecuteWithBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.ExecuteWithBuild))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.ExecuteWithBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.ExecuteWithBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.ExecuteWithBuild.Load_Color">
            <summary>Loads the image for Themed Icon ExecuteWithBuild theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.ExecuteWithBuild.Load_Gray">
            <summary>Loads the image for Themed Icon ExecuteWithBuild theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.ExecuteWithBuild.Load_GrayDark">
            <summary>Loads the image for Themed Icon ExecuteWithBuild theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.ExecuteWithBuild.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ExecuteWithBuild.</summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigExe">
             <summary>
            	<para>
            		<para>RunConfigExe Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigExe.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
               aaaaaaaaaaaaaaaaaaaaaaaaaaaa  
               SSrr?Lc)|TT7zJlt}{CxI3uo25SS  
               kkrr?Lc)|TT7zJlt}{CxI3uo25kk  
               ZZrr?Lc)|TT7zJlt}{CxI3uo25ZZ  
               66                      "^66  
               ww  ````````````````````"^ww  
               bb  ````````````````````"^bb  
               GG  ''''''''''''''''''''"^GG  
               RR  --------------------"^RR  
               DD  ____________________"^DD  
               DD  """""""""""""""""""""^DD  
               88    ``````..----___:,""^88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunConfigExe}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunConfigExe))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.RunConfigExe.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunConfigExe&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigExe.Id">
             <summary>
            	<para>
            		<para>RunConfigExe Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigExe"></see> identifier class.</para>
            		<para>
            			<code>
                                             
               aaaaaaaaaaaaaaaaaaaaaaaaaaaa  
               SSrr?Lc)|TT7zJlt}{CxI3uo25SS  
               kkrr?Lc)|TT7zJlt}{CxI3uo25kk  
               ZZrr?Lc)|TT7zJlt}{CxI3uo25ZZ  
               66                      "^66  
               ww  ````````````````````"^ww  
               bb  ````````````````````"^bb  
               GG  ''''''''''''''''''''"^GG  
               RR  --------------------"^RR  
               DD  ____________________"^DD  
               DD  """""""""""""""""""""^DD  
               88    ``````..----___:,""^88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunConfigExe}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunConfigExe))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.RunConfigExe.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunConfigExe&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigExe.Load_Color">
            <summary>Loads the image for Themed Icon RunConfigExe theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigExe.Load_Gray">
            <summary>Loads the image for Themed Icon RunConfigExe theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigExe.Load_GrayDark">
            <summary>Loads the image for Themed Icon RunConfigExe theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigExe.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon RunConfigExe.</summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigMethod">
             <summary>
            	<para>
            		<para>RunConfigMethod Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigMethod.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                          `-""_.             
                      `-,^,_--_,^,-`         
                  `._""_----------_""_.`     
                 ,^=~----------------^=^"    
                 ^^~!r!^_---------";r\~^^    
                 ^^---_=+r="--,=r+=,---^^    
                 ^^-------";rr!^_------^^    
                 ^^--------------------^^    
                 ^^----------------_rojT=    
                 "^_-------------_ra7--7a+`  
                  `-,^,_-------_Lkl_    _lkr`
                      `-"":_--_PX!        !XZ
                         `'_^^_"J97_````_79t_
                                 -idl,,ldF_  
                                   -tmmI_    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunConfigMethod}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunConfigMethod))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.RunConfigMethod.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunConfigMethod&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigMethod.Id">
             <summary>
            	<para>
            		<para>RunConfigMethod Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigMethod"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                          `-""_.             
                      `-,^,_--_,^,-`         
                  `._""_----------_""_.`     
                 ,^=~----------------^=^"    
                 ^^~!r!^_---------";r\~^^    
                 ^^---_=+r="--,=r+=,---^^    
                 ^^-------";rr!^_------^^    
                 ^^--------------------^^    
                 ^^----------------_rojT=    
                 "^_-------------_ra7--7a+`  
                  `-,^,_-------_Lkl_    _lkr`
                      `-"":_--_PX!        !XZ
                         `'_^^_"J97_````_79t_
                                 -idl,,ldF_  
                                   -tmmI_    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunConfigMethod}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunConfigMethod))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.RunConfigMethod.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunConfigMethod&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigMethod.Load_Color">
            <summary>Loads the image for Themed Icon RunConfigMethod theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigMethod.Load_Gray">
            <summary>Loads the image for Themed Icon RunConfigMethod theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigMethod.Load_GrayDark">
            <summary>Loads the image for Themed Icon RunConfigMethod theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigMethod.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon RunConfigMethod.</summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigProject">
             <summary>
            	<para>
            		<para>RunConfigProject Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigProject"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigProject.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                 ]]]]]]]]]]]]]]Z+`           
                 jj''''''''''''^Fu*`         
                 EE''''''''''''''^le*`       
                 yy''''        ''''^CS\`     
                 aa''''        ''''''^}aL    
                 PP''''            ''''PP    
                 PP''''            ''''PP    
                 VV''''  `!VXjr^.  ''''VV    
              _|q#R=''_:lmUT=LlaqqY''''99    
             w0ScLe#Hfd#u*^^^^^^^00''''kk    
             MM;*T;;vUl;;;L5A;;;;MM''''44    
             $$+|$Rr++++v#$$$++++$$____ww    
             QQLz2cLlU1LLcIGMLLLLQQ____AA    
             NgkFs6Wg$gWV|???????ggHHHHHH    
              +pggD\` `r#g8E|YVD%gM          
                         :Sgggb1=`           
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PiburosThemedIconsThemedIcons+RunConfigProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PiburosThemedIconsThemedIcons.RunConfigProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PiburosThemedIconsThemedIcons.RunConfigProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PiburosThemedIconsThemedIcons.RunConfigProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigProject.Id">
            <inheritdoc cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigProject">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigProject.Load_Color">
            <summary>Loads the image for Themed Icon RunConfigProject theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigProject.Load_Gray">
            <summary>Loads the image for Themed Icon RunConfigProject theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigProject.Load_GrayDark">
            <summary>Loads the image for Themed Icon RunConfigProject theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigProject.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon RunConfigProject.</summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigRun">
             <summary>
            	<para>
            		<para>RunConfigRun Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigRun.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                    `-_"^==//TTr+!!~_'`      
                 =+r!^:-'``  ``..__~!Ltlr    
                 rc`  ```````-----..`  11    
                 /|'``.......,,,,,,,_`'ut    
                 =7,`.'''''''"""""""_'"o)    
                 -J+.'-------~~~~~~~,_c5~    
                  |l"-_______;;;;;;="=oo`    
                  -Fl"_:,,,,,\\\\\/==uV^     
                   "1l","""""rrrr+!!3k/      
                    ,}x+^^^~~))cr+7Sk=       
                      =ox+~~=T|clSh?`        
                       `!IoT/loZP?'          
                          ,|kwF~             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunConfigRun}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunConfigRun))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.RunConfigRun.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunConfigRun&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigRun.Id">
             <summary>
            	<para>
            		<para>RunConfigRun Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigRun"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                    `-_"^==//TTr+!!~_'`      
                 =+r!^:-'``  ``..__~!Ltlr    
                 rc`  ```````-----..`  11    
                 /|'``.......,,,,,,,_`'ut    
                 =7,`.'''''''"""""""_'"o)    
                 -J+.'-------~~~~~~~,_c5~    
                  |l"-_______;;;;;;="=oo`    
                  -Fl"_:,,,,,\\\\\/==uV^     
                   "1l","""""rrrr+!!3k/      
                    ,}x+^^^~~))cr+7Sk=       
                      =ox+~~=T|clSh?`        
                       `!IoT/loZP?'          
                          ,|kwF~             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunConfigRun}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunConfigRun))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.RunConfigRun.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunConfigRun&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigRun.Load_Color">
            <summary>Loads the image for Themed Icon RunConfigRun theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigRun.Load_Gray">
            <summary>Loads the image for Themed Icon RunConfigRun theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigRun.Load_GrayDark">
            <summary>Loads the image for Themed Icon RunConfigRun theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigRun.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon RunConfigRun.</summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebug">
             <summary>
            	<para>
            		<para>RunDebug Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebug.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                   -l6AEF^ _xwbu-            
                   G$=_/{8m8$""$MRH1,        
                   ^6$G7`-wQQ``QQ""Q$        
                    -T8gm7agg77g%:~gD        
                  -RgRF)+======+ctGgg$WWW    
                 "g$)!_.`    !!  -;?8?`$$    
                 pgF+;!/+++++++```-!"1DQH    
                 ggrrrrrrrrrrrr____rrgg`     
                 8@Iccccccccccc===!+=6g$k    
                 !gQ}TTTTTTTTTTrrcTlD=`gg    
                  ^gg8V1JJJJJJJJCaDg@gggg    
                    ~kQ@$la@@ll@$;rgH        
                   _IR$5.`Egg``gg-`gg        
                   8g!.~TMQgg-.ggggO/        
                   ~GggQRL`=Dgg8~            
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunDebug}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunDebug))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.RunDebug.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunDebug&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebug.Id">
             <summary>
            	<para>
            		<para>RunDebug Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebug"></see> identifier class.</para>
            		<para>
            			<code>
                   -l6AEF^ _xwbu-            
                   G$=_/{8m8$""$MRH1,        
                   ^6$G7`-wQQ``QQ""Q$        
                    -T8gm7agg77g%:~gD        
                  -RgRF)+======+ctGgg$WWW    
                 "g$)!_.`    !!  -;?8?`$$    
                 pgF+;!/+++++++```-!"1DQH    
                 ggrrrrrrrrrrrr____rrgg`     
                 8@Iccccccccccc===!+=6g$k    
                 !gQ}TTTTTTTTTTrrcTlD=`gg    
                  ^gg8V1JJJJJJJJCaDg@gggg    
                    ~kQ@$la@@ll@$;rgH        
                   _IR$5.`Egg``gg-`gg        
                   8g!.~TMQgg-.ggggO/        
                   ~GggQRL`=Dgg8~            
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunDebug}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunDebug))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.RunDebug.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunDebug&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebug.Load_Color">
            <summary>Loads the image for Themed Icon RunDebug theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebug.Load_Gray">
            <summary>Loads the image for Themed Icon RunDebug theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebug.Load_GrayDark">
            <summary>Loads the image for Themed Icon RunDebug theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebug.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon RunDebug.</summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebugNoBuild">
             <summary>
            	<para>
            		<para>RunDebugNoBuild Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebugNoBuild.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                       -}wRU1^ _3pG2-        
                       #Q+~LoNRMQ;=Q$DO3"    
                       ~9$RF-,Agg--gg;=gQ    
               ///!!!!;;ry$gDCZggCCgN=/gD    
               //```  .%g8olc++++++ciuRggQ$$$
               ///!!!7gQlr~_-''''rr.."+7%7-$$
             +\///!!!8goc+r?ccccccc---,r;58QO
             +\..``` ggTTTTTTTTTTTT~~~~TTgg` 
             +\///!!!$@yJJJJJJJJJJJ+++r)+HgQP
               ///!!!{@go}}}}}}}}}}TTit38+-gg
               //```  _ggMX511111111jZ8g@gggg
               ///!!!!;!iOg@$1P@@11@Q+TgA    
                       _uRQE__4gg--gg,_gg    
                       %gr_/t$ggg,_gggg#/    
                       ~AggQRL`=Dgg8~        
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunDebugNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunDebugNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.RunDebugNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunDebugNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebugNoBuild.Id">
             <summary>
            	<para>
            		<para>RunDebugNoBuild Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebugNoBuild"></see> identifier class.</para>
            		<para>
            			<code>
                       -}wRU1^ _3pG2-        
                       #Q+~LoNRMQ;=Q$DO3"    
                       ~9$RF-,Agg--gg;=gQ    
               ///!!!!;;ry$gDCZggCCgN=/gD    
               //```  .%g8olc++++++ciuRggQ$$$
               ///!!!7gQlr~_-''''rr.."+7%7-$$
             +\///!!!8goc+r?ccccccc---,r;58QO
             +\..``` ggTTTTTTTTTTTT~~~~TTgg` 
             +\///!!!$@yJJJJJJJJJJJ+++r)+HgQP
               ///!!!{@go}}}}}}}}}}TTit38+-gg
               //```  _ggMX511111111jZ8g@gggg
               ///!!!!;!iOg@$1P@@11@Q+TgA    
                       _uRQE__4gg--gg,_gg    
                       %gr_/t$ggg,_gggg#/    
                       ~AggQRL`=Dgg8~        
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunDebugNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunDebugNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.RunDebugNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunDebugNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebugNoBuild.Load_Color">
            <summary>Loads the image for Themed Icon RunDebugNoBuild theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebugNoBuild.Load_Gray">
            <summary>Loads the image for Themed Icon RunDebugNoBuild theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebugNoBuild.Load_GrayDark">
            <summary>Loads the image for Themed Icon RunDebugNoBuild theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebugNoBuild.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon RunDebugNoBuild.</summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoBuild">
             <summary>
            	<para>
            		<para>RunNoBuild Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoBuild.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                       rrr~.                 
                       LL_=r+,`              
                       cc''-"/c!_            
               *//!!;;=||-----_=r)=-         
               */.```  TT--------"!|L^`      
               *//!!;;=vv____t*,____~rv+_    
             ++*//!!;;=ll____VVVt+"___,!|i!  
             ++'..```;=tt::::VVVuc=:::,;ctr  
             ++*//!!;;=ff""""o);""""=rt7~`   
               *//!!;;=11""""""""~+lF\-      
               */.```  33^^^^^~\73)"         
               *//!!;;=oo~~~!T3}=`           
                       55!cIor_              
                       yyy7^`                
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.RunNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoBuild.Id">
             <summary>
            	<para>
            		<para>RunNoBuild Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoBuild"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                       rrr~.                 
                       LL_=r+,`              
                       cc''-"/c!_            
               *//!!;;=||-----_=r)=-         
               */.```  TT--------"!|L^`      
               *//!!;;=vv____t*,____~rv+_    
             ++*//!!;;=ll____VVVt+"___,!|i!  
             ++'..```;=tt::::VVVuc=:::,;ctr  
             ++*//!!;;=ff""""o);""""=rt7~`   
               *//!!;;=11""""""""~+lF\-      
               */.```  33^^^^^~\73)"         
               *//!!;;=oo~~~!T3}=`           
                       55!cIor_              
                       yyy7^`                
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.RunNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoBuild.Load_Color">
            <summary>Loads the image for Themed Icon RunNoBuild theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoBuild.Load_Gray">
            <summary>Loads the image for Themed Icon RunNoBuild theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoBuild.Load_GrayDark">
            <summary>Loads the image for Themed Icon RunNoBuild theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoBuild.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon RunNoBuild.</summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebug">
             <summary>
            	<para>
            		<para>RunNoDebug Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebug.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                   !!;,`                     
                   !!`_;=_`                  
                   //   '^/~-                
                   ++     `_;/,`             
                   rr````````.^+!_           
                   ??````)~.````_;r~'        
                   cc````uuu|='```."+r"`     
                   ))....uuut/,....,/c='     
                   TT''''t*"''''_!|+:        
                   zz--------_=c)~`          
                   ll-----_~rl*-             
                   }}___^+l|^`               
                   [["/i{!-                  
                   IIIc,                     
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunNoDebug}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunNoDebug))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.RunNoDebug.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunNoDebug&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebug.Id">
             <summary>
            	<para>
            		<para>RunNoDebug Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebug"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                   !!;,`                     
                   !!`_;=_`                  
                   //   '^/~-                
                   ++     `_;/,`             
                   rr````````.^+!_           
                   ??````)~.````_;r~'        
                   cc````uuu|='```."+r"`     
                   ))....uuut/,....,/c='     
                   TT''''t*"''''_!|+:        
                   zz--------_=c)~`          
                   ll-----_~rl*-             
                   }}___^+l|^`               
                   [["/i{!-                  
                   IIIc,                     
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunNoDebug}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunNoDebug))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.RunNoDebug.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunNoDebug&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebug.Load_Color">
            <summary>Loads the image for Themed Icon RunNoDebug theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebug.Load_Gray">
            <summary>Loads the image for Themed Icon RunNoDebug theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebug.Load_GrayDark">
            <summary>Loads the image for Themed Icon RunNoDebug theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebug.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon RunNoDebug.</summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebugNoBuild">
             <summary>
            	<para>
            		<para>RunNoDebugNoBuild Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebugNoBuild.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                       rrr~.                 
                       LL_=r+,`              
                       cc''-"/c!_            
               *//!!;;=||-----_=r)=-         
               */.```  TT--------"!|L^`      
               *//!!;;=vv____t*,____~rv+_    
             ++*//!!;;=ll____VVVt+"___,!|i!  
             ++'..```;=tt::::VVVuc=:::,;ctr  
             ++*//!!;;=ff""""o);""""=rt7~`   
               *//!!;;=11""""""""~+lF\-      
               */.```  33^^^^^~\73)"         
               *//!!;;=oo~~~!T3}=`           
                       55!cIor_              
                       yyy7^`                
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunNoDebugNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunNoDebugNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.RunNoDebugNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunNoDebugNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebugNoBuild.Id">
             <summary>
            	<para>
            		<para>RunNoDebugNoBuild Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebugNoBuild"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                       rrr~.                 
                       LL_=r+,`              
                       cc''-"/c!_            
               *//!!;;=||-----_=r)=-         
               */.```  TT--------"!|L^`      
               *//!!;;=vv____t*,____~rv+_    
             ++*//!!;;=ll____VVVt+"___,!|i!  
             ++'..```;=tt::::VVVuc=:::,;ctr  
             ++*//!!;;=ff""""o);""""=rt7~`   
               *//!!;;=11""""""""~+lF\-      
               */.```  33^^^^^~\73)"         
               *//!!;;=oo~~~!T3}=`           
                       55!cIor_              
                       yyy7^`                
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunNoDebugNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunNoDebugNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RunConfigThemedIcons.RunNoDebugNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunNoDebugNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebugNoBuild.Load_Color">
            <summary>Loads the image for Themed Icon RunNoDebugNoBuild theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebugNoBuild.Load_Gray">
            <summary>Loads the image for Themed Icon RunNoDebugNoBuild theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebugNoBuild.Load_GrayDark">
            <summary>Loads the image for Themed Icon RunNoDebugNoBuild theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebugNoBuild.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon RunNoDebugNoBuild.</summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Resources.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Resources.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Resources.SR.ConnectionPointCookie_AdviseFail">
            <summary>
              Looks up a localized string similar to Failed to advise the connection point of type {0} on {1}. {2}.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Resources.SR.ConnnectionPointCookie_CantFindNoReason">
            <summary>
              Looks up a localized string similar to Failed to find the connection point of type {0} on {1} due to an unknown reason.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Resources.SR.ConnnectionPointCookie_CantFindWithReason">
            <summary>
              Looks up a localized string similar to Failed to find the connection point of type {0} on {1}. {2}.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Resources.SR.Editor_FileOpenFail_NoProject">
            <summary>
              Looks up a localized string similar to Failed to open the project file {0} because it does not belong to any known Visual Studio project.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.BackendInterop.BackendEntry.ExtractCommandLineArgs(JetBrains.Application.Hosting.IProductCommandLine)">
            <summary>
            In case of Visual Studio should be called on main thread to avoid MTAThreadDispatchCrossApartmentCall 
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.BackendInterop.BackendEntry.CreateBackend(JetBrains.Lifetimes.Lifetime,JetBrains.Util.FileSystemPath,System.Net.IPEndPoint,System.Boolean,JetBrains.VsIntegration.BackendInterop.BackendEntry.CommandLineArgs,JetBrains.Util.DevEnv.IVsEnvironmentInformation,System.Nullable{JetBrains.Diagnostics.LoggingLevel},JetBrains.Util.FileSystemPath,System.Nullable{JetBrains.Interop.WinApi.MachineId})">
            <summary>
            In case of Visual Studio and calling from background thread should be used prepared CommandLineArgs 
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.BackendInterop.BackendState">
            <summary>
            Backend connection state
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.BackendInterop.BackendState.NO_BACKEND">
            <summary>
            No backend attached
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.BackendInterop.BackendState.SERVER_STARTED">
            <summary>
            Server started, waiting for backend
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.BackendInterop.BackendState.BACKEND_CONNECTED">
            <summary>
            Backend connected to the server
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.BackendInterop.BackendState.SHUTDOWN_REQUESTED">
            <summary>
            Backend shutdown requested
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.BackendInterop.BackendState.BACKEND_NOT_RESPONDING_RESTARTING">
            <summary>
            Backend not responding, restarting backend. TODO: whether we need it?
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.BackendInterop.CmdLineOutOfProcess">
            <summary>
            Starts ReSharper in out of process mode
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.BackendInterop.OutOfProcess.ProjectModel.VisualStudioToBackendDiagnosticsActionsInteropActivator">
            <summary>
            Force activate proxy for <see cref="T:JetBrains.Platform.VisualStudio.Protocol.Backend.Diagnostics.IVisualStudioToBackendDiagnosticsActionsInterop"/> to establish connection with the counterpart.
            Also see BackendToVisualStudioActionsInteropActivator.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.DocumentModel.DocumentToVsTextBufferMappingStorage">
            <summary>
            Tracks relations between our documents and VS Text Buffers (here, the native implementation, <see cref="T:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer" />).
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.DocumentModel.DocumentToVsTextBufferMappingStorage.myMap">
            <summary>
            Unlike document-to-project-file-map, this one is all stong references. That's because we associate a document with a text bufer when it gets into the RDT, and that's lifetimed.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.DocumentToVsTextBufferMappingStorage.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Threading.IThreading,JetBrains.Util.ILogger,JetBrains.DocumentModel.IRunningDocuments)">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.VsIntegration.DocumentModel.DocumentToVsTextBufferMappingStorage.KnownTextBuffers">
            <summary>
            Publishes text buffers which we've leared from RDT and for which there is our document created (<see cref="M:JetBrains.VsIntegration.DocumentModel.DocumentToVsTextBufferMappingStorage.TryGetDocumentEnvoyByTextBuffer(JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer)" />).
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.DocumentModel.IVsOleUndoManagerProvider">
            <summary>
            Switching implementation for getting an <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager"/> of a VS document.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.IVsOleUndoManagerProvider.TryGetOleUndoManager(JetBrains.DocumentModel.RunningDocumentId)">
            <summary>
            Returns an OLE Undo Manager, if it's available for this kind of documents and the document is currently open.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.DocumentModel.OleParentUndoUnit.BeforeDo">
            A Signal which is fired before the implementation of "Do" method in this unit is being executed.
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.VsDocumentModelExceptionsStrategy.LogExceptionLoudlyOrSilently(System.Exception)">
            <summary>
            Turned all of the exceptions ON, let's see if they were suppressed for good.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.DocumentModel.VsUndoManager">
            There are a lot of undo-related APIs in Visual Studio, which are (according to the scarce documentation and a lot of
            observations) do the same thing. The core API is the IOleUndoManager, which is the only type we could use. For the sake
            of simplicity, LinkedUndoManager is also used to reuse existing IOleUndoUnit in it, which has a quite nice feature of
            bringing to front a document, in which newer undo steps are exist and because of which Linked Undo Unit cannot be 
            undone as a single unit.
            
            Terms:
              * undo unit: encapsulates the information necessary to undo or redo a single action.
              * Linked Undo Unit/Global Undo Unit/Undo Context: describes a set of undo units, which are connected to different
                documents, but executing "Do" method in one undo unit, also executed "Do" method in linked undo units
              * document/vsbuffer: owner of IOleUndoManager
            
            These APIs are available in Visual Studio;
            IOleUndoManager: IVsTextBuffer can have IOleUndoManager which is the main building block of all undo-related stuff
            per-buffer. All undo-related stuff can be implemented using only this interface.
            
            IVsCompoundAction - each IVsTextBuffer implements also IVsCompoundAction. My guess that it was added only to simlify API
            of IOleUndoManager, which require custom implementation of IOleUndoStep. It can be used for composition of existing
            modification actions with one simple "Open(string)" method.  We don't use it.
            
            IVsLinkedUndoTransactionManager - makes it possible to bound changes in two and more documents as a single undo step.
            It is working presumably by opens all existing IOleUndoManager and push them a special undo unit. This undo unit know
            about other IOleUndoManager participated in transaction and trigger a single "Do" will call "Do" actions on the steps in
            other Undo Managers.
            
            EnvDTE.UndoContext - wrapper around IVsLinkedUndoTransactionManager. There's no particular point in using it.
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.VsUndoManager.UsingUndoUnit(JetBrains.DocumentModel.RunningDocumentId,System.String)">
            Creates parent change unit and opens it via IOleUndoManager.
        </member>
        <member name="T:JetBrains.VsIntegration.DocumentModel.tagUASFLAGS">
            Provides information about the parent undo unit.
        </member>
        <member name="F:JetBrains.VsIntegration.DocumentModel.tagUASFLAGS.UAS_NORMAL">
            The currently open parent undo unit is in a normal, unblocked state and can accept any new units added through
            calls to its Open or Add methods.
        </member>
        <member name="F:JetBrains.VsIntegration.DocumentModel.tagUASFLAGS.UAS_BLOCKED">
            The currently open undo unit is blocked and will reject any undo units added through calls to its
            IOleParentUndoUnit::Open or IOleParentUndoUnit::Add methods. The caller need not create any new units since they
            will just be rejected.
        </member>
        <member name="F:JetBrains.VsIntegration.DocumentModel.tagUASFLAGS.UAS_NOPARENTENABLE">
            The currently open undo unit will accept new units, but the caller should act like there is no currently open
            unit. This means that if the new unit being created requires a parent, then this parent does not satisfy that
            requirement and the undo stack should be cleared.
        </member>
        <member name="F:JetBrains.VsIntegration.DocumentModel.tagUASFLAGS.UAS_MASK">
            When checking for a normal state, use this value to mask unused bits in the pdwState parameter to the
            IOleParentUndoUnit::GetParentState method for future compatibility. For example:
        </member>
        <member name="F:JetBrains.VsIntegration.DocumentModel.Whidbey.Alter.VsDOHFrontendAlter.myTextCache">
            <summary>
            Text cache used for calculate OldText in <see cref="T:JetBrains.Platform.VisualStudio.Protocol.Frontend.DocumentModel.AlterDocumentRequest"/>
            TODO: avoid having two document copies on frontend side. Old version of text can be obtained via VS apis.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.DocumentModel.Whidbey.Alter.VsDOHFrontendAlter.myPendingChanges">
            <summary>
            A bucket to collect changes from events from visual studio. When not null changes from vs just
            recorded in this bucket without actually updating cached text or notifying alter. Used for detecting and
            undoing. Used to detect and revert changes from smart visual studio features like editing xml tags
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.DocumentModel.Whidbey.Alter.VsDOHFrontendAlter.myMruMonikerString">
            <summary>
            Caches the moniker string for the cases when we might need it after disposing of the handler.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.Whidbey.Alter.VsDOHFrontendAlter.DoGetText(System.Int32,System.Int32)">
            <summary>
            Gets text from VS.
            </summary>
            <param name="start">Starting index.</param>
            <param name="len">Length, or <c>-1</c> to get to the end of the document (VS document, not our document).</param>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.Whidbey.Alter.VsDOHFrontendAlter.GetMonikerShort">
            <summary>
            If the moniker is a file path, gets just the short name of the file out of it.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.Whidbey.Alter.VsDOHFrontendAlter.Init_ConnectToStream(JetBrains.Lifetimes.Lifetime,JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer)">
            <summary>
            Stores the stream object in the field.
            Sinks stream events.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.DocumentModel.Whidbey.Alter.VsDOHFrontendAlter.Moniker">
            <summary>
            Gets the document moniker (an arbitrary string that helps with identifying this document).
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.DocumentModel.Whidbey.Doh.IVsDocumentOperationsHandlerWhidbeyFront">
            <summary>
            Pluggable part of the <see cref="!:VsDocumentWhidbey"/> implementation.
            This is the preferred choice, but it becomes active only when the document is open in the Visual Studio Running Documents Table.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.DocumentModel.Whidbey.Doh.VsDocumentOperationsHandlerWhidbeyFront.myMruMonikerString">
            <summary>
            Caches the moniker string for the cases when we might need it after disposing of the handler.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.Whidbey.Doh.VsDocumentOperationsHandlerWhidbeyFront.IsExpectingChangeCallbackForOurActivity(System.Nullable{JetBrains.Util.TextRange},System.Nullable{JetBrains.Util.TextRange})">
            <summary>
            Within a <see cref="M:JetBrains.VsIntegration.DocumentModel.Whidbey.Doh.VsDocumentOperationsHandlerWhidbeyFront.ExpectChangeCallbackForOurActivity(JetBrains.Lifetimes.Lifetime,System.Nullable{JetBrains.Util.TextRange},System.Nullable{JetBrains.Util.TextRange})"/> scope.
            Params semantics is the same as in the <see cref="T:JetBrains.VsIntegration.DocumentModel.Whidbey.Doh.VsDocumentOperationsHandlerWhidbeyFront.ExpectedChange"/> ctor.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.Whidbey.Doh.VsDocumentOperationsHandlerWhidbeyFront.ExpectChangeCallbackForOurActivity(JetBrains.Lifetimes.Lifetime,System.Nullable{JetBrains.Util.TextRange},System.Nullable{JetBrains.Util.TextRange})">
            <summary>
            We're doing smth to VS that it will report back to us in an event, ack the event and let into the transaction.
            Might be nested.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.Whidbey.Doh.VsDocumentOperationsHandlerWhidbeyFront.DoGetText(System.Int32,System.Int32)">
            <summary>
            Gets text from VS.
            </summary>
            <param name="start">Starting index.</param>
            <param name="len">Length, or <c>-1</c> to get to the end of the document (VS document, not our document).</param>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.Whidbey.Doh.VsDocumentOperationsHandlerWhidbeyFront.GetMonikerShort">
            <summary>
            If the moniker is a file path, gets just the short name of the file out of it.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.Whidbey.Doh.VsDocumentOperationsHandlerWhidbeyFront.Init_ConnectToStream(JetBrains.Lifetimes.Lifetime,JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer)">
            <summary>
            Stores the stream object in the field.
            Sinks stream events.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.Whidbey.Doh.VsDocumentOperationsHandlerWhidbeyFront.Init_ReadOnlyBuffer(JetBrains.Lifetimes.Lifetime,JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer,JetBrains.DataFlow.ICollectionEvents{System.Object})">
            <summary>
            Monitors requests to make the buffer readonly, calculates and applies the cumulative state.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.Whidbey.Doh.VsDocumentOperationsHandlerWhidbeyFront.OnChangeStreamTextCore(JetBrains.Util.TextRange,JetBrains.Util.TextRange)">
            <summary>
            Handles changes to VS text streams by applying them to our document text copy.
            </summary>
            <param name="oldrange">Removed range.</param>
            <param name="newrange">Inserted range.</param>
            <returns>Whether we could apply the change incrementally. <c>False</c> means we accumulated more than one pending change and had to resync the full document text.</returns>
        </member>
        <member name="P:JetBrains.VsIntegration.DocumentModel.Whidbey.Doh.VsDocumentOperationsHandlerWhidbeyFront.Moniker">
            <summary>
            Gets the document moniker (an arbitrary string that helps with identifying this document).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.Whidbey.Doh.VsDocumentOperationsHandlerWhidbeyFront.Microsoft#VisualStudio#TextManager#Interop#IVsTextStreamEvents#OnChangeStreamAttributes(System.Int32,System.Int32)">
            <summary>
            Notifies the client that the text stream attributes have changed.
            </summary>
            <param name="iPos">[in] Starting position of the affected text.</param><param name="iLength">[in] Length of the text affected in the text stream.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.Whidbey.Doh.VsDocumentOperationsHandlerWhidbeyFront.Microsoft#VisualStudio#TextManager#Interop#IVsTextStreamEvents#OnChangeStreamText(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Notifies the clients when the content of a text stream in the buffer has changed.
            </summary>
            <param name="iPos">[in] Starting position of the affected text.</param><param name="iOldLen">[in] Previous length of text.</param><param name="iNewLen">[in] New length of text.</param><param name="fLast">[in] Obsolete; ignore.</param>
        </member>
        <member name="T:JetBrains.VsIntegration.DocumentModel.Whidbey.Doh.VsDocumentOperationsHandlerWhidbeyFront.ExpectedChange">
            <summary>
            Identifies a change we expect back from VS and are about to let into the guarded execution.
            Must be a class to preserve addremove identity.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.Whidbey.Doh.VsDocumentOperationsHandlerWhidbeyFront.ExpectedChange.#ctor(System.Nullable{JetBrains.Util.TextRange},System.Nullable{JetBrains.Util.TextRange})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.DocumentModel.Whidbey.Doh.VsDocumentOperationsHandlerWhidbeyFront.ExpectedChange.NewRange">
            <summary>
            Range of the text being inserted by the replacement.
            Undefined if <see cref="F:JetBrains.VsIntegration.DocumentModel.Whidbey.Doh.VsDocumentOperationsHandlerWhidbeyFront.ExpectedChange.OldRange"/> is <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.DocumentModel.Whidbey.Doh.VsDocumentOperationsHandlerWhidbeyFront.ExpectedChange.OldRange">
            <summary>
            Range of the text being overwritten by the replacement.
            <c>Null</c> if any change is expected.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.Whidbey.VsDocumentWhidbeyBackToFront.CreateTextBuffer(JetBrains.Lifetimes.Lifetime,System.String,System.String)">
            <summary>
            Creates a VS Text Buffer.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.DocumentModel.Whidbey.VsDocumentWhidbeyEnvoy">
            <summary> 
            Document implementation for Visual Studio over <see cref="T:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer"/> or a disk file.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.DocumentModel.Whidbey.VsDocumentWhidbeyEnvoy.DocumentId">
            <summary>
            Id of the document bound to backend. It is invalid until <see cref="M:JetBrains.VsIntegration.DocumentModel.Whidbey.VsDocumentWhidbeyEnvoy.AttachToVsTextBuffer(JetBrains.DocumentModel.RunningDocumentId,System.Boolean,JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer,JetBrains.Platform.VisualStudio.Protocol.Common.DocumentModel.VsDocumentModelSynchronization)"/> is called
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.Whidbey.VsDocumentWhidbeyEnvoy.TryGetVsTextStream">
            <summary>
            Gets the VS Text Stream, if currently working over an open VS RDT document.
            Otherwise, <c>Null</c> (<see cref="P:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.IsNull"/>).
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.DocumentModel.Whidbey.VsTextBufferLoadedEventSink">
            <summary>
            Sinks the buffer load event, allows to catch the moment when the buffer completes loading its data.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.Whidbey.VsTextBufferLoadedEventSink.Advise(JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer,System.Action,JetBrains.Application.Threading.IThreading)">
            <summary>
            Sinks the event. Self-disposes.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Env.Diagnostics.AddVsVersionToLogs">
            <summary>
            On startup and shutdown, exposes the product, Windows and VS versions in the logs.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Env.Diagnostics.VsLastErrorExceptionReportDataProvider">
            <summary>
            Gets the detailed text of the last VS error message and attaches to the exception data.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Env.Diagnostics.VsLastErrorExceptionReportDataProvider.#ctor(JetBrains.Application.Components.ILazy{Microsoft.VisualStudio.Shell.Interop.IVsUIShell},JetBrains.Application.Threading.IThreading)">
            <summary>
            Gets the detailed text of the last VS error message and attaches to the exception data.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Env.Diagnostics.VsVersionExceptionReportDataProvider">
            <summary>
            VS versions on reported exceptions.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Env.Diagnostics.VsVersionExceptionReportDataProvider.#ctor(JetBrains.Application.Components.ILazy{JetBrains.Util.DevEnv.IVsEnvironmentInformation})">
            <summary>
            VS versions on reported exceptions.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Env.JetBrains_VsIntegration_IDE_PersistableView_VsPersistableViewEditorFactory">
            <summary>
            This used to be an autogenerated class since we started running multiple separate products within VS, as required to have an unique GUID for each of them.
            But since SharedShell this is not needed anymore, and starting with <c>wave04</c>, we're about to turn this back into a static class.
            This class were the autogenerated one.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Env.Package.VsPackageCommandTargetHandlers">
            <summary>
            Allows <see cref="T:JetBrains.VsIntegration.Src.Env.VsPackage"/> and VsActionManagerObsolete to connect together and process command execution.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Env.Package.VsPackageServices">
            <summary>
            Allows <see cref="T:JetBrains.VsIntegration.Src.Env.VsPackage"/> and VsActionManagerObsolete to connect together and process command execution.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Env.Package.VsPackageSdkStub">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage" /> base implementation originally inherited from some early preview of the VS 7 SDK.
            Probably, could be merged into <see cref="T:JetBrains.VsIntegration.Src.Env.VsPackage" /> class.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Env.Package.VsPackageSdkStub.Site">
            <summary>
            When our package is sited (given its parent Service Provider, and allowed to start working), immediately shows the value. NULLs immediately as well.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Env.Package.VsPackageSdkStub.SiteDeferred">
            <summary>
            When <see cref="F:JetBrains.VsIntegration.Env.Package.VsPackageSdkStub.Site"/> gets a value, defers showing it here with the lowest priority (TODO: make sure that's IDLE priority in Visual Studio already this early on startup).
            When <see cref="F:JetBrains.VsIntegration.Env.Package.VsPackageSdkStub.Site"/> gets NULLed, gets also NULLed immediately.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Env.Package.VsPackageSdkStub.myCommandTargetHandlers">
            <seealso cref="!:QueryStatus" />
            <seealso cref="!:Exec" />
        </member>
        <member name="F:JetBrains.VsIntegration.Env.Package.VsPackageSdkStub.PackageLifetime">
            <summary>
            The lifetime until the package is unloaded by VS.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Env.Package.VsPackageSdkStub.ExecHandler">
            <seealso cref="!:VsPackageSdkStub.Exec" />
        </member>
        <member name="T:JetBrains.VsIntegration.Env.Package.VsPackageSdkStub.QueryStatusHandler">
            <seealso cref="!:VsPackageSdkStub.QueryStatus" />
        </member>
        <member name="T:JetBrains.VsIntegration.Env.Package.VsPackageSdkStub.ServiceProvider">
            <summary>TODO (DK) DEV17 rewrite.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Env.Package.VsPackageSdkStub.ServiceProvider.#ctor(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <summary>Initializes a instance with an existing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface.</summary>
            <param name="sp">A <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Env.Package.VsPackageSdkStub.ServiceProvider.#ctor(Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ServiceProvider" /> class with an existing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> object and optionally passes all requests to the underlying service provider.</summary>
            <param name="sp">An <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface used to resolve services.</param>
            <param name="defaultServices">Determines if this service should respond to queries for <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> and <see cref="T:Microsoft.VisualStudio.OLE.Interop.IObjectWithSite" />.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Env.Package.VsPackageSdkStub.ServiceProvider.Dispose">
            <summary>Releases the resources used by the <see cref="T:Microsoft.VisualStudio.Shell.ServiceProvider" /> object.</summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Env.Package.VsPackageSdkStub.ServiceProvider.GetService(System.Type)">
            <summary>Gets type-based services from the unmanaged service provider.</summary>
            <returns>The requested service, or null if the service could not be located.</returns>
            <param name="serviceType">The type of service to retrieve. The GUID of this type is used to obtain the service from the native service provider.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Env.Package.VsPackageSdkStub.ServiceProvider.GetService(System.Guid)">
            <summary>Gets the specified service from the unmanaged service provider.</summary>
            <returns>The requested service, or null if the service could not be located.</returns>
            <param name="guid">The GUID of the service to retrieve.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Env.Package.VsPackageSdkStub.ServiceProvider.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#GetSite(System.Guid@,System.IntPtr@)">
            <summary>Gets the current site object to resolve services.</summary>
            <param name="riid">The GUID of the requested interface.</param>
            <param name="ppv">The retrieved interface or null.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Env.Package.VsPackageSdkStub.ServiceProvider.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#SetSite(System.Object)">
            <summary>Sets the site object to resolve services.</summary>
            <param name="pUnkSite">The site to be set.</param>
        </member>
        <member name="T:JetBrains.VsIntegration.Env.Package.VsPackageUniversalActionHandlers">
            <summary>
            Handles such actions which are available even without the product shell running.
            Currently, these are for suspending and resuming the product.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Env.Package.VsPackageUniversalActionHandlers.myCommandIds">
            <summary>
            Lazy-inited IDs of commands for fast dispatching.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Env.Package.VsPackageUniversalActionHandlers.UniversalActionsExec(System.ComponentModel.Design.CommandID,Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT,System.IntPtr,System.IntPtr)">
            <summary>
            Hanldes the Universal actions that are available even when the package is not running a product application shell.
            Eg actions that enable/disable that shell.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Env.Package.VsPackageUniversalActionHandlers.UniversalActionsQueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
            <summary>
            Hanldes the Universal actions that are available even when the package is not running a product application shell.
            Eg actions that enable/disable that shell.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Env.Package.VsPackageUniversalActionHandlers.CommandIds">
            <summary>
            Lazy-inited IDs of commands for fast dispatching.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Env.VisualStudioProtocolConnector.IsOutOfProcess">
            <summary>1
            Whether ReSharper is running in Out-of-process model
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Env.VsEnvironmentInformation.Discovery.GetVsHiveString(Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2)">
            <summary>
            VS hive string retriever.
            Get from the local registry root key name.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Env.VsEnvironmentInformation.Discovery.GetVsRootSuffix(Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2)">
            <summary>
            VS Root Suffix from the <see cref="M:JetBrains.VsIntegration.Env.VsEnvironmentInformation.Discovery.GetVsHiveString(Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2)" />.
            We assume that hive is <c>{Version}[_{InstanceId}]{RootSuffix}</c>.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Env.VsMainWindow">
            <summary>
            VS main window base implementation.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Env.VsNonZombiedProductCanBeStarted">
            <summary>
              <para>Exposes the VS Service Provider, but only at times when its VS Shell is not in the zombied state. Otherwise, <c>Null</c>.</para>
              <para>You can bind to the lifetime of this property to make sure you're operating in a live environment.</para>
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Env.VsNonZombiedProductCanBeStarted.SiteNonZombiedUnguarded">
            <summary>
              <para>Exposes the VS Service Provider, but only at times when its VS Shell is not in the zombied state. Otherwise, <c>Null</c>.</para>
              <para>You can bind to the lifetime of this property to make sure you're operating in a live environment.</para>
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Env.VsNonZombiedProductCanBeStarted.InitTrackingSite(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Lazy-inits checking if non-zombied site is available in VS.
            1) Only when our ProductCanBeStarted is polled.
            2) On the main thread, unlike the ProductCanBeStarted ctor which must be demand-safe.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Env.WindowManagement.VsFloatingWindowManager.TryGetMainWindowHandle(System.Object)">
            <summary>
            Legacy way to get the primary VS window handle using DTE.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Src.Env.VsPackage">
            <summary>
            An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage" /> implementation that binds the package to the JetBrains .NET Platform.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Src.Env.VsPackage.#ctor">
            <summary>
            The base ctor to be called by the auto-emitted derived implementation (see <see cref="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters" />).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Src.Env.VsPackage.Init_CreateHostAndEnvironment(JetBrains.Lifetimes.Lifetime,Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <summary>
            Creates the environment which then starts the Shell.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Src.Env.VsPackage.GetPropertyPage_CreateAvalonPage(JetBrains.Lifetimes.Lifetime,Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE*,System.Func{JetBrains.Lifetimes.Lifetime,System.Windows.Media.Visual})">
            <summary>
            Fills in the VS property page request structure at <paramref name="pPage" /> with a HWND host for the <paramref name="FCreateContent" />-emitted content, and disposes of the HWND host when the property page gets released. The content functor is given the lifetime of the page.
            </summary>
            <param name="lifetimeParent"></param>
            <param name="pPage"></param>
            <param name="FCreateContent"></param>
        </member>
        <member name="P:JetBrains.VsIntegration.Interop.Declarations.CSharpProjectProperties4.TargetFramework">
            <summary>
            Doesn't work - garbage
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Declarations.TextManager.BufferLockFlags">
            <summary>
            Options for the IVsTextBuffer/IVsTextLayer::Lock/UnlockBufferEx methods.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.BufferLockFlags.BLF_READ">
            <summary>
            causes writes from other threads to block, but allows reads
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.BufferLockFlags.BLF_READ_AND_WRITE">
            <summary>
            causes writes and reads from other threads to block (implies BLF_READ)
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Declarations.TextManager.BUFFERSTATEFLAGS">
            <summary>
            Options for the IVsTextBuffer::Get/SetStateFlags methods.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.BUFFERSTATEFLAGS.BSF_USER_READONLY">
            <summary>
            user marked it as read only -- no editing allowed at all
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.BUFFERSTATEFLAGS.BSF_FILESYS_READONLY">
            <summary>
            RO on filesystem; possibly under SCC
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.BUFFERSTATEFLAGS.BSF_MODIFIED">
            <summary>
            whether it's been modified  UNDONE: what if one undoes all actions?
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.BUFFERSTATEFLAGS.BSF_SUPPRESS_UI">
            <summary>
            whether to prevent the buffer from showing UI (off by default)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.FONTCOLORPREFERENCES.pColorTable">
            <summary>
            <see cref="T:stdole.IUnknown"/>.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.GetSelectedAtomFlags.gsaDefault">
            <summary>
            matches an atom when the selection is 1) empty &amp; to the left of it, or 2) exactly selecting it
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.RSS_DEFAULT">
            <summary>
            coords relative to the top view layer
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.RSS_TOP_LAYER">
            <summary>
            coords relative to the top view layer
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.RSS_BUFFER">
            <summary>
            coords relative to the buffer
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.RSS_RELATIVE_LAYER">
            <summary>
            coords relative to the layer * specified in pReference
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.RSS_SET_WITHOUT_SCROLLING">
            <summary>
            flags for SetRelativeSelection
            tells the view to not scroll to force the selection to be visible
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.RSS_SET_TO_NEAREST_LOCAL">
            <summary>
            flags for SetRelativeSelection
            for RSS_BUFFER or RSS_RELATIVE_LAYER, tells the view to put the caret at the nearest local position
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.rssDefault">
            <summary>
            old flags for compatibility
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.rssTopLayer">
            <summary>
            old flags for compatibility
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.rssBuffer">
            <summary>
            old flags for compatibility
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.rssRelativeLayer">
            <summary>
            old flags for compatibility
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.rssTrackSel">
            <summary>
            old flags for compatibility
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Declarations.TextManager.SELECTIONSTATE">
            <summary>
            This struct represents the state of a selection such that it can be restored to a particular state.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.SELECTIONSTATE.iAnchorCol">
            <summary>
            WARNING: this is a ViewCol, NOT a CharIndex!  It may be past the end of the physical line.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.SELECTIONSTATE.iActiveCol">
            <summary>
            WARNING: this is a ViewCol, NOT a CharIndex!  It may be past the end of the physical line.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.SELECTIONSTATE.dwFlags">
            <summary>
            ORing of SELECTIONSTATEFLAGS enum
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.SELECTIONSTATE.dwReserved">
            <summary>
            unused for now
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Declarations.TextManager.ViewCol">
            <summary>
            WARNING: this is a ViewCol, NOT a CharIndex!  It may be past the end of the physical line.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Interop.Declarations.VBProjectProperties4.TargetFramework">
            <summary>
            Doesn't work - garbage
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Declarations.VsConstants">
            <summary>
            Various Visual Studio Integration constants &amp; declarations.
            Taken from the JetBrains VSIP Helper DLL.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsConstants.S_FALSE">
            <summary>HRESULT for false.</summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsConstants.S_OK">
            <summary>Generic HRESULT for success.</summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsConstants.E_INVALIDARG">
            <summary>Error HRESULT for an invalid argument.</summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsConstants.E_FAIL">
            <summary>Error HRESULT for a generic failure.</summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsConstants.GUID_Addins">
            <summary>
            Command set GUID for Add-Ins.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Declarations.VsConstants.StandardToolWindows">
            <summary>
            Type: Microsoft.VisualStudio.VSConstants.StandardToolWindows
            Assembly: Microsoft.VisualStudio.Shell.12.0, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMECLOSE">
            <summary>
                // these flag   bits should be the same as RDT flags
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.Hidden">
            <summary>
            obsolete, use WinHidden
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.WinHidden">
            <summary>
            window (tabbed or otherwise) is hidden
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.WinShown">
            <summary>
            a non-tabbed window is made visible
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.TabActivated">
            <summary>
            a tabbed window is activated (made visible)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.TabDeactivated">
            <summary>
            a tabbed window is deactivated
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.WinRestored">
            <summary>
            window is restored to normal state
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.WinMinimized">
            <summary>
            window is minimized
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.WinMaximized">
            <summary>
            window is maximized
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.WinClosed">
            <summary>
            window is closed and persisted
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.DestroyMultInst">
            <summary>
            multi instance toolwindow destroyed
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.AutoHideSlideBegin">
            <summary>
            autohidden window is about to slide into view
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.Hidden">
            <summary>
            obsolete, use WinHidden
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.WinHidden">
            <summary>
            window (tabbed or otherwise) is hidden
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.WinShown">
            <summary>
            a non-tabbed window is made visible
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.TabActivated">
            <summary>
            a tabbed window is activated (made visible)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.TabDeactivated">
            <summary>
            a tabbed window is deactivated
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.WinRestored">
            <summary>
            window is restored to normal state
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.WinMinimized">
            <summary>
            window is minimized
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.WinMaximized">
            <summary>
            window is maximized
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.WinClosed">
            <summary>
            window is closed and persisted
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.DestroyMultInst">
            <summary>
            multi instance toolwindow destroyed
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.AutoHideSlideBegin">
            <summary>
            autohidden window is about to slide into view
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.BeforeWinHidden">
            <summary>
            Before the Hide of single instance toolwindows
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.AutoHideSlideEnd">
            <summary>
            autohidden window is finished its slide into view
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.PropertySheetPageFlags.PSP_DEFAULT">
            <summary>
            Uses the default meaning for all structure members. 
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.PropertySheetPageFlags.PSP_DLGINDIRECT">
            <summary>
             Creates the page from the dialog box template in memory pointed to by the pTemplate member. The PropertySheet function assumes that the template that is in memory is not write-protected. A read-only template will cause an exception in some versions of Microsoft Windows.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.PropertySheetPageFlags.PSP_HASHELP">
            <summary>
            Enables the property sheet Help button when the page is active.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.PropertySheetPageFlags.PSP_HIDEHEADER">
            <summary>
            Causes the wizard property sheet to hide the header area when the page is selected. If a watermark has been provided, it will be painted on the left side of the page. This flag should be set for welcome and completion pages, and omitted for interior pages.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.PropertySheetPageFlags.PSP_PREMATURE">
            <summary>
            Causes the page to be created when the property sheet is created. If this flag is not specified, the page will not be created until it is selected the first time.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.PropertySheetPageFlags.PSP_USECALLBACK">
            <summary>
            Calls the function specified by the pfnCallback member when creating or destroying the property sheet page defined by this structure. 
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.PropertySheetPageFlags.PSP_USEREFPARENT">
            <summary>
            Maintains the reference count specified by the pcRefParent member for the lifetime of the property sheet page created from this structure.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE.IsValid">
            <summary>
            Check whether the cookie is initialized (as it's a struct, need to check for ctor bypass).
            Please use <see cref="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Documents.IRunningDocumentTable.IsCookieValid(JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE)"/> to check the cookie for validity.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE.AssertValid">
            <summary>
            Assert that the cookie is initialized.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE.Equals(JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCREATEWEBBROWSER.VSCWB_ForceNew">
            <summary>
            force create
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCREATEWEBBROWSER.VSCWB_FrameMdiChild">
            <summary>
            default
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCREATEWEBBROWSER.VSCWB_OptionNoDocProps">
            <summary>
            default
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSDPIMODE">
            <summary>
            Return values for <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDpiAware" />.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_Type">
            <summary>
            I4 -> 1 == Document Frame, 2 == Tool Frame
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_DocView">
            <summary>
            UNK object filling client area of window
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_SPFrame">
            <summary>
            UNK IServiceProvider which is site object for DocView object
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_SPProjContext">
            <summary>
            UNK IServiceProvider provided by the owning IVsHierarchy
            This can be QS'ed for project context services
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_Caption">
            <summary>
            BSTR -> full window caption
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_Obsolete3005">
            <summary>
            obsolete
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_Obsolete3006">
            <summary>
            obsolete
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_WindowState">
            <summary>
            I4 -> see VSWINDOWSTATE above
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_FrameMode">
            <summary>
            I4 -> see VSFRAMEMODE above
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_IsWindowTabbed">
            <summary>
            I2 returns 0 if window not tabbed, 
                       1 if window is Tabbed and is Active Tab
                       2 if window is Tabbed and is Not Active tab
               Document windows always return 0
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_UserContext">
            <summary>
            Note: VSFPROPID_UserContext   should now be used by all toolwindows to push context
            UNK IVsUserContext
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_ViewHelper">
            <summary>
            UNK Helper object can override add/override interfaces 
                normally implemented on the DocView object
                ViewHelper can implement following interfaces:
                    IVsWindowFrameNotify
                    IOleCommandTarget
                    IVsToolboxUser
                    IVsDocOutlineProvider
                    IDocHostUIHandler
                    IVsBackForwardNavigation
                    IVsWindowView
                    IVsStatusbarUser
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_ShortCaption">
            <summary>
            BSTR -> partial window caption (ie Foo.Txt)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_WindowHelpKeyword">
            <summary>
            Note: to use the default windowhelp   implementation, leave these properties unset
               you should only be using these properties if you are not pushing usercontext
               (e.g. you are a help window and don't want to blank out other user context)
            BSTR -> keyword to be used for cmdidWindowHelp
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_WindowHelpCmdText">
            <summary>
            Note: to use the default windowhelp   implementation, leave these properties unset
               you should only be using these properties if you are not pushing usercontext
               (e.g. you are a help window and don't want to blank out other user context)
            BSTR -> command text for cmdidWindowHelp (e.g. Help on: Help Index)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_DocCookie">
            <summary>
            The following properties are for all document frames
            I4 -> IVsRunningDocumentTable (RDT) key
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_OwnerCaption">
            <summary>
            The following properties are for all document frames
            BSTR portion of caption defined by owner IVsHierarchy
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_EditorCaption">
            <summary>
            The following properties are for all document frames
            BSTR portion of caption defined by editor implementation
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_pszMkDocument">
            <summary>
            The following properties are for all document frames
            BSTR pszMkDocument passed to CreateDocumentWindow
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_DocData">
            <summary>
            The following properties are for all document frames
            UNK returns the AltDocData if available else the RDTDocData
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_Hierarchy">
            <summary>
            The following properties are for all document frames
            UNK owning IVsHierarchy
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_ItemID">
            <summary>
            The following properties are for all document frames
            I4  VSITEMID of document
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_CmdUIGuid">
            <summary>
            The following properties are for all document frames
            GUID used to control visibility of toolbars and AutoVisible tool windows
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_CreateDocWinFlags">
            <summary>
            The following properties are for all document frames
            I4 VSCREATEDOCWIN flags passed to CreateDocumentWindow 
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_guidEditorType">
            <summary>
            The following properties are for all document frames
            GUID guidEditorType uniquely identify which IVsEditorFactory created the document.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_pszPhysicalView">
            <summary>
            The following properties are for all document frames
            BSTR identifies the type of window created by the IVsEditorFactory (e.g. "Form")
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_InheritKeyBindings">
            <summary>
            The following properties are for all document frames
            GUID most often used by an window to inherit the key bindings of the TextEditor
                 e.g.: pFrame->SetGuidProperty(VSFPROPID_InheritKeyBindings, CMDUIGUID_TextEditor)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_RDTDocData">
            <summary>
            The following properties are for all document frames
            UNK  the DocData registered in the RDT for the document in this frame
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_AltDocData">
            <summary>
            UNK
                 if this window is only editing a piece of a larger document
                 then AltDocData is the DocData object for the piece of the document
                 that is being edited within the window where as the RDTDocData 
                 is the DocData object for the entire document registered in the RDT.
                 AltDocData objects are not registered in the RDT. Document Windows
                 that have AltDocData objects are created using CDW_fAltDocData flag.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_GuidPersistenceSlot">
            <summary>
            The following properties are for all tool frames
            GUID that uniquely identifies a tool window type.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_GuidAutoActivate">
            <summary>
            The following properties are for all tool frames
            GUID OBSOLETE. Do NOT use.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_CreateToolWinFlags">
            <summary>
            The following properties are for all tool frames
            I4 VSCREATETOOLWIN flags passed to CreateToolWindow 
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_ExtWindowObject">
            <summary>
            the followin properties are for extensibility
            UNK returns the Environment's "Window" automation IDispatch object
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_MultiInstanceToolNum">
            <summary>
            The following properties are for all tool frames
            I4 ID of a multi-instance tool window
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_BitmapResource">
            <summary>
            The following properties are for all tool frames
            I4 Resource number of bitmap in satellite dll
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_BitmapIndex">
            <summary>
            The following properties are for all tool frames
            I4 index into strip if bitmap handle is a strip
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_ToolbarHost">
            <summary>
            UNK IVsToolbarHost   used to add toolbars to window.  Property is only valid if 
            CTW_fToolbarHost or UIHWF_SupportToolWindowToolbars is   specfied.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_HideToolwinContainer">
            <summary>
            I2 make the toolwindow's cntr hidden when saving data file
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_FIRST">
            <summary>
            !!!! NOTE !!!!   THIS MUST BE THE SAME AS THE LAST PROP DEFINED
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_OverrideDirtyState">
            <summary>
            BOOL/EMPTY. Tri-state value of dirty star (*) in window caption
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_OLEDocObjectDocument">
            <summary>
            OOL. Specifies whether pane is holding OLE doc object
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_ParentHwnd">
            <summary>
            HWND parent of OwnerDocked window
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_ParentFrame">
            <summary>
            IVsWindowFrame of parent container for OwnerDocked window.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_ToolWindowDocCookie">
            <summary>
            VT_INT_PTR value for IVsRunningDocumentTable (RDT) key for document associated with a tool window (eg. Code Definition Window). 
            Setting this property enables both caption dirty indicator (*) management and the firing of OnBeforeDocumentWindowShow RDT events for the tool window. 
            It is assumed that the frame caption is set correctly, without a dirty indicator (*), before this property is set, 
            as setting this property will cause a caption dirty indicator (*) to be added, if the document is dirty. 
            Also, when this property is set, the OnBeforeDocumentWindowShow RDT event is immediately fired to indicate that a new document has been show.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID">
             <summary>
             Each VSHPROPID must return a VARIANT struct filled in with the proper VT_
                 type.  The caller may *assume* the VT_ is correct (i.e. that there is
                 no need to call VariantChangeType(), or verify the type, beyond an
                 ASSERT() to make sure there weren't header-file mismatches, etc.
             This same logic applies to the caller when setting a property: the
                 hierarchy will assume that the *caller* has passed a VARIANT already
                 converted to the proper VT_.
            ---------------------------------------------------------------------------
             WARNING: VSHPROPID values must not overlap any other *PROPID group values!
             </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_AllowEditInRunMode">
            <summary>
            BOOL. [optional] If this is false or E_NOTIMPL, the compiler disables modifications during run mode.
            (This is the most common expected behavior.) true enables edits. This property enables VSA
            scenarios.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_AltHierarchy">
            <summary>
            UNK. [optional] Returns an IVsHierarchy for SVsTrackSelectionEx.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_AltItemid">
            <summary>
            I4. [optional] Returns an itemid for SVsTrackSelectionEx.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_BrowseObject">
            <summary>
            DISP. [optional] Returns an IDispatch for property browsing.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_CanBuildFromMemory">
            <summary>
            BOOL. [optional] If true, do not prompt to save before building.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_Caption">
            <summary>
            BSTR. Required so the the environment (project window) can display UI.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_CmdUIGuid">
            <summary>
            GUID for command bars (for root only).
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ConfigurationProvider">
            <summary>
            OBSOLETE. Use IVsGetCfgProvider instead.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DefaultEnableBuildProjectCfg">
            <summary>
            BOOL. [optional] By default, specifies whether "Build" should be initially selected in the solution
            cfg. Typically, "Build" is selected if the project supports IVsBuildableProjectCfg.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DefaultEnableDeployProjectCfg">
            <summary>
            BOOL. [optional] By default, specifies whether "Deploy" should be initially selected in the solution
            cfg. Typically, "Deploy" is selected by if the project supports IVsDeployableProjectCfg.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DefaultNamespace">
            <summary>
            BSTR. [optional] String that represents the item's folder-based namespace:
            rootnamespace.folder.subfolder.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DesignerFunctionVisibility">
            <summary>
            I4. [optional] Value from the VSDESIGNER_FUNCTIONVISIBILITY enumeration.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DesignerVariableNaming">
            <summary>
            I4. [optional] Value from the VSDESIGNER_VARIABLENAMING enumeration.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_EditLabel">
            <summary>
            BSTR. [optional] String displayed for the in-place editing node caption.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_Expandable">
            <summary>
            BOOL. Specifies whether the environment should display the "open-this-folder" plus sign.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ExpandByDefault">
            <summary>
            BOOL. Specifies whether the environment should expand this item.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_Expanded">
            <summary>
            BOOL. Specifies whether the node is currently expanded in the UIHierarchyWindow. Starts as false.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ExtObject">
            <summary>
            DISP. [optional] For ITEMID_ROOT, this is the ext.object of the project (Project).
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ExtSelectedItem">
            <summary>
            DISP. [optional] Returns a custom SelectedItem object for the given itemid.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_FIRST">
            <summary>
            INT_PTR. Specifies the first property ID.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_FirstChild">
            <summary>
            Itemid of first child node. (VSITEMID_NIL if no children.)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_FirstVisibleChild">
            <summary>
            INT_PTR. [optional] Similar to FirstChild but only walks items to be displayed in UIHierarchyWindow.
            Required if the hierarchy supports multiple (subsetted or supersetted) views of its contents.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_HandlesOwnReload">
            <summary>
            BOOL. [optional] Project handles unload/reload itself. (Otherwise, the environment handles it.)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_HasEnumerationSideEffects">
            <summary>
            BOOL. [optional] If true, then this hierarchy is not enumerated for FindInFiles and similar
            hierarchy enumerations. (Useful if enumerating is unacceptably slow or could cause a login dialog
            box to appear.)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IconHandle">
            <summary>
            I4. Handle to an icon; UIHierarchyWindow will not call DestroyIcon on it.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IconImgList">
            <summary>
            I4. Handle to an imagelist. (Only for itemid==VSITEMID_ROOT.)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IconIndex">
            <summary>
            I4. If Expandable=true, then IconIndex+1 is used for the open icon.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ImplantHierarchy">
            <summary>
            UNK. [optional] IVsHierarchy implant for this hierarchy.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsFindInFilesForegroundOnly">
            <summary>
            BOOL. [optional] If true, FindInFiles runs in the main thread.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsHiddenItem">
            <summary>
            BOOL. [optional] Specifies that an item is not displayed in current UIHierarchyWindow view. Required
            if the hierarchy supports multiple (subsetted) views of its contents.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsNewUnsavedItem">
            <summary>
            BOOL. [optional] If true, this is a new, unsaved item (as obtained from File.New.File) and
            therefore, the moniker is a temporary name and the caption should be used in the UI instead.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsNonLocalStorage">
            <summary>
            BOOL. [optional] Specifies whether project storage is local. IPersistFileFormat is used for saving
            the project whether it is a local "file" or not.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsNonMemberItem">
            <summary>
            BOOL. [optional] Specifies that the item is not considered a member of the hierarchy. Required if
            the hierarchy supports (supersetted) views of its contents—that is, if ShowAllFiles displays files
            in directories that are not members of the project.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsNonSearchable">
            <summary>
            BOOL. [optional] Specifies that the item is not subject to search-and-replace through Find/Replace
            in Files. Should be true for the project file itself and for project references.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ItemDocCookie">
            <summary>
            INT_PTR. [optional] The document cookie (an abstract value) of the hierarchy item.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ItemSubType">
            <summary>
            BSTR. [optional] Non-localize string that represents the subtype of the item. It is up to each
            package to agree on the meaning of this string.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_LAST">
            <summary>
            INT_PTR. Specifies the last property ID.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_Name">
            <summary>
            BSTR. Name for project (VSITEMID_ROOT) or item.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_NextSibling">
            <summary>
            INT_PTR. Itemid of next sibling node. (VSITEMID_NIL if no more siblings.)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_NextVisibleSibling">
            <summary>
            INT_PTR. [optional] Similar to NextSibling but only walks items to be displayed in
            UIHierarchyWindow. Required if the hierarchy supports multiple (subsetted or supersetted) views of
            its contents.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_NIL">
            <summary>
            NIL. -1
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_OpenFolderIconHandle">
            <summary>
            I4. [optional] Handle of an icon for an open folder. UIHierarchyWindow will not call DestroyIcon on
            it.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_OpenFolderIconIndex">
            <summary>
            I4. [optional] Index for OpenFolder icon.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_OverlayIconIndex">
            <summary>
            I4. [optional] Use the VSOVERLAYICON enumeration. Overlay for the item's main icon.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_OwnerKey">
            <summary>
            BSTR. [optional] Owner key string that identifies the GUID of the owning project.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_Parent">
            <summary>
            I4. Itemid of the parent node. (VSITEMID_NIL if no parent.)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ParentHierarchy">
            <summary>
            UNK. IVsHierarchy that owns this hierarchy.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ParentHierarchyItemid">
            <summary>
            INT_PTR. The itemid of this hierarchy in its parent hierarchy.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_PreferredLanguageSID">
            <summary>
            GUID. [optional] Preferred SID of the (text editor) language service for the project.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ProjectDir">
            <summary>
            BSTR. [optional] Full path of the project directory (for VSITEMID_ROOT only).
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ProjectIDGuid">
            <summary>
            GUID. [optional] Identifies a project across solutions. Generated and set when the project is
            created. Retrieved when the project is opened.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ProjectName">
            <summary>
            [obsolete] Use VSHPROPID_Name.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ProjectType">
            <summary>
            [obsolete] Use VSHPROPID_TypeName.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ReloadableProjectFile">
            <summary>
            [obsolete] Use VSHPROPID_HandlesOwnReload.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_Root">
            <summary>
            [obsolete] Itemid of Root must be VSITEMID_ROOT.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SaveName">
            <summary>
            BSTR. File name specified on the FileSave menu.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SelContainer">
            <summary>
            UNK. [optional] Returns an ISelectionContainer for use with property browsing.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ShowOnlyItemCaption">
            <summary>
            BOOL. [optional] If true, only the caption is shown in the UI instead of the full moniker.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ShowProjInSolutionPage">
            <summary>
            BOOL. [optional] Used to filter the project when Visual Basic or C# calls the component picker for
            add-reference. Returns VARIANT_TRUE to show that the project is in the list.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SortPriority">
            <summary>
            I4. [optional] Sort priority in UIHierarchyWindow. By default, standard projects have priority zero.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_StartupServices">
            <summary>
            UNK. [optional] Returns an IVsProjectStartupServices* to add services to be started on next project
            load (for VSITEMID_ROOT only).
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_StateIconIndex">
            <summary>
            I4. State icon index. Use VsStateIcon enumeration.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_StorageType">
            <summary>
            BSTR. [optional] Non-localize string that represents storage type. Same as the string that's used in
            the VSDIR file to differentiate between different location MRU lists.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_TypeGuid">
            <summary>
            GUID to identify the type of node/hierarchy; searches on GUID_ItemType.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_TypeName">
            <summary>
            BSTR. Displays a name to identify the type of node/hierarchy. (Used in the title bar.)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_UserContext">
            <summary>
            UNK. [optional] IVsUserContext for the project or item.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_AddItemTemplatesGuid">
            <summary>
            GUID. Optional. Alternate project type GUID to use to get add item templates.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_AppTitleBarTopHierarchyName">
            <summary>
            BSTR. Optional. Enables the hierarchy to put its top-most name (solution or server) into the Title
            bar of the app, such as YourName part of "YourName - Microsoft Visual Studio."
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_BrowseObjectCATID">
            <summary>
            GUID. Optional. Intrinsic Extender CATID of the BrowseObject for the given IVsHierarchy Itemid. For
            VSITEMID_ROOT, this corresponds to the object that is used to build the Project.Properties
            collection.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_CategoryGuid">
            <summary>
            GUID to identify the family/category of this non-solution based Hierarchy (for example, Portfolio
            Project Hierarchy).
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_CfgBrowseObjectCATID">
            <summary>
            GUID. Optional. Intrinsic Extender CATID of the configuration BrowseObject for the given
            IVsHierarchy Itemid.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_CfgPropertyPagesCLSIDList">
            <summary>
            BSTR. Optional. Semicolon-delimited list of cslids of the configuration-dependent property pages.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ChildrenEnumerated">
            <summary>
            BOOL. Optional. Returns true if children have been enumerated. Typically, this is of interest only
            for projects where enumerating children can be expensive, that is, Web projects.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_Container">
            <summary>
            BOOL. Optional. true if the item is a container (it may not be expandable, but it contains items).
            Support this property if your folder is not expandable but contains items that should be included in
            SCC operations.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DebuggeeProcessId">
            <summary>
            Process ID of debugging target if known; otherwise, zero.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DebuggerSourcePaths">
            <summary>
            BSTR. Optional. Semi-colon delimited list of paths where the debugger looks for source.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DesignerHiddenCodeGeneration">
            <summary>
            I4 indicates which code is supposed to go to the hidden designer file. Bit flag values in
            __VSDESIGNER_HIDDENCODEGENERATION.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DisableApplicationSettings">
            <summary>
            BOOL. Optional. Set this to true in your hierarchy to disable Application Settings design time
            support in your project.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_EnableDataSourceWindow">
            <summary>
            BOOL. Optional. Set this to true in your hierarchy to disable the Data Source Window for this
            project.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ExcludeFromExportItemTemplate">
            <summary>
            BOOL. Optional. By default, is false. true if the project item cannot be exported through export
            item template.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ExtObjectCATID">
            <summary>
            GUID. Optional. Intrinsic Extender CATID of the ExtObject (Automation Object) for the given
            IVsHierarchy Itemid. For VSITEMID_ROOT this corresponds to the type of the 'Project' object.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_FIRST2">
            <summary>
            Indicates the first property ID.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IntellisenseUnknown">
            <summary>
            IUnknown. Optional. Returns the IUnknown of the Intellisense compiler that is used by the project
            system.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsLinkFile">
            <summary>
            BOOL. Optional. true if the file is a link file.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsUpgradeRequired">
            <summary>
            BOOL. Optional. true if the item or any of its children are either already in the process of
            upgrading or must be upgraded.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_KeepAliveDocument">
            <summary>
            BOOL. Optional. true if the document should be kept alive in the project regardless of opened/closed
            state.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_NoDefaultNestedHierSorting">
            <summary>
            BOOL. Optional. true if the hierarchy does not want nested hierarchies sorted first and items after,
            and sorted alphabetically (like solution folders).
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_PriorityPropertyPagesCLSIDList">
            <summary>
            BSTR. Optional. Semi-colon delimited ordered list of CLSIDs of the preferred property pages.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ProjectDesignerEditor">
            <summary>
            GUID. Optional. GUID of the Project Designer Editor that the project uses to change project
            properties.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_PropertyPagesCLSIDList">
            <summary>
            BSTR. Optional. Semicolon-delimited list of clsids of the configuration-independent property pages.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_StatusBarClientText">
            <summary>
            BSTR. Hierarchy scoped text for Client Text field of status bar. This text is displayed while the
            given hierarchy is the active hierarchy. VT_EMPTY clears hierarchy scoped text and resets to global
            text specified by the application.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SupportedMyApplicationTypes">
            <summary>
            BSTR. Optional. semi-colon delimited list of application-types supported for project-systems that
            support My.Application. The property-page that exposes information about My.Application can use this
            list to determine which values are located in the application-type drop-down menu as selectable
            choices for the user.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SupportsProjectDesigner">
            <summary>
            BOOL. Optional. true if the project uses a Project Designer Editor instead of the property page
            frame to change project properties.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SuppressOutOfDateMessageOnBuild">
            <summary>
            BOOL. Optional. true if the project does not want to participate in the "this configuration is out
            of date" message on Build/F5.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_UseInnerHierarchyIconList">
            <summary>
            BOOL. Optional. Set this to true in the outer hierarchy if you want the icon for an inner (nested)
            hierarchy root to come from the inner hierarchy image list. By default, we are getting that icon
            from the outer hierarchy image list.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_FIRST3">
            <summary>
            The first ID.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsDefaultNamespaceRefactorNotify">
            <summary>
            VT_BOOL. Set to TRUE if a default namespace call to IVsRefactorNotify is currently occurring, or
            FALSE otherwise.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ProductBrandName">
            <summary>
            VT_BSTR. Replace the application name with hierarchy branding in the main window title.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_RefactorExtensions">
            <summary>
            An array of service GUIDs that implement IVsRefactorNotify and for which this interface should be
            called for any refactoring operation in the project (only defined for VSITEMID_ROOT).Add to this
            property by creating registry values under the local registry root's Projects&lt;project type
            GUID>\FileExtensions&lt;file extension> key with name "RefactorNotify". Then if there is a file with
            this extension in the project, the VSHPROPID_Extensions property contains the data from this
            registry value.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ServiceReferenceSupported">
            <summary>
            VT_BOOL Project support for service references.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SupportsHierarchicalUpdate">
            <summary>
            BOOL set to TRUE to enable hierarchical update.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SupportsLinqOverDataSet">
            <summary>
            BOOL set to TRUE to enable the Linq Over DataSet.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SupportsNTierDesigner">
            <summary>
            BOOL set this to TRUE to enable the N-Tier designer.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_TargetFrameworkVersion">
            <summary>
            Deprecated. Use VSHPROPID_TargetFrameworkMoniker instead.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_WebReferenceSupported">
            <summary>
            VT_BOOL the project support for web references.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_AlwaysBuildOnDebugLaunch">
            <summary>
            BOOL. Indicates whether your project always builds on debug launch (F5) when the “Only build startup
            projects and dependencies on Run” Tools option is set.Set this property to true in your project
            hierarchy if you want your project to always build on debug launch in this case. This ensures that
            your project is built even if your project is not declared as a build dependency of the startup
            project. This property is a workaround for the fact that currently there is only support for build
            dependencies (IVsBuildDependency) and not deploy dependencies in the solution build manager. This
            property will be used rarely in circumstances where you may have a circular set of dependencies
            involving a combination of build and deploy dependencies between multiple projects (for example, A
            has a build dependency on B while B has a deploy dependency on A; if B is the startup project, then
            solution build manager would not realize it needs to build A to satisfy the required deploy
            dependency when the above mentioned Tools option is set).
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_BuildAction">
            <summary>
            BSTR. The build action for an item.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_BuildDependencies">
            <summary>
            BSTR. A semicolon-delimited list of the projects required to build this project. If this property is
            not implemented, EnumDependencies(IVsEnumDependencies) will be used.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DescriptiveName">
            <summary>
            BSTR. A more descriptive name of the item. Used to replace the running document table moniker in
            document windows, tooltips, or other parts of the UI.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DesignTimeDependencies">
            <summary>
            BSTR. A semicolon-delimited list of projects required to support design time features (IntelliSense,
            form designers, etc.). If this property is not implemented, VSHPROPID_BuildDependencies will be used
            instead.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ExternalItem">
            <summary>
            BOOL. This item is external to the solution.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_FIRST4">
            <summary>
            The first ID.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SupportsAspNetIntegration">
            <summary>
            BOOL. Set this property to true in your project hierarchy if your web project supports being
            consumed by Silverlight.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_TargetFrameworkMoniker">
            <summary>
            VT_BSTR. The format for the target framework moniker is Identifier,Version=ver,Profile=value,
            e.g. .NETFramework,Version=v3.5,Profile=Client'.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_AppContainer">
            <summary>
            When set, indicates the target framework moniker to which the project system should retarget upon
            its first opportunity. The project is responsible for ensuring the applicability of the framework
            that is returned. This property is optional.
            </summary>
            <remarks>To figure out if vc project can be producing winmd, check VSHPROPID_AppContainer.</remarks>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DemandLoadDependencies">
            <summary>
            If true and the project was loaded synchronously, all its dependencies will also be loaded
            synchronously (the default). If false and the project was loaded synchronously, those of its
            dependencies that support asynchronous load can be loaded asynchronously. This property is optional.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_FaultMessage">
            <summary>
            A localized message indicating the reason for a faulted project. This string is used in the fault
            resolution UI. This property is optional.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_FIRST5">
            <summary>
            Specifies the first property identifier.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ForceFrameworkRetarget">
            <summary>
            Indicates whether the project's output requires running in an app container or not. This property is
            optional.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsFaulted">
            <summary>
            For project hierarchies, set to true to indicate that the project has encountered an error.
            Implementations should raise property change events to all IVsHierarchyEvents sinks whenever this
            value changes. This property is optional.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsPackagingProject">
            <summary>
            BOOL [optional] Indicates whether the output of the project is a package of its content (i.e. a zip
            file).
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsProjectProvisioned">
            <summary>
            Returns true if an unloaded project is in provisioned state (that is, displayed with
            "(initializing)" caption). This is implemented only by the stub hierarchy. This property is used
            when a project that supports Asynchronous Solution Load is loaded in the background. While such
            projects are loading they are exposed in the Solution as an unloaded project stub. When the
            background loading project reaches the "provisioned" state, the real project has been created but
            has not been publicized through the solution load events. Therefore the project IVsHierarchy exposed
            in the solution project collection (and Solution Explorer) is still the stub hierarchy and not the
            real project hierarchy. Only basic hierarchy properties are available, such as the project name and
            icon. When the loading project reaches the provisioned state, the
            OnAfterProjectProvisioned(IVsHierarchy) event is fired. This property is optional.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_MinimumDesignTimeCompatVersion">
            <summary>
            Gets or sets the minimum design time compatible version with which this project is compatible. This
            property is set mostly by calls from the IVsAppCompat service during the addition of a new feature
            in the project that would break compatibility with a previous version of the application. This
            property is optional.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_MonikerSameAsPersistFile">
            <summary>
            Indicates that IVsProject.GetMkDocument() for VSITEMID_ROOT returns the same full path to the
            project file as IPersistFileFormat::GetCurFile. This is useful when it is more expensive to call
            GetCurFile due to the need to get the format on-disk.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_OutputType">
            <summary>
            The output type for a project, from the __VSPROJOUTPUTTYPE enumeration. This property is optional.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ProjectCapabilities">
            <summary>
            A space-delimited list of the project's capabilities. This property is optional.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ProjectPropertiesDebugPageArg">
            <summary>
            BSTR or VT_I4 [optional] The argument to be passed to the cmdidProjectProperties command to activate
            the project's debug page. This property is used by the StartupProjectProperties command to activate
            the correct debug property page for the startup project.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ProjectUnloadStatus">
            <summary>
            The unload status (UNLOADSTATUS_UnloadedByUser, UNLOADSTATUS_LoadPendingIfNeeded, and so on) from
            the _VSProjectUnloadStatus enumeration. This is implemented only by the stub hierarchy. This
            property is optional.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ProvisionalViewingStatus">
            <summary>
            The provisional viewing status for the item (from the __VSPROVISIONALVIEWINGSTATUS enumeration). If
            this property is not supported and the hierarchy implements IVsProject, the provisional viewing
            status is determined by calling GetProvisionalViewingStatusForFile(String, IVsHierarchy, UInt32,
            Guid) with the name returned by GetMkDocument(UInt32, String). This property is optional.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ReferenceManagerUser">
            <summary>
            Returns the implementation of IVsReferenceManagerUser for a project. This property is optional.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_RequiresReloadForExternalFileChange">
            <summary>
            Returns true if the file on disk was not last written by the project and therefore the user should
            be prompted to reload due to an external change to the file. This property is defined for
            ITEMID_ROOT. It is expected that this property is only called during a FilesChanged event handler.
            The expected implementation is for projects to record the timestamp on the project file when the
            file is saved. Later when this property is requested, the project should compare the current
            timestamp of the file to the last recorded save timestamp. If they are not equal then return true,
            otherwise return FALSE (that is, a reload is not required). This property is optional.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SupportedOutputTypes">
            <summary>
            A list of supported output types (specified as values used by the OutputTypeEx project property).
            This allows a flavor to customize the contents of the output type dropdown in the property pages.
            This property will be checked first by the property pages, so this property effectively overrides
            the VSHPROPID_SupportedMyApplicationTypes property used by the Visual Basic property page. This
            property is optional.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SupportsCrossRuntimeReferences">
            <summary>
            Indicates whether a project allows references across runtimes (for example, native to managed). The
            default is true, so a project must have the property and set it to false in order to block
            cross-runtime references. This property is optional.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_TargetPlatformIdentifier">
            <summary>
            The target platform for a project type. Examples are "Windows", "Windows Phone", " Azure", "XBox
            360", and "Portable". This property is optional.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_TargetPlatformVersion">
            <summary>
            The version of the target platform (for example "8.0"). This property is optional. However, this
            property is required if VSHPROPID_TargetPlatformIdentifier is provided.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_TargetRuntime">
            <summary>
            The runtime the project targets, from the __VSPROJTARGETRUNTIME enumeration. This property is
            optional.
            </summary>
            <remarks>
            see https://msdn.microsoft.com/en-us/office/office365/api/microsoft.visualstudio.shell.interop.__vshpropid5%28v=vs.110%29
            used to check if a given project is a managed C++ or unmanaged
            returns  Microsoft.VisualStudio.Shell.Interop.__VSPROJTARGETRUNTIME
            </remarks>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_WinMDAssembly">
            <summary>
            Indicates whether the project produces an assembly (.exe or .dll) with WinMD metadata. If true, it
            produces an assembly. This property is optional.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ConnectedServicesPersistence">
            <summary>
            VT_UNKNOWN [optional] Returns the implementation of IVsPersistConnectedServices for a project.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_CurrentTargetId">
            <summary>
            GUID [optional] Current target id for the project hierarchy. Currently implemented on the stub
            hierarchy for projects that are unloaded during retargeting check.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_FIRST6">
            <summary>
            The first property.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_NewTargetId">
            <summary>
            GUID [optional] The default new target id for retargeting. Currently implemented on the stub
            hierarchy for projects that are unloaded during retargeting check.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_NuGetPackageProjectTypeContext">
            <summary>
            VT_BSTR [optional] Returns an optional string (VSITEMID_ROOT) that Nuget will consume and pass along
            as an opaque string to the Nuget servers when doing installs of packages. This provides additional
            telemetry data (in addition to the project type GUIDs) which can be used to improve features like
            Suggested Packages that are based on the project type and what users of that project type are
            installing. This is especially useful if a single project type supports multiple technologies and
            the project type GUID does not provide enough differentiation.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ProjectRetargeting">
            <summary>
            VT_UNKNOWN [optional] Returns the implementation of IVsRetargetProject for a project.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_RequiresLegacyManagedDebugEngine">
            <summary>
            VT_BOOL [optional] Returns a bool that determines whether the project requires the legacy managed
            debug engine (cpde.dll) when debugging the managed code in this project.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ScriptJmcProjectControl">
            <summary>
            VT_ARRAY [optional] Returns the list of implementations of IVsScriptJmcProjectControl for a project.
            (JMC = JustMyCode.) IVsScriptJmcProjectControl is used by the debugger to query projects for the
            user/non-user code status of a source file.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ShowAllProjectFilesInProjectView">
            <summary>
            VT_BOOL [optional] Indicates that all the project files should be visible in solution explorer by
            default. This property is added to give Visual Basic flavored project systems the power to change
            the default visibility of special files in Solution Explorer. For example, by default all the
            dependent files in Visual Basic projects aren’t shown in Solution Explorer, and a flavored project
            could return true for this property to show those files.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_Subcaption">
            <summary>
            VT_BSTR [optional] Returns an optional string that is shown in Solution Explorer. The current
            implementation honors this property only for hierarchy root nodes. For example, with Windows Store
            projects targeting Windows 8.1, the sub-caption is "Windows 8.1" for the project node, and the final
            text in the Solution Explorer is "Project caption (Windows 8.1)".
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_CanBuildQuickCheck">
            <summary>
            VT_I4 [optional] Returns a _VSQuickCheckAnswer that determines whether the given project can perform
            building via IVsBuildableProjectCfg. This property can be used as a quick test to know if
            build-related features should be enabled.The absence of this property is equivalent to returning
            QCA_QuickAnswerNA: the caller must call IVsBuildableProjectCfg to see if building is possible.
            QCA_Always: feature is always enabled; QCA_Yes: feature is enabled now; QCA_No: feature is not
            enabled now; QCA_Never: feature is not implemented. Returning QCA_Never/No does not stop all callers
            from accessing and using the project's IVsBuildableProjectCfg interface.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_CanDebugLaunchQuickCheck">
            <summary>
            VT_I4 [optional] Returns a _VSQuickCheckAnswer regarding if the given project can perform F5 debug
            launch via IVsDebuggableProjectCfg.The absence of this property is equivalent to returning
            QCA_QuickAnswerNA: the caller must call IVsDebuggableProjectCfg to see if building is possible.
            QCA_Always: feature is always enabled; QCA_Yes: feature is enabled now; QCA_No: feature is not
            enabled now; QCA_Never: feature is not implemented. Returning QCA_Never/No does not stop all callers
            from accessing and using the project's IVsDebuggableProjectCfg interface.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_CanDeployQuickCheck">
            <summary>
            T_I4 [optional] Returns a _VSQuickCheckAnswer that determines whether the given project can perform
            deploying via IVsDeployableProjectCfg.The absence of this property is equivalent to returning
            QCA_QuickAnswerNA: the caller must call IVsDeployableProjectCfg to see if building is possible.
            QCA_Always: feature is always enabled; QCA_Yes: feature is enabled now; QCA_No: feature is not
            enabled now; QCA_Never: feature is not implemented. Returning QCA_Never/No does not stop all callers
            from accessing and using the project's IVsDeployableProjectCfg interface.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DeploymentRelativePath">
            <summary>
            VT_BSTR [optional] Gets the deployment relative path of the given item. The deployment relative path
            is the file location relative to the package directory, when the given file is deployed.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ExcludeFromMoveFileToProjectUI">
            <summary>
            VT_BOOL [optional] Returns true if the given project wants to be excluded from participating with
            cmdidMoveFileToProjectXXX commands.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsSharedFolder">
            <summary>
            VT_BOOL [optional] Returns true if the given item represents the folder node as an ancestor of
            shared items.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsSharedItem">
            <summary>
            VT_BOOL [optional] If this returns true, this item is imported from another project file that is
            shared across projects. Otherwise it returns false. A shared item is special. It is added to this
            importing project hierarchy as a hidden linked file, so it is enumerable via VSHPROPID_FirstChild
            and VSHPROPID_NextSibling, but it cannot be mutated by this importing project.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsSharedItemsImportFile">
            <summary>
            VT_BOOL [optional] Returns true if the given item represents the MSBuild file that imports the
            shared items.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_MSBuildImportsStorage">
            <summary>
            VT_UNKNOWN [optional] Returns the implementation of IVsMSBuildImportsStorage for a project.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_OneAppCapabilities">
            <summary>
            VT_BSTR [optional] Returns the "one app" capabilities. When they include "Migration" or "Add
            Platform", they are used to pick the right template using ApplyTo metadata from templates.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ProjectTreeCapabilities">
            <summary>
            VT_BSTR [optional] Provides a space-delimited list of project tree node capabilities. Note: Unlike
            VSHPROPID_ProjectCapabilities, which is available only on the Project Root node, this property is
            allowed on every node.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SharedAssetsProject">
            <summary>
            VT_UNKNOWN [optional] Returns the implementation of IVsSharedAssetsProject for the given shared
            project hierarchy. The item ID should be VSITEMID_ROOT.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SharedItemContextHierarchy">
            <summary>
            VT_UNKNOWN [optional] Gets or sets the contextual IVsHierarchy for the items that are shared by
            other projects. It is used for sharing scenarios, for example, when a document is shared across
            projects. When someone edits that document, one project must be selected as the context to offer to
            IntelliSense. The currently-selected project hierarchy could be retrieved or changed via this
            property on the master owning project hierarchy. Note this property is per-project in the current
            implementation, GetProperty/SetProperty must be invoked on the root node.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SharedItemsImportFullPaths">
            <summary>
            VT_BSTR [optional] Provides a vertical bar ('|') delimited list of the full paths of the
            "Shared.items" project files that have been imported by the project. Note: This property does not
            return "Shared.items" files for Shared Folder nodes that manage their shared MSBuild file as a
            nested hierarchy implementation.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SharedProjectHierarchy">
            <summary>
            VT_UNKNOWN [optional] Returns the actual owning shared project hierarchy of the given shared item.
            Note: The item ID should be the ID of a shared item. If the given item is already an item in a
            shared assets project, then it returns this shared assets project.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ShortSubcaption">
            <summary>
            VT_BSTR [optional] The short version of VSHPROPID_Subcaption.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ActiveIntellisenseProjectContext">
            <summary>
            BSTR [Optional] Gets/Sets the contextual IntelliSense project. It is used in shared scenarios where
            a single project is sharing files in more than one intellisense project.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ContainsStartupTask">
            <summary>
            VT_BOOL [optional] Gets whether or not the hierarchy contains StartupTasks.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DiagHubLanguage">
            <summary>
            BSTR [optional, required if VSHPROPID_DiagHubPlatform is provided]. Provides the language the
            project is targeting. Examples are 'CSharp', 'FSharp', 'VisualBasic', 'Cpp', 'CppCli', 'JavaScript',
            'TypeScript'.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DiagHubPlatform">
            <summary>
            BSTR [optional]. Provides the Target Platform for the project type to the Diagnostics Hub.This is
            similar to VSHPROPID_TargetPlatformIdentifier but is Diagnostics Hub-specific. Examples are
            'Windows', 'Windows_Phone', 'XBox', 'iOS', 'Android'.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DiagHubPlatformVersion">
            <summary>
            BSTR [optional, required if VSHPROPID_DiagHubPlatform is provided]. Provides the version of the
            target platform. This is similar to VSHPROPID_TargetPlatformVersion but is Diagnostics Hub-specific.
            This will be parsed as a .NET System.Version and should conform to its requirements.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DiagHubProjectTarget">
            <summary>
            BSTR [optional, required if VSHPROPID_DiagHubPlatform is provided]. Provides the GUID for the
            project target within the specified VSHPROPID_DiagHubProjectTargetFactory.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DiagHubProjectTargetFactory">
            <summary>
            BSTR [optional, required if VSHPROPID_DiagHubPlatform is provided]. Provides the GUID for the target
            factory within the Diagnostics Hub to use. The default value is
            '283ff32f-bc50-467c-a318-ee7015338ac0'.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_FIRST8">
            <summary>
            The first of the properties.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IconMonikerGuid">
            <summary>
            GUID [optional]. Gets the Guid for an ImageMoniker associated with the item's icon.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IconMonikerId">
            <summary>
            VT_I4 [optional] Gets the Id for an ImageMoniker associated with the item's icon.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IconMonikerImageList">
            <summary>
            VT_UNKNOWN [optional]. Gets the IVsImageMonikerImageList, which can be used to query for
            ImageMonikers for this item.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_OpenFolderIconMonikerGuid">
            <summary>
            GUID [optional]. Gets the Guid for an ImageMoniker associated with the item's expanded icon.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_OpenFolderIconMonikerId">
            <summary>
            VT_I4 [optional]. Gets the Id for an ImageMoniker associated with the item's expanded icon.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ProjectCapabilitiesChecker">
            <summary>
            VT_UNKNOWN [optional] Returns an IVsBooleanSymbolPresenceChecker, which can be passed to an instance
            of IVsBooleanSymbolExpressionEvaluator2 to evaluate project capabilities. This property obsoletes
            VSHPROPID_ProjectCapabilities and should be used when available.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SharedProjectReference">
            <summary>
            VT_UNKNOWN [optional]. Returns an IVsSharedProjectReference object for a particular shared project
            reference item node.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SolutionGuid">
            <summary>
            GUID [optional] Reserved. Provides the Solution level ID.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SupportsIconMonikers">
            <summary>
            VT_BOOL [optional]. Determines whether or not the hierarchy supports icon monikers as an override of
            the VSHPROPID_IconImgList and VSHPROPID_IconHandle properties. Aggregatable projects should only
            support this property if they're the outermost aggregate, even if they do support ImageMoniker-based
            images.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_HasRunningOperation">
            <summary>
            (optional) Whether or not the item has running operations requested by the user. Used to provide the
            user with a UI hint of ongoing work for the associated item.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsDeferred">
            <summary>
            (optional) Gets whether or not the hierarchy is in deferred load mode.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.VSITEMID_NIL">
            <summary>
            A Visual Studio item identifier that represents the absence of a project item. This value is used when there is no current selection. 
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.VSITEMID_ROOT">
            <summary>
            A Visual Studio item identifier that represents the root of a project hierarchy and is used to identify the entire hierarchy, as opposed to a single item. 
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.VSITEMID_SELECTION">
            <summary>
            A Visual Studio item identifier that represents the currently selected item or items, which can include the root of the hierarchy.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.CompareTo(JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.Equals(JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTFLAGS.RDT_NoLock">
            <summary>
            can be used with FindAndLockDocument(RDT_NoLock,...,&amp;docCookie) to get DocCookie w/o taking a lock
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTFLAGS.RDT_DOCMASK">
            <summary>
            allow VSCREATEDOCWIN flags in doc mask
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTSAVEOPTIONS.SaveIfDirty">
            <summary>
            save only if dirty (this is the default)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTSAVEOPTIONS.PromptSave">
            <summary>
            prompt user whether to save
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTSAVEOPTIONS.ForceSave">
            <summary>
            force save even if not dirty
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTSAVEOPTIONS.SaveNoChildren">
            <summary>
            save only the root of the hierarchy passed in, don't include its children
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTSAVEOPTIONS.SaveOnlyChildren">
            <summary>
            save only children of the hierarchy passed in, don't include hierarchy itself
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTSAVEOPTIONS.ActivateDocOnErr">
            <summary>
            activates the editor window of a doc if it errors on save
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTSAVEOPTIONS.DocClose">
            <summary>
            indicates save is a result of a document close
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTSAVEOPTIONS.Reserved">
            <summary>
            reserved internal bits
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSREGDOCLOCKHOLDER.RDLH_WeakLockHolder">
            <summary>
            A weak lock holder only wants to hold an EditLlock if there are no other edit locks
            IVsDocumentLockHolder::Close() will be called on next EditLock.
            A weak lock holder must first check the existing lock count, and only take its
            EditLock if there are no other EditLocks. It should take its EditLock before
            calling RegisterDocumentLockHolder.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Events.DocumentModel.VsRunningDocumentTableEvents">
            <summary>
            The centralized sink for the <see cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Documents.IVsRunningDocumentTableWrapper">VS Running Document Table</see> events.
            Get from <c>VsShell.Components.VsShims.VsRunningDocumentTableEvents</c>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.DocumentModel.VsRunningDocumentTableEvents.AfterAttributeExChangeEventArgs.#ctor(JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE,JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTATTRIB,JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem,System.String,JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.DocumentModel.VsRunningDocumentTableEvents.Sink.OnAfterFirstDocumentLock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Called after application of the first lock of the specified type to a document in the Running Document Table (RDT).
            </summary>
            <param name="docCookie"></param>
            <param name="dwRdtLockType"></param>
            <param name="dwReadLocksRemaining"></param>
            <param name="dwEditLocksRemaining"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.DocumentModel.VsRunningDocumentTableEvents.Sink.OnBeforeLastDocumentUnlock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Called before releasing the last lock of the specified type on the specified document in the Running Document Table (RDT).
            </summary>
            <param name="docCookie"></param>
            <param name="dwRdtLockType"></param>
            <param name="dwReadLocksRemaining"></param>
            <param name="dwEditLocksRemaining"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.DocumentModel.VsRunningDocumentTableEvents.Sink.OnAfterSave(System.UInt32)">
            <summary>
            Called after a document in the Running Document Table (RDT) is saved.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.DocumentModel.VsRunningDocumentTableEvents.Sink.OnAfterAttributeChange(System.UInt32,System.UInt32)">
            <summary>
            Called after an attribute of a document in the Running Document Table (RDT) changes.
            </summary>
            <param name="docCookie"></param>
            <param name="grfAttribs"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.DocumentModel.VsRunningDocumentTableEvents.Sink.OnBeforeDocumentWindowShow(System.UInt32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
            <summary>
            Called before displaying a document window.
            </summary>
            <param name="docCookie"></param>
            <param name="fFirstShow"></param>
            <param name="pFrame"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.DocumentModel.VsRunningDocumentTableEvents.Sink.OnAfterDocumentWindowHide(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
            <summary>
            Called after a document window is hidden.
            </summary>
            <param name="docCookie"></param>
            <param name="pFrame"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.DocumentModel.VsRunningDocumentTableEvents.Sink.OnAfterAttributeChangeEx(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String)">
            <summary>
            Called after a document attribute is changed. This is an advanced version of the OnAfterAttributeChange method.
            </summary>
            <param name="docCookie"></param>
            <param name="grfAttribs"></param>
            <param name="pHierOld"></param>
            <param name="itemidOld"></param>
            <param name="pszMkDocumentOld"></param>
            <param name="pHierNew"></param>
            <param name="itemidNew"></param>
            <param name="pszMkDocumentNew"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.DocumentModel.VsRunningDocumentTableEvents.Sink.OnBeforeSave(System.UInt32)">
            <summary>
            Called before saving a document.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.DocumentModel.VsRunningDocumentTableEvents.Sink.OnBeforeFirstDocumentLock(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String)">
            <summary>
            Called before a document is locked in the Running Document Table (RDT) for the first time.
            </summary>
            <param name="pHier"></param>
            <param name="itemid"></param>
            <param name="pszMkDocument"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.DocumentModel.VsRunningDocumentTableEvents.Sink.OnAfterSaveAll">
            <summary>
            Fired after a Save All command is executed.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.DocumentModel.VsRunningDocumentTableEvents.Sink.OnAfterLastDocumentUnlock(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String,System.Int32)">
            <summary>
            Fired after the last document in the Running Document Table (RDT) is unlocked.
            </summary>
            <param name="pHier"></param>
            <param name="itemid"></param>
            <param name="pszMkDocument"></param>
            <param name="fClosedWithoutSaving"></param>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Events.ProjectModel.VsSelectionProjectModel">
            <summary>
            Exposes the <see cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Projects.IVsMonitorSelectionProjectModel">Visual Studio Shell Selection</see>, including <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents">its events</see>.
            This class requires the Project Model Module Zone, see base class for Shell-only uses.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.ProjectModel.VsSelectionProjectModel.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell,JetBrains.VsIntegration.Interop.Shim.VsShell.Projects.IVsMonitorSelectionProjectModel,Microsoft.VisualStudio.Shell.Interop.IVsSolution,JetBrains.Util.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.ProjectModel.VsSelectionProjectModel.Selection">
            <summary>
            Exposes the current Visual Studio selected items.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.ProjectModel.VsSelectionProjectModel.SelectionChanged">
            <summary>
            Fires when selection changes in Visual Studio.
            Exposes the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnSelectionChanged(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.ISelectionContainer,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.ISelectionContainer)" /> sink.
            Warning: the old selection object in the arguments is known to be inaccurate, use
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.ProjectModel.VsSelectionProjectModel.VsMonitorSelectionProjectModel">
            <summary>
            Access to VS selection interface.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.ProjectModel.VsSelectionProjectModel.SelectionChangedEventArgs.ItemsNew">
            <summary>
            Currently selected items.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.ProjectModel.VsSelectionProjectModel.SelectionChangedEventArgs.ItemsOld">
            <summary>
            Previous selection. Could well be <c>Null</c> if not supported by impl. In VS9 and below, multiselection object for old items is not available because it's singleton and already contains selection for the new items. In this case, we'd pass <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.Shell.IVsWindowFrameNotify.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Events.Shell.VsSelection">
            <summary>
            Here used to be a class wrapping the <see cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelection">Visual Studio Shell Selection</see>, but it had to be split into Project Model Module Zone aware and non-aware parts, so choose between the class' derived types.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Events.Shell.VsSelectionShell">
            <summary>
            Exposes the <see cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelection">Visual Studio Shell Selection</see>, including <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents">its events</see>.
            This is the base class which knows only of the Shell. To see hierarchy-related events, use the Project Model Module Zone aware derived class.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.Shell.VsSelectionShell.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell,JetBrains.Util.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.Shell.VsSelectionShell.SelectedWindowFrame">
            <summary>
              <para>Gets the live value of the currently-selected window frame.</para>
              <para>The value is the same as in <see cref="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell.GetSelectedWindowFrame" />, but with change notifications.</para>
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.Shell.VsSelectionShell.VsMonitorSelectionShell">
            <summary>
            Access to VS selection interface.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Events.TextControls.VsTextManagerEvents">
            <summary>
            The centralized sink for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager">VS Text Manager</see> events.
            Get from <c>VsShell.Components.VsShims.VsTextManagerEvents</c>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.TextControls.VsTextManagerEvents.#ctor(JetBrains.Lifetimes.Lifetime,Microsoft.VisualStudio.TextManager.Interop.IVsTextManager,JetBrains.Application.Threading.IThreading)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.TextControls.VsTextManagerEvents.RegisterView">
            <summary>
            Fires when a view is registered.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.TextControls.VsTextManagerEvents.UnregisterView">
            <summary>
            Fires when a view is unregistered.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.TextControls.VsTextManagerEvents.UserPreferencesChanged">
            <summary>
            Fired when the user's global preferences have changed.
            When IVsTextManagerEvents::OnUserPreferencesChanged is fired, the recipient of the event should check these values.  The recipient should only react to the change event if its own category GUIDs match those of the FONTCOLORPREFERENCES struct. (pguidFontCategory, pguidColorCategory).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.TextControls.VsTextManagerEvents.Sink.Microsoft#VisualStudio#TextManager#Interop#IVsTextManagerEvents#OnRegisterMarkerType(System.Int32)">
            <summary>
            Fired when an external marker type is registered.
            </summary>
            <param name="iMarkerType">[in] External marker type that was registered.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.TextControls.VsTextManagerEvents.Sink.Microsoft#VisualStudio#TextManager#Interop#IVsTextManagerEvents#OnRegisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <summary>
            Fires when a view is registered.
            </summary>
            <param name="pView">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"/> interface identifying the view that was registered. </param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.TextControls.VsTextManagerEvents.Sink.Microsoft#VisualStudio#TextManager#Interop#IVsTextManagerEvents#OnUnregisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <summary>
            Fires when a view is unregistered.
            </summary>
            <param name="pView">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"/> interface identifying the view that was unregistered.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.TextControls.VsTextManagerEvents.Sink.Microsoft#VisualStudio#TextManager#Interop#IVsTextManagerEvents#OnUserPreferencesChanged(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES[])">
            <summary>
            Fires when the user's global preferences are changed.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Extension.ILocalRegistryEx.CreateObject(Microsoft.VisualStudio.Shell.Interop.ILocalRegistry,System.Guid,System.Guid)">
            <summary>
            Creates an object.
            </summary>
            <param name="localRegistry">Establishes a locally-registered COM object relative to the local Visual Studio registry hive</param>
            <param name="clsid">GUID if object to be created</param>
            <param name="iid">GUID assotiated with specified System.Type</param>
            <returns>An object</returns>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Extension.IVsFilterKeysEx">
            <summary>
            Extensions for IVsFilterKeys2 Visual Studio interface.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Extension.IVsUserDataEx.GetData``1(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Guid)">
            <summary>
            Gets user data from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData" /> bag.
            Throws on errors or if data is missing.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Extension.IVsUserDataEx.GetOrCreateData``2(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Guid,``1,System.Func{``1,``0})">
            <summary>
            Gets user data from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData" /> bag.
            Throws on errors or if data is missing.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Extension.IVsUserDataEx.SetData``1(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Guid,``0)">
            <summary>
            Puts user data into the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData" /> bag.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Extension.IVsUserDataEx.TryGetData``1(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Guid,System.Action{``0})">
            <summary>
            Gets user data from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData" /> bag.
            Invokes <paramref name="FWithData" /> only when data is present.
            Returns whether retrieving the data succeeded (whether <paramref name="FWithData" /> was called).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Extension.IVsUserDataEx.TryGetData``1(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Guid)">
            <summary>
            Gets user data from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData" /> bag.
            Returns <c>Null</c> if data is missing.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Extension.LayoutDoubleUtil">
            <summary>
            Borrowed from Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil, Microsoft.VisualStudio.Utilities, Version=16.0.0.0
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Extension.ProjectModel.IVsSolutionEx.GetSolutionHitem(Microsoft.VisualStudio.Shell.Interop.IVsSolution)">
            <summary>
            Gets the hierarchy item of the VS Solution.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Extension.ProjectModel.IVsSolutionEx.EnumerateHierarchies(Microsoft.VisualStudio.Shell.Interop.IVsSolution,System.UInt32)">
            <summary>
            Enumerates hierarchies in <see cref="!:vsSolution"/> according to <see cref="!:enumFlag"/>
            </summary>
            <param name="vsSolution">IVsSolution object</param>
            <param name="enumFlag">Enum flag what type of hierarchies to enumerate. <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS"/></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.IExposeVsServices">
            <summary>
            Helps <see cref="T:JetBrains.VsIntegration.Interop.VsServiceProviderResolver"/> with exposing VS services it does not know about (eg VS10-specific).
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.IServiceProviderEx">
            <summary>
            Generic extensions to the OLE <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"/> interface.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.IServiceProviderEx.GetService``2(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <summary>
            Queries a service provider for a service.
            </summary>
            <param name="sp">The service provider to be queried for a service.</param>
            <typeparam name="TService">Identifier of the service.</typeparam>
            <typeparam name="TInterface">Interface to query the gotten instance for.</typeparam>
            <returns>The instance.</returns>
            <example>
            <code>
            IVsDebugger2 debugger = sp.GetService&lt;SVsShellDebugger, IVsDebugger2&gt;();
            </code>
            </example>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.IServiceProviderEx.GetService(Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.Guid,System.Guid)">
            <summary><seealso cref="M:JetBrains.VsIntegration.Interop.IServiceProviderEx.GetService``2(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)"/>
            Queries a service provider for a service.
            </summary>
            <param name="sp">The service provider to be queried for a service.</param>
            <param name="ssid">Identifier of the service.</param>
            <param name="iid">Interface to query the gotten instance for.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.IServiceProviderEx.TryGetService``2(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <summary><seealso cref="M:JetBrains.VsIntegration.Interop.IServiceProviderEx.GetService``2(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)"/>
            Tries to query a service provider for a service.
            </summary>
            <typeparam name="TService">Identifier of the service.</typeparam>
            <typeparam name="TInterface">Interface to query the gotten instance for.</typeparam>
            <param name="sp">The service provider to be queried for a service.</param>
            <returns>The instance, or <c>Null</c> in case of a failure.</returns>
            <example>
            <code>
            IVsDebugger2 debugger = sp.TryGetService&lt;SVsShellDebugger, IVsDebugger2&gt;();
            </code>
            </example>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.IServiceProviderEx.TryGetService(Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.Guid,System.Guid)">
            <summary>
            Tries to query a service provider for a service.
            </summary>
            <param name="sp">The service provider to be queried for a service.</param>
            <param name="serviceGuid">Identifier of the service.</param>
            <param name="interfaceGuid">Interface to query the gotten instance for.</param>
            <returns>The instance, or <c>Null</c> in case of a failure.</returns>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.VsFindManagerSearchStatus">
            <summary>
            See Microsoft.VisualStudio.PlatformUI.SearchStatus, Microsoft.VisualStudio.Shell.NN.0,
            where NN [11..15]
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.IVsServiceProviderEx">
            <summary>
            VS-specific extensions to the OLE <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"/> interface.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.IVsServiceProviderEx.IOleCommandTarget(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <summary>
            Gets the main Ole Command Target of the Visual Studio Shell.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.OleCmdText">
            <summary>
            A helper class taken from the JetBrains VSIP Helper.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.OleCmdText.OLECMDTEXT">
            <summary>
            (DK) A copy of Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT to avoid difference between Dev17 and pre-Dev17
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Shim.ConnectionPointCookie`1">
            <summary>
            A bridge from COM events to a .NET interface.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.ConnectionPointCookie`1.CreateApartmentThreaded(JetBrains.Lifetimes.Lifetime,System.Runtime.InteropServices.ComTypes.IConnectionPointContainer,`0,System.String)">
            <summary>
            Advises for listening the COM events.
            Creates a single-threaded connection point that must be created and disposed on the same thread (not necessarily the main one).
            </summary>
            <param name="lifetime">Allows to unadvise the cookie.</param>
            <param name="source">COM event source.</param>
            <param name="sink">The event sink that will receive the event callbacks.</param>
            <param name="origin">Origin of this call, for diagnostics on any failures.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.ConnectionPointCookie`1.CreateSingleThreaded(JetBrains.Lifetimes.Lifetime,System.Runtime.InteropServices.ComTypes.IConnectionPointContainer,`0,JetBrains.Application.Threading.IThreading,System.String)">
            <summary>
            Advises for listening the COM events.
            Creates a single-threaded connection point that must be created and disposed of on the main thread only.
            </summary>
            <param name="lifetime">Allows to unadvise the cookie.</param>
            <param name="source">COM event source.</param>
            <param name="sink">The event sink that will receive the event callbacks.</param>
            <param name="threading">Identifies the primary thread.</param>
            <param name="origin">Origin of this call, for diagnostics on any failures.</param>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Shim.ConnectionPointVsCookie`1">
            <summary>
            A bridge from COM events declared in VS PIA to a .NET interface.
            They managed to create two PIAs for the same poor interface.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.ConnectionPointVsCookie`1.CreateApartmentThreaded(JetBrains.Lifetimes.Lifetime,Microsoft.VisualStudio.OLE.Interop.IConnectionPointContainer,`0,System.String)">
            <summary>
            Advises for listening the COM events.
            Creates a single-threaded connection point that must be created and disposed on the same thread (not necessarily the main one).
            </summary>
            <param name="lifetime">Allows to unadvise the cookie.</param>
            <param name="source">COM event source.</param>
            <param name="sink">The event sink that will receive the event callbacks.</param>
            <param name="origin">Origin of this call, for diagnostics on any failures.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.ConnectionPointVsCookie`1.CreateSingleThreaded(JetBrains.Lifetimes.Lifetime,Microsoft.VisualStudio.OLE.Interop.IConnectionPointContainer,`0,JetBrains.Application.Threading.IThreading,System.String)">
            <summary>
            Advises for listening the COM events.
            Creates a single-threaded connection point that must be created and disposed of on the main thread only.
            </summary>
            <param name="lifetime">Allows to unadvise the cookie.</param>
            <param name="source">COM event source.</param>
            <param name="sink">The event sink that will receive the event callbacks.</param>
            <param name="threading">Identifies the primary thread.</param>
            <param name="origin">Origin of this call, for diagnostics on any failures.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.CreateStreamMarker(Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,JetBrains.TextControl.DocOffset,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient)">
            <summary>
            Markers -- note that these are stream-oriented markers -- use IVsTextLines
            to create line markers
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.EnumMarkers_Count(JetBrains.TextControl.DocOffset,System.Int32,Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS)">
            <summary>
            // IVsTextStream::EnumMarkers enumerates ALL markers, but gets their IVsTextStreamMarker interface via IVsEnumStreamMarkers.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.EnumMarkers_Enumerable(JetBrains.TextControl.DocOffset,System.Int32,Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS)">
            <summary>
            IVsTextStream::EnumMarkers enumerates ALL markers, but gets their IVsTextStreamMarker interface via IVsEnumStreamMarkers.
            Note: you must make profit out of your <c>IVsTextStreamMarker</c> right after you get it from the enum, otherwise it will expire as the next enum item is emitted.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.GetLengthOfLine(JetBrains.Util.dataStructures.TypedIntrinsics.Int32{JetBrains.DocumentModel.DocLine})">
            <summary>
            NOTE:  These methods could be expensive, depending upon the underlying
            implementation of the buffer (i.e. it could be very difficult to
            calculate the size of the buffer if it is a virtual-line-oriented
            implementation as VB's, etc.).  The only methods used heavily by views
            and that should be reasonably efficient by all implementations are
            GetLineCount() and GetLengthOfLine().
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.GetLineCount">
            <summary>
            NOTE:  These methods could be expensive, depending upon the underlying
            implementation of the buffer (i.e. it could be very difficult to
            calculate the size of the buffer if it is a virtual-line-oriented
            implementation as VB's, etc.).  The only methods used heavily by views
            and that should be reasonably efficient by all implementations are
            GetLineCount() and GetLengthOfLine().
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.GetLineIndexOfPosition(System.Int32)">
            <summary>
            NOTE:  These methods could be expensive, depending upon the underlying
            implementation of the buffer (i.e. it could be very difficult to
            calculate the size of the buffer if it is a virtual-line-oriented
            implementation as VB's, etc.).  The only methods used heavily by views
            and that should be reasonably efficient by all implementations are
            GetLineCount() and GetLengthOfLine().
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.GetOrCreateUserData``2(System.Guid,``1,System.Func{``1,``0})">
            <summary>
            Gets or creates user data via the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData" /> interface on this object.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.GetOrCreateUserDataProperty``1">
            <summary>
            Gets or creates a live property which sits in the user data via the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData" /> interface on this text buffer object.
            The properties are tell apart only by the type of their value.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.GetPositionOfLine(JetBrains.Util.dataStructures.TypedIntrinsics.Int32{JetBrains.DocumentModel.DocLine})">
            <summary>
            NOTE:  These methods could be expensive, depending upon the underlying
            implementation of the buffer (i.e. it could be very difficult to
            calculate the size of the buffer if it is a virtual-line-oriented
            implementation as VB's, etc.).  The only methods used heavily by views
            and that should be reasonably efficient by all implementations are
            GetLineCount() and GetLengthOfLine().
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.GetPositionOfLineIndex(JetBrains.DocumentModel.DocumentCoords)">
            <summary>
            NOTE:  These methods could be expensive, depending upon the underlying
            implementation of the buffer (i.e. it could be very difficult to
            calculate the size of the buffer if it is a virtual-line-oriented
            implementation as VB's, etc.).  The only methods used heavily by views
            and that should be reasonably efficient by all implementations are
            GetLineCount() and GetLengthOfLine().
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.GetStateFlags">
            <summary>
            state flags include: modified, read-only, read-only on disk
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.GetUserData``1(System.Guid)">
            <summary>
            Gets user data from the text buffer's <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData"/> bag.
            Throws on errors or if data is missing.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.InitializeContent(System.String)">
            <summary>
            Initialize content (will fail unless called on brand new untitled buffer)
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.IsImplementingAllTextBufferInterfaces">
            <summary>
            Checks whether this <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer"/> raw interface supports all of the interfaces we might need: <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"/>, <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream"/>.
            We use them all and should ignore text documents whose buffers do not implement them fully. Such buffers might be coming from custom text buffer implementations by third-party packages. Eg: RSRP-122245.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.ReplaceStreamEx(Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            More general version of ReplaceStream/ReloadStream
            </summary>
            <remarks>MSDN says that it returns "number of characters changed." In fact VS returns number of characters inserted.</remarks>
            <remarks>(DK) RSRP-272348. In VB-projects ReplaceStreamEx method returns S_OK but does not change the stream content in the following cases:
            - while debugging when Enable Edit and Continue option is turned off (x86 and x64);
            - while debugging x64 application, even when Enable Edit and Continue option is turned on;
            - while debugging an attached process (any platform, any Enable Edit and Continue option state).
            To detect situations when ReplaceStreamEx does not change the stream, we compare stream sizes before and after the operation. An exception is fired if modification has not been made.
            </remarks>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.SetStateFlags(JetBrains.VsIntegration.Interop.Declarations.TextManager.BUFFERSTATEFLAGS)">
            <summary>
            state flags include: modified, read-only, read-only on disk
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.SetUserData``1(System.Guid,``0)">
            <summary>
            Puts user data into the text buffer's <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData"/> bag.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.TryGetUserData``1(System.Guid,System.Action{``0})">
            <summary>
            Gets user data from the text buffer's <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData"/> bag.
            Invokes <paramref name="FWithData"/> only when data is present.
            Returns whether retrieving the data succeeded (whether <paramref name="FWithData"/> was called).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.TryGetUserData``1(System.Guid)">
            <summary>
            Gets user data from the text buffer's <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData"/> bag.
            Returns <c>Null</c> if data is missing.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.AssertStreamMarkerParamsValid(JetBrains.TextControl.DocOffset,System.Int32,Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS)">
            <summary>
            Thorough validation of the params, because the VS impl returns only INVALIDARG and we do need details.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.EnumMarkersCore(JetBrains.TextControl.DocOffset,System.Int32,Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS,Microsoft.VisualStudio.TextManager.Interop.IVsEnumStreamMarkers@,System.Int32@)">
            <summary>
            Impl for safely getting the enumeration and the count.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextLayer.BaseLineIndexToLocal(JetBrains.DocumentModel.DocumentCoords)">
            <summary>
            Translates the coordinates from the base buffer coordinate space (bottom layer, doc-line-col) to the local view coordinate space (topmost layer, text-control-line-col).
            If the conversion fails (layer returns an error code), returns <c>Null</c>.
            </summary>
            <param name="posDoc">Base buffer line-col coordinates.</param>
            <returns>A non-<c>Null</c> value in case of success.</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextLayer.LocalLineIndexToBase(JetBrains.TextControl.TextControlLineColumn)">
            <summary>
            Translates the coordinates from the local view coordinate space (topmost layer, text-control-line-col) to the base buffer coordinate space (bottom layer, doc-line-col).
            If the conversion fails (layer returns an error code), returns <c>Null</c>.
            </summary>
            <param name="posTxt">Local view line-col coordinates.</param>
            <returns>A non-<c>Null</c> value in case of success.</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextManagerEx.TryGetVsActiveTextView(Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2)">
            <summary>
            Looks up the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> we consider active.
            </summary>
            <param name="vsTextManager2"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView.BaseLineIndexToLocal(JetBrains.DocumentModel.DocumentCoords)">
            <summary>
            Uses the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView"/> interface of the view to translate the coordinates from the base buffer coordinate space (bottom layer, doc-line-col) to the local view coordinate space (topmost layer, text-control-line-col).
            If the conversion fails (layer returns an error code), returns <c>Null</c>.
            If the view is not layered, translates the coordinates transparently.
            </summary>
            <param name="posDoc">Base buffer line-col coordinates.</param>
            <returns>A non-<c>Null</c> value in case of success.</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView.EnsureSpanVisible(JetBrains.DocumentModel.DocLineColumnRange)">
            <summary>
            Ensures that text is in view, both vertically and horizontally.
            </summary>
            <returns>
            If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"/>. If it fails, it returns an error code.
            </returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView.GetTopmostLayer">
            <summary>
            <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView"/>::<see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView.GetTopmostLayer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer@)"/>.
            Could return a <c>Null</c> interface.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView.IsCompletorWindowActive">
            <summary>
            Calls thru <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView.IsDetachedFromBuffer">
            <summary>
            Checks if this view has lost its buffer (<see cref="M:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView.GetBuffer"/> throws in such cases).
            Observed on DevTen if a queued action is executed after the view is somewhat dead (NP-131 and alike).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView.LocalLineIndexToBase(JetBrains.TextControl.TextControlLineColumn)">
            <summary>
            Uses the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView"/> interface of the view to translate the coordinates from the local view coordinate space (topmost layer, text-control-line-col) to the base buffer coordinate space (bottom layer, doc-line-col).
            If the conversion fails (layer returns an error code), returns <c>Null</c>.
            If the view is not layered, translates the coordinates transparently.
            </summary>
            <param name="posTxt">Local view line-col coordinates.</param>
            <returns>A non-<c>Null</c> value in case of success.</returns>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView.ScrollBarAxis">
            <summary>
            Identifies the Visual Studio text control scroll axis.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Projects.IVsMonitorSelectionProjectModel">
            <summary>
            The Project Model Module Zone aware part of the VS Selection wrapper. See also <see cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell" />.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Interop.Shim.VsShell.Projects.IVsMonitorSelectionProjectModel.Shell">
            <summary>
            Gets the base object which knows of the Shell properties only.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Projects.IVsMonitorSelectionProjectModel.GetCurrentSelection(Microsoft.VisualStudio.Shell.Interop.IVsSolution)">
            <summary>
            Gets the current visual studio selection.
            <see cref="P:System.Tuple`2.Item1" /> is the single selection, <see cref="P:System.Tuple`2.Item2" /> is the multiselection.
            </summary>
            <param name="vsSolution"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Projects.IVsMonitorSelectionProjectModel.TryCreateHitemFromSelectionEntry(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID,Microsoft.VisualStudio.Shell.Interop.IVsSolution)">
            <summary>
            Creates the <see cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem" /> out of individual items reported by VS selection. The special handling is required when selection contains the solution node itself, as it fails to report its hierarchy properly.
            Cannot handle multisel, this method is rather a part of the multisel handling :)
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Projects.IVsMonitorSelectionProjectModel.VsSelectionToList(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.IVsSolution)">
            <summary>
            Converts a single or multiple VS selection into a list of selected hierarchy items.
            </summary>
            <param name="hierarchy">Hierarchy. Non-null if all of the selected items are of the same hierarchy. Special case: might be Null if the solution itself is selected.</param>
            <param name="itemid">Selected item ID for single selection, <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.VSITEMID_SELECTION" /> for multiple selection.</param>
            <param name="multisel">In case of the multiple selection, lists the items.</param>
            <param name="vsSolution"></param>
            <returns>The list of selected items.</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Projects.IVsMultiItemSelect.GetSelectedItems(Microsoft.VisualStudio.Shell.Interop.IVsSolution)">
            <summary>
            Enumerates the multiselection, extracts its items.
            </summary>
            <param name="vsSolution"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyEx.IsTopLevelHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Code borrowed from VS Source Code.
            Tells whether this is the top-level hierarchy.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyEx.IsSolutionHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Gets whether this hierarchy maps to the Solution (the very root hierarchy).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyEx.IsAzureDataExplorerConnectionHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Gets whether this hierarchy is Azure Data Explorer Connection hierarchy
            See RSRP-465805 ReSharper tries to connect to all databases
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyEx.TryGetParentHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Return parent hierarchy of current if it exists or a solution hierarchy.
            Don't forget to check <see cref="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyEx.IsSolutionHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)"/>
            </summary>
            <param name="hierarchy">Hierarchy to find parent</param>
            <returns>Parent hierarchy or null</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyEx.TryGetSolutionHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Return solution hierarchy.
            </summary>
            <param name="hierarchy">Hierarchy to find solution</param>
            <returns>Solution hierarchy or null</returns>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem">
            <summary>
            Represents a pair of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"/> and <see cref="T:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID"/> that together uniquely identify an item in the hierarchy.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID)">
            <summary>
            Represents a hierarchy item.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.Hierarchy">
            <summary>
            The hierarchy of the item.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.HierarchyObject">
            <summary>
            TODO (DK) Dev17 comment this hack
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.IsNullItem">
            <summary>
            Gets whether this hierarchy item is <c>Null</c> (<see cref="P:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.ItemId"/> = <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.VSITEMID_NIL"/>).
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.IsRootItem">
            <summary>
            Gets whether this hierarchy item is the hierarchy root (<see cref="P:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.ItemId"/> = <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.VSITEMID_ROOT"/>).
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.IsSelectionItem">
            <summary>
            Gets whether this hierarchy item is the selection item (<see cref="P:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.ItemId"/> = <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.VSITEMID_SELECTION"/>).
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.ItemId">
            <summary>
            The pointer-size identifier of the item within its <see cref="P:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.Hierarchy"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.CreateRoot(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Creates an item that is the root of this <paramref name="hierarchy"/> (<see cref="P:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.ItemId"/> = <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.VSITEMID_ROOT"/>).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.TryCreate(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID)">
            <summary>
            A shortcut for creating a hierarchy if <paramref name="hierarchy"/> is non-<c>Null</c> and returning <c>Null</c> otherwise.
            In short, turns a <c>Null</c> <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"/> into a <c>Null</c> container.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.GetItem(JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID)">
            <summary>
            Gets another item from the same hierarchy.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.Equals(JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItemEx.GetFirstChild(JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem)">
            <summary>
            Gets the first child of the hierarchy. <see cref="P:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.IsNullItem"/> if not available.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItemEx.GetFirstVisibleChild(JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem)">
            <summary>
            Gets the first visible child of the hierarchy. <see cref="P:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.IsNullItem"/> if not available.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItemEx.GetNextSibling(JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem)">
            <summary>
            Gets the next sibling child of the hierarchy. <see cref="P:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.IsNullItem"/> if not available.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItemEx.GetNextVisibleSibling(JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem)">
            <summary>
            Gets the next visible sibling child of the hierarchy. <see cref="P:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem.IsNullItem"/> if not available.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItemEx.IsSolutionHierarchyItem(JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem)">
            <summary>
            Gets whether this hierarchy item represents the Solution node.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.ZoneMarker">
            <summary>
            Previously, the <see cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem" /> used to require the project model zone, but as it's entangled with RDT APIs and text controls and all, we'd now have it only vs-zoned.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelection">
            <seealso cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell" />
            <seealso cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Projects.IVsMonitorSelectionProjectModel" />
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell">
            <summary>
            A part of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection" /> interface which does not know about the Project Model Module Zone.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell.GetSelectedWindowFrame">
            <summary>
              <para>Gets the selected window frame. Might be <c>Null</c> when there's no window frame selected (check for <see cref="P:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame.IsNotNull" />).</para>
              <para>If you want to track this value live, use the <see cref="F:JetBrains.VsIntegration.Interop.Events.Shell.VsSelectionShell.SelectedWindowFrame" /> property.</para>
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell.GetSelectionContainer">
            <summary>
            Tries to get VS selection container from the current selection
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell.GetObjectsFromSelectionContainer(System.UInt32)">
            <summary>
            Try to get objects from the selection container of the current selection.
            </summary>
            <param name="flags">Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_SELECTED or GETOBJS_ALL.</param>
            <returns>An array of objects. Could be empty.</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell.TryGetCurrentElementValue``1(JetBrains.VsIntegration.Interop.Declarations.VsShell.VSSELELEMID)">
            <summary>
            Tries to get the value and then to cast it to the requested type.
            </summary>
            <returns>The value, or <c>Null</c> if there's no value or if it's of a wrong type.</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell.AdviseSelectionEventsInternal(JetBrains.Lifetimes.Lifetime,Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents)">
            <summary>
            Do not use directly. Use <see cref="T:JetBrains.VsIntegration.Interop.Events.Shell.VsSelectionShell" /> or its Project Model aware counterpart instead.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsShell.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsShell)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsShell.ShellPropertyChangesSink">
            <summary>
            Helps with monitoring the shell Zombie status.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame.FromObject(System.Object)">
            <summary>
            TODO (DK) Dev17 comment this hack
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame.Advise(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Advises the window frame events. You must unadvise by disposing of the retval.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame.Show">
            <summary>
              <para>Lazy-creates, brings to front, and focuses the frame.</para>
              <para>In VS impl, most of the creation code is embedded into the show-and-focus method, so there's essentially no way to show something without forcing it getting focused.</para>
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame.BringToFront">
            <summary>
              <para>For a frame which has already been created and shown at least once, brings it and all of its parents into view, switching tabs and ensuring Z-order, without setting focus.</para>
              <para>If a frame has not been shown before, IT WON'T SHOW (that's why I renamed this method to a less promising name than <c>ShowNoActivate</c>; <c>BringToFront</c> is an internal flag name in window frame impl in VS).</para>
              <para>So for most practical needs this method gotta be combined with <see cref="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame.Show" /> under a check if the frame has gotten visible or not.</para>
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame.TryGetWindowObjectKind">
            <summary>
            <para>Gives out a GUID for most of the window frames. Mimics the <see cref="!:Window.ObjectKind"/> property behavior, namely “the type of the Window object, which is a GUID string representing the tool contained in the window”.</para>
            <para>Technically, this is <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_GuidPersistenceSlot"/> for a tool window, and <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_guidEditorType"/> for a document frame.</para>
            <para>Previously, this was obtained as EnvDTE.Window::ObjectKind</para>
            <para>However, in VS9- that would sometimes yield a HResult for out-of-memory, which would then be turned into an exception. And in VS10+ the Window object enforces thread-marshalling calls even if we're on the main thread already, which has a performance penalty.</para>
            <para>It has been found that EnvDTE.Window::ObjectKind actually yields to the window frame properties, depending on the frame kind, so we'd now be calling the window frame directly.</para>
            <para>Possible improvement: in VS10+, take the managed WindowFrame object and call for PersistenceSlot directly, without COM wrapping thru lambdas (but I don't think that would be a big win).</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame.AdviseInternal(JetBrains.Lifetimes.Lifetime,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify)">
            <summary>
            For use from the event sink.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.VsCommandIdMapping">
            <summary>
            Maps VS GUID:INT command IDs to Action IDs.
            This list is calculated by the CTO emitter and brought to runtime via host components to match commands with actions by looking up in this table.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.VsInteropController">
            <summary>
            The component is used to make sure all interop to Visual Studio is done at proper times
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Interop.VsInteropController.IsTalkingToVsAllowed">
            <summary>
            Whether it is safe (for performance or other reasons) talking to VS
            Might currently fire unguarded.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Interop.VsInteropController.UnguardedCallbacks">
            <summary>
            Allows to join callbacks from Visual Studio
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.VsInteropController.SuppressTalkingToVs(JetBrains.Lifetimes.Lifetime,System.String)">
            <summary>
            The only way to suppress talking to VS for a period of time
            </summary>
            <param name="lifetime">Lifetime of suppressing</param>
            <param name="reason">The reason why</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.VsInteropController.ForceEnableTalkingToVs(JetBrains.Lifetimes.Lifetime,System.String)">
            <summary>
            Overrides all suppressor for specified amount of time. 
            </summary>
            <param name="lifetime">Lifetime of allowing despite all suppressors</param>
            <param name="reason">The reason why</param>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.VsServiceProviderResolver">
            <summary>
            Exposes "components" in the VS Service Provider to our component model.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.VsServiceProviderResolver.RegisterCommonVsServices(JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceMap)">
            <summary>
            Registers VS services allowed in all VS versions.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceMap.myFRegisterService">
            <summary>
            Impl for <see cref="M:JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceMap.QueryService``1"/> (cached delegate).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceMap.QueryService``1">
            <summary>
            Initiates adding a record for allowed service queries. Pass the class whose GUID gives out the SSID to query for.
            Fluent-call <see cref="M:JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceMap.QueryServiceProxy.As``1"/> to register interface types for which this service should be queried. 
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceMap.RegisterService(System.Type,System.Type)">
            <summary>
            Impl for <see cref="M:JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceMap.QueryService``1" />.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceMap.QueryServiceProxy">
            <summary>
            Impl for <see cref="M:JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceMap.QueryService``1"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceMap.QueryServiceProxy.As``1">
            <summary>
            Adds an interface for which (when imported into the component) the service should be queried.
            Fluent.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceMap.QueryServiceProxy.LazyOnly">
            <summary>
            Restricts importing this interface as Lazy{Interface} kind only, to defer creating Visual Studio entities serving these components.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceMap.QueryServiceProxy.SetFlags(JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceFlags)">
            <summary>
            Applies newcoming flags to descriptors already created.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceMap.QueryServiceProxy.Optional">
            <summary>
            Marks the interface which might be missing on the end user machine, and should be requested as wrapped in the <see cref="T:JetBrains.Application.Components.Optional`1"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceMap.Resolve(System.Type,JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceFlags)">
            <summary>
            Tries resolving this as a lazy/optional/etc and interface itself.
            </summary>
            <param name="typeInterface">The type (unwrapping as we try more).</param>
            <param name="outside">What we have already unwrapped (un terms of lazy/optional etc).</param>
            <returns>Descriptor, if found. Otherwise, Null.</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceMap.Ban``1(System.String)">
            <summary>
            Bans the interface from being imported. Throws an exception upon resolve.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceMap.Wrapper``1(System.Func{``0},JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceFlags)">
            <summary>
            Registers a custom VS interface wrapper. In this case the <typeparamref name="TInterface" /> is not actually a VS interface, but is logically related.
            Adds an assertion for the primary thread to your function.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceMap.DeferredComponentDescriptorWithLazyFlag.Flags">
            <summary>
            Flags describing access to this descriptor.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceFlags.IsLazyOnly">
            <summary>
            When <c>True</c>, this descriptor can only be returned out of the container when wrapped into <see cref="!:LazyValueResolver.LazyDescriptor&lt;T&gt;" />.
            This helps to ensure VS services are not instantiated forcibly at startup.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.VsServiceProviderResolver.VsServiceFlags.IsOptional">
            <summary>
            When <c>True</c>, this descriptor wraps an interface that might be missing in actual environments. All access to this component must be wrapped with the <see cref="T:JetBrains.Application.Components.Optional`1" /> class.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.DataContexts.ProjectModelSynchronizerEx.GetProjectModelElementSearchDescriptorsAndVsHierarchyItem(JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer,JetBrains.VsIntegration.Interop.Shim.VsShell.Projects.IVsMonitorSelectionProjectModel,Microsoft.VisualStudio.Shell.Interop.IVsSolution)">
            <remarks>Do not use in production code, only for dumps or intests</remarks>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.DataContexts.ProjectModelSynchronizerEx.WaitForExtProject(JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer,JetBrains.Lifetimes.Lifetime,JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.VsIntegration.ProjectDocuments.IVsHierarchies,JetBrains.Application.Threading.IShellLocks,JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.BackendProjectLifetimesCollection,System.Int32)">
            <summary>
            Find corresponding <see cref="T:JetBrains.VsIntegration.Shell.EnvDte.IEnvDteProject"/> from based search descriptor.
            If ProjectModelSynchonizer does not contains appropriate hierarchy wait at most <see cref="!:timeoutMs"/> until hierarcy appears.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.IVsHierarchies">
            <summary>
            Known <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"/> etc
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.IVsHierarchies.GetSyncMode(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Specifies where the hierarchy is synced
            </summary>
            <param name="vsHierarchy">Hierarchy in question</param>
            <returns>Sync mode</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.IVsHierarchies.GetSyncMode(JetBrains.Util.FileSystemPath)">
            <summary>
            Specifies where the project is synced
            </summary>
            <param name="projectFileLocationOrProjectLocationForWebsites">Project file location</param>
            <returns>Sync mode</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.IVsHierarchies.IsThereAnythingSyncedOnBackend">
            <summary>
            Evaluates whether backend syn is active
            </summary>
            <returns>True when any sync is performed on backend</returns>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectDocuments.IVsHierarchies.BoundHierarchies">
            <summary>
            IVsHierarchies bound to projects
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.IVsHierarchies.TryGetProjectInfoByHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Returns project info bound to IVsHierarchy
            </summary>
            <param name="vsHierarchy">Hierarchy in question</param>
            <returns>Bound project info or null</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.IVsHierarchies.TryGetProjectInfoByProjectSearchDescriptor(JetBrains.ProjectModel.Search.IProjectSearchDescriptor)">
            <summary>
            Returns bound project info by project search descriptor
            </summary>
            <param name="projectSearchDescriptor">Search descriptor in question</param>
            <returns>Bound project info or null</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.IVsHierarchies.TryGetProjectInfoByProject(JetBrains.VsIntegration.Shell.EnvDte.IEnvDteProject)">
            <summary>
            Returns bound project info by Visual Studio project <see cref="!:Project"/>
            </summary>
            <param name="envDteProject">Visual Studio project in question</param>
            <returns>Bound project info or null</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.MapVsCookieToRunningDocumentId.TryMapDocCookieToDocumentId(JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE)">
            <summary>
            Uses the mapping we maintain to check if we know a document id related to this doccookie.
            Does not call into VS.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.MapVsCookieToRunningDocumentId.TryMapDocumentIdToDocCookie(JetBrains.DocumentModel.RunningDocumentId)">
            <summary>
            Looks up the cache. Does not call into VS.
            If missed, returns <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE.Invalid"/>.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.BackendProjectLifetimesCollection.ProjectGuids">
            <summary>
            Provide only guids to not store outdated descriptors.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.BackendProjectLifetimesCollection.ProjectAdded">
            <summary>
            Provide only new events with actual descriptors.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.HierarchiesCollection.OrderedLoadedHierarchies">
            <summary>
            Loaded hierarchies topo-sorted in top-down order
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.HierarchiesCollection.UnloadedHierarchies">
            <summary>
            Unloaded hierarchies
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer">
            <summary>
            Updates ReSharper project model according to changes to the VS's one
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer.RefreshProjectPropertiesAsync(JetBrains.ProjectModel.Search.IProjectSearchDescriptor,System.Boolean,System.Boolean)">
            <summary>
            Refreshes project build settings
            </summary>
            <returns> True, if succeeded, False if exception happened. I.e. this is possible if we query settings of C+ project 
            while solution is being open
            </returns>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer.TryGetProjectModelSearchDescriptorByHierarchyItemSkipReferences(JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem,JetBrains.Util.OnError)">
            <summary>
            Try to get search descriptor for any project model element, don't look in references.
            </summary>
            <param name="hitem">VsHierarchyItem to get search descriptor</param>
            <param name="onerror">Error handler</param>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer.TryGetProjectModelSearchDescriptorByHierarchyItemAndSelectionObject(JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem,System.Object,JetBrains.Util.OnError)">
            <summary>
            Try to get search descriptor for any project model element, include references.
            </summary>
            <param name="hitem">VsHierarchyItem to get search descriptor</param>
            <param name="obj">Object from <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer"/></param>
            <param name="onerror">Error handler</param>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer.TryGetHierarchyItemByProjectItem(JetBrains.ProjectModel.Search.IProjectModelElementSearchDescriptor,System.Boolean)">
            <summary>
            Gets the VS Hierarchy item for a project item, or a project itself, or the solution. Nulls on errors.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer.GetHierarchyItemByProjectItem(JetBrains.ProjectModel.Search.IProjectModelElementSearchDescriptor,System.Boolean)">
            <summary>
            Gets the VS Hierarchy item for a project item, or a project itself, or the solution. Throws on errors.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer.TryGetHierarchyByProjectSearchDescriptor(JetBrains.ProjectModel.Search.IProjectSearchDescriptor)">
            <summary>
            Gets the VS Hierarchy item for a project item, or a project itself, or the solution. Nulls on errors.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer.GetHierarchyItemByProjectItemCore(JetBrains.ProjectModel.Search.IProjectModelElementSearchDescriptor,System.Boolean,JetBrains.Util.OnError)">
            <summary>
            Looks up a VS Hierarchy item for a project item (or a project, or a solution).
            Works as either NotNull or CanBeNull.
            </summary>
            <param name="elem">Element to look up.</param>
            <param name="forceBackgroundLoad"></param>
            <param name="onerror">What to do with errors, throw to be NotNull, ignore to be CanBeNull.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer.GetHierarchyItemByProjectItemCore(JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.Util.VirtualFileSystemPath,System.Boolean,System.Boolean,JetBrains.Util.OnError)">
            <summary>
            Looks up a VS Hierarchy item for a project item (or a project) by the containing project and the location of the item, which will be parsed by the project's VS Hierarchy.
            Works as either NotNull or CanBeNull.
            </summary>
            <param name="project">Containing project. Provides the VS Hierarchy.</param>
            <param name="path">Path of the project item. Will be parsed by the project hierarchy. Use <see cref="!:VirtualFileSystemPath.Empty"/> or project's <see cref="P:JetBrains.ProjectModel.IProjectItem.Location"/> to get the hierarchy item of the project itself.</param>
            <param name="isFileExpected"> </param>
            <param name="forceBackgroundLoad">Return hierarchy items for projects that haven't been synchronized yet</param>
            <param name="onError">What to do with errors, throw to be NotNull, ignore to be CanBeNull.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer.Init_SaveProjectOrSolution(JetBrains.Lifetimes.Lifetime,JetBrains.ProjectModel.ISolution)">
            <summary>
            When Visual Studio is saving some document, checks if it's a project or solution, and if our settings for them should be saved, or properties updated from them.
            Moved from <c>VsDocumentManager</c>, seems like a more fit place.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.SaveSolutionAndProjectsRequest">
            <summary>
            Request to save solution and projects so backend sync will work
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.SaveSolutionAndProjectsRequest.Reason">
            <summary>
            Reason for sync
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.SaveSolutionAndProjectsRequest.RemoveRedundantProjectsOnBackendSynced">
            <summary>
            Whether to remove projects that do not exist on backend after the sync (somewhat similar to remove redundant projects on solution open)
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.SaveSolutionAndProjectsRequest.AffectedHierarchies">
            <summary>
            Hierarchies that has been changed which triggered the save request.
            If there was a change in shared hierarchy we will force save it (see RefactorSharedProjectTest.RenameAndSyncFileNameTest)
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.VSProjectModelDescriptionBuilder.CreateProjectDescriptorWithMissingItems(JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem)">
            <summary>
            It may happen that we receive a notification about move of a project item,
            but the parent (and higher ancestors) of the item are not present in our model yet.
            In this case we create the missing ancestors, and return the lowest ancestor that 
            has been created (if the parent is present in our model, we return the parent).
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.PropertyModifiers.Interop.VsProjectPropertiesAccessor">
            <summary>
            Provides access to VS interfaces for getting and setting project/project configuration properties
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.References.Impl.Modifiers.MsBuildDataProjectReferenceModifier.TryFindReferenceToReplace(JetBrains.VsIntegration.ProjectDocuments.References.ReferencesResult,JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Finds reference matching path from msbuild
            </summary>
            <param name="references"></param>
            <param name="msbuildAssemblyReferencePath"></param>
            <returns> 
              reference index if it has to be replaced
              int.MaxValue if no reference found
              int.MinValue if reference is found and nothing to do  
            </returns>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferenceAccessorFactory">
            <summary>
            Factory of accessors to Visual Studio references API
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferenceAccessorFactory.TryCreate(JetBrains.Lifetimes.Lifetime,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Creates <see cref="T:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferenceAccessor"/> for specified hierarchy with specified lifetime
            </summary>
            <param name="hierarchyLifetime">Lifetime of the accessor if created</param>
            <param name="vsHierarchy">VsHierarchy to access its references</param>
            <returns>Created accessor, null otherwise </returns>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferenceAccessor">
            <summary>
            Accessor to Visual Studio references API
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferenceAccessor.ReferencesChanged">
            <summary>
            Fired when some of Visual Studio references are changed
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferenceAccessor.GetReferences">
            <summary>
            Fetches references from Visual Studio API for given hierarchy
            </summary>
            <returns>References with corresponding info</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferenceAccessor.TryGetReferenceForHierarchyItem(JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem)">
            <summary>
            Fetches reference descriptor corresponding to current hierarchy item or null
            </summary>
            <returns>Reference corresponding to hierarchy item or null</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferenceAccessor.AddAssemblyReference(JetBrains.ProjectModel.Search.IProjectToAssemblyReferenceSearchDescriptor,JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Adds assembly references to corresponding hierarchy
            </summary>
            <param name="addedReference">Optional project model reference corresponding to the reference to add</param>
            <param name="assemblyFilePath">Path to referenced assembly file</param>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferenceAccessor.AddProjectReference(JetBrains.ProjectModel.Search.IProjectToProjectReferenceSearchDescriptor,JetBrains.VsIntegration.Shell.EnvDte.IEnvDteProject)">
            <summary>
            Adds project reference to corrsponding hierarchy
            </summary>
            <param name="addedReference">Optional project model reference corresponding to the reference to add</param>
            <param name="projectToReference">Optional Visual Studio project to reference</param>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferenceAccessor.RemoveReference(JetBrains.ProjectModel.Search.IProjectToModuleReferenceSearchDescriptor)">
            <summary>
            Removes existing reference from corresponding hierarchy 
            </summary>
            <param name="reference">Project model reference to be removed</param>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferenceModifier">
            <summary>
            Used to fix the references returned by <see cref="T:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferenceAccessor"/>
            Mark the component with <see cref="T:JetBrains.ProjectModel.SolutionInstanceComponentAttribute"/>
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferenceModifier.Update(JetBrains.ProjectModel.Update.IProjectPropertiesDescriptor,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,JetBrains.VsIntegration.ProjectDocuments.References.ReferencesResult)">
            <summary>
            Updates the references returned by <see cref="T:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferenceAccessor"/>
            Mark the type with <see cref="T:JetBrains.VsIntegration.ProjectDocuments.References.VsProjectReferenceModifierAttribute"/> to ensure its order. 
            </summary>
            <param name="projectDescriptor">Project for which references are collected</param>
            <param name="vsHierarchy">VsHierarchy from which the references are fetched</param>
            <param name="references">Refeences to be updated if necessary</param>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.References.VsProjectReferenceModifierAttribute.#ctor(JetBrains.Application.Parts.Instantiation)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectDocuments.References.VsProjectReferenceModifierAttribute.Priority">
            <summary>
            The bigger priority the later the provider is called
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferencesSynchronizer">
            <summary>
            Synchronizes project references between Visual Studio and project model
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferencesSynchronizer.VsHierarchyHasUnresolvedReferences">
            <summary>
            Fired when references for an hierarchy were updated. Boolean set to true if there were unresolved references in COM API
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferencesSynchronizer.UpdateAllProjectReferencesRequested">
            <summary>
            Fired when update all project references requested. Mostly to preserve old behaviour.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferencesSynchronizer.ReferencesChanged">
            <summary>
            Fired when references for specified hierarchy have changed
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferencesSynchronizer.RequestUpdateProjectReferences(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Requests to update references of given hierarchy or all hierarchies (if null passed) 
            </summary>
            <param name="vsHierarchy">Hierarchy to update references or null to update all</param>
            <returns>Task with number of refernce found</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferencesSynchronizer.ExecuteWithReferencesAccessor(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Action{JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferenceAccessor})">
            <summary>
            Runs specified action with <see cref="T:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferenceAccessor"/> corresponding to given hierarchy
            </summary>
            <param name="vsHierarchy">Hierarchy to fetch reference accessor for</param>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.References.IVsProjectReferencesSynchronizer.TryGetReferenceSearchDescriptorByHierarchyItem(JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem,System.Object)">
            <summary>
            Returns <see cref="T:JetBrains.ProjectModel.Search.IProjectModelElementSearchDescriptor"/> corresponding to given hierarchy item if any.
            </summary>
            <param name="hitem">Hierarchy item that may correspond to a refernce</param>
            <param name="obj">Object from <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer"/></param>
            <returns>Search descriptor corresponding to given hierarchy item or null</returns>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.UnknownProjectDescriptor">
            <summary>
            Used as IProjectDescriptor for unknown for R# projects
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.UnresolvedReferences.UnresolvedReferences">
            <summary>
            Detect unresolved project references to warn user that the red code may be because of Visual Studio failed to resolve some references
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectDocuments.UnresolvedReferences.UnresolvedReferences.UnresolvedReferenceHitems">
            <summary>
            Boolean means the reference is "truly" unresolved. See RSRP-459796 
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.VisualC.VcxProjectEventHandler">
            <summary>
            This class is shared across all VS versions.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.ProjectDocuments.VsDocumentManagerWhidbey.myProjectModelSynchronizer">
            <summary>
            Maps known doc cookies to project files. Multithreaded. Access must be interlocked.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectDocuments.VsDocumentManagerWhidbey.RebindDocumentsRequest.RebindAll">
            <summary>
            Whether all documents need to be rebound
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectDocuments.VsDocumentManagerWhidbey.RebindDocumentsRequest.PathsToRebind">
            <summary>
            Rebind the documents with specified paths
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectDocuments.VsDocumentManagerWhidbey.RebindDocumentsRequest.HierarchiesBound">
            <summary>
            Rebind the documents affected by <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"/> bound/ unbound
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.VsDocumentManagerWhidbey.TryGetTextBufferDataByDocCookie(JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE)">
            <summary>
            Asks DEVENV for an <see cref="!:EnvDTE.Documents.IVsTextBuffer"/> that corresponds to the given <see cref="T:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE"/>, plus its hierarchy.
            Does NOT do any caching/lookup.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.VsDocumentManagerWhidbey.TryGetDocCookieByTextBuffer(JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer)">
            <summary>
            Asks DEVENV for a cookie for the text buffer. Does not use any caching/lookup.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.VsDocumentManagerWhidbey.Init_RdtEvents(JetBrains.Lifetimes.Lifetime,JetBrains.VsIntegration.Interop.Events.DocumentModel.VsRunningDocumentTableEvents)">
            <summary>
            Advise RDT events.
            This is the main event source, from it we learn when to create new text controls (most of them, but not all and things like changes in open documents.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.ProjectDocuments.VsDocumentManagerWhidbey.OnTextBufferDataChanged">
            <summary>
            Fires when text buffer data correspondence to a project file has changed and text control is supposed to be switched to a new one
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.VsDocumentManagerWhidbey.RebindDocumentsToProjectFiles(System.Boolean,System.Collections.Generic.JetHashSet{JetBrains.Util.VirtualFileSystemPath},Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Boolean)">
            <summary>
            Called when smb senses the document context might have changed, re-checks the bound project file.
            Originates from ec7c3445 Sergey Coox &lt;qx@jetbrains.com&gt; on 2014-02-18 at 9:48 PM "+ Implemeted text control/ doc manager sync on shared project context change"
            <param name="doRebindAll">Whether to rebind all the documents</param>
            <param name="affectedPaths">Documents for which paths need to be rebound</param>
            <param name="hierarchy">Hierarchy that was added or removed</param>
            <param name="isAdded">Whether the hierarchy was added</param>
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.VsHierarchyToProjectInfoMap.TryGetProjectInfoByProjectSearchDescriptor(JetBrains.ProjectModel.Search.IProjectSearchDescriptor)">
            <summary>
            Actually doesn't implement all stuff from ProjectModelLocator, we'll drop IProject fom this code whatever
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.VsOpenSolutionsInIde">
            <summary>
            VS specific IDE solution opener.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectDocuments.VSProjectInfo.ProjectSearchDescriptorSnapshot">
            <summary>
            Contains possible outdated data. In most cases you need to use <see cref="M:JetBrains.VsIntegration.ProjectDocuments.VSProjectInfo.GetProjectSearchDescriptor"/>. 
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.VSSolutionManager.StartOpenExistingSolution(JetBrains.Util.FileSystemPath,System.Action)">
            <summary>
            This method is consumed by Integration Tests only
            Starts loading solution and executes specified callback after
            </summary>
            <param name="solutionFilePath">Path to solution file</param>
            <param name="callback">Callback to call on finish</param>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.VSSolutionManager.OpenExistingSolutionAsync(JetBrains.Util.FileSystemPath)">
            <summary>
            This method is consumed by Integration Tests only.
            Opens the solution async.
            </summary>
            <param name="solutionFilePath">Path to solution file</param>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.VSSolutionManager.OpenExistingSolution(JetBrains.Util.FileSystemPath)">
            <summary>
            Create instance of solution using specified solution file.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.Whidbey.VsTextBufferData">
            <summary>
            TextBuffer, its item in Hierarchy, plus doc cookie.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Whidbey.VsTextBufferData.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Whidbey.VsTextBufferData.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Whidbey.VsTextBufferData.Equals(JetBrains.VsIntegration.ProjectDocuments.Whidbey.VsTextBufferData)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.IVSDescriptorBuilder">
            <summary>
            Base interface for all custom builders, that produce <see cref="T:JetBrains.ProjectModel.Update.IProjectDescriptor"/> and its content from Visual Studio
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.IVSProjectFilePropertiesBuilder.FillProjectFilePropertiesDispatch(JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem,System.Object,JetBrains.Util.VirtualFileSystemPath,JetBrains.ProjectModel.Properties.IProjectFileProperties,JetBrains.ProjectModel.Properties.IProjectProperties)">
            <summary>
            Fills project file properties using dispatch (fast) API. If fails, automation will be called.
            </summary>
            <param name="hitem">Hierarchy item which properties is to be filled</param>
            <param name="browseObject">Its browse object (some providers may use it)</param>
            <param name="filePath"></param>
            <param name="projectFileProperties">Properties to be filled</param>
            <param name="projectProperties"></param>
            <returns>Whether filling was successful</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.ProjectProperties.ManagedProjectPropertiesBuilder.GetOutputFilePath(JetBrains.VsIntegration.Shell.EnvDte.IEnvDteConfiguration)">
            <summary>
            When C++ project is being queried while solution is opening, COMException is thrown
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.ProjectProperties.ProjectActiveConfigurationAccessor">
            <summary>
            Project.ConfigurationManager.ActiveConfiguration is way slow comparing to Project.ConfigurationManager.Item(configName, platformName)
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.CannotMakeWritableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectModel.HierarchyEvents.ActiveConfigurationChangedEventArgs.ChangedHierarchies">
            <summary>
            Hierarchies with changed active configuration. Null if all might have changed.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectModel.HierarchyEvents.ActiveConfigurationChangedEventArgs.When">
            <summary>
            When the event has happend. If happend inside batch then there will be another event fired while batch is done
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.HierarchyEvents.IVsSolutionEventsTracker">
            <summary>
            Wraps all the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"/> events
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectModel.HierarchyEvents.IVsSolutionEventsTracker.HierarchyEvents">
            <summary>
            Events happened to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"/>. 
            <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents"/>
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectModel.HierarchyEvents.IVsSolutionEventsTracker.ActiveConfigurationChanged">
            <summary>
            Fired when active configuration of some hierarchies migth have changed.
            <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents"/> etc
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectModel.HierarchyEvents.IVsSolutionEventsTracker.SolutionBuildIsRunning">
            <summary>
            True when solution build is running. Between <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents.UpdateSolution_Begin(System.Int32@)"/> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents.UpdateSolution_Done(System.Int32,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectModel.HierarchyEvents.IVsSolutionEventsTracker.ExecutingBuildAction">
            <summary>
            Build action being executed. <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS"/> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS2"/>
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.MSBuildExtensions.GetBoolValue(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String,System.Boolean,System.String)">
            <summary>
            Returns boolean value of property <see cref="!:propertyName"/> if available or <see cref="!:defaultValue"/>
            </summary>
            <param name="hierarchy">Visual Studio hierarchy to get property value from</param>
            <param name="propertyName">Property name</param>
            <param name="defaultValue">Value to return if property is not specified</param>
            <param name="activeConfigurationName">Necessary to specify for VS 2005 because null is not working</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.VisualC.Adapters.IVCAdaptersJustVsXX">
            <summary>
            This is the central interface which wires up all of the adapters.
            Get it as a solution component.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectModel.VisualC.Adapters.IVCCLCompilerToolJustVsXX.ValuesAreAlreadyEvaluated">
            <summary>
            Whether values fetched are already evaluated
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VisualC.Adapters.IVCConfigurationJustVsXX.GetEvaluatedPropertyValue_SinceVs11(System.String)">
            <summary>
            Would throw before VS11. Might as well have separate interfaces, but it's a bit of a mess for the single method.
            </summary>
            <since>VS 11</since>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VisualC.Adapters.IVCFileMirrorJustVsXX.SetFillFilePropertiesFilter(JetBrains.Lifetimes.Lifetime,System.Func{JetBrains.Util.VirtualFileSystemPath,System.Boolean})">
            <summary>
            Suppresses filling file properties to speed up adding C++ file
            </summary>
            <param name="lifetime">Lifetime of the filter</param>
            <param name="doFillFilePropertiesFunc">Files filter</param>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.VisualC.Adapters.IVCProjectEngineEventsSink">
            <summary>
            The interface used to facade IVCProjectEngineEvents2
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectModel.VisualC.Adapters.IVCProjectJustVsXX.Name">
            <summary>
            Project name
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VisualC.Adapters.IVCProjectJustVsXX.TryGetActiveConfiguration">
            <summary>
            Returns active configuration wrapper if API exists.
            </summary>
            <returns>Active configuration wrapper</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VisualC.Adapters.IVCProjectJustVsXX.IsCapabilityPresent(System.String)">
            <summary>
            Checks is capability present in the project. Null if no API available.
            </summary>
            <param name="capabilityName">Capability to check</param>
            <returns>Null if no API available, capability presence otherwise</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VisualC.Adapters.IVCProjectJustVsXX.WithCachedPropertyValues(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Cache property values for a certain amount of time. For perf optimization only
            </summary>
            <param name="lifetime">Lifetime for caching values</param>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.VisualC.Adapters.VCeFileTypeJustVsXX">
            <summary>
            Used by the <see cref="P:Microsoft.VisualStudio.VCProjectEngine.VCFile.FileType" /> property.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.VisualC.Adapters.VCeRefTypeJustVsXX">
            <summary>
            Returned by <see cref="P:JetBrains.VsIntegration.ProjectModel.VisualC.Adapters.IVCReferenceJustVsXX.ReferenceType"/> which may be missing in some Visual Studio
            According to https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.vcprojectengine.vcreftype?view=visualstudiosdk-2017 valid for VS 2015, 2017
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.VisualC.Adapters.VCTypeOfDebuggerJustVsXX">
            <summary>
            Corresponds to <code>Microsoft.VisualStudio.VCProjectEngine.TypeOfDebugger</code> 
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.VisualC.VCFileMirror">
            <summary>
            This class is shared across all VS versions.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.VisualC.VCProjectEngineMirror">
            <summary>
            This class is shared across all VS versions.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectModel.VisualC.VcxConfiguration.DoFillFileProperties">
            <summary>
            Whether to build C++ file properties. Switched off by default for performance reasons (See RSRP-469604)      
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.VisualC.VcxProjectContentBuilderMirror">
            <summary>
            This class is shared across all VS versions.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.VsEnsureWritableVbWhileDebugging">
            <summary>
            Solve RSRP-272348 issue.
            </summary>
            <remarks>(DK) In VB-projects IVsTextStream.ReplaceStreamEx method returns S_OK but does not change the stream content in the following cases:
            - while debugging when Enable Edit and Continue option is turned off (x86 and x64);
            - while debugging x64 application, even when Enable Edit and Continue option is turned on;
            - while debugging an attached process (any platform, any Enable Edit and Continue option state).
            We should detect such situations beforehand and don't allow to make changes to VB-file(s), otherwse an exception will be thrown.
            </remarks>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.VsExtenderInstaller">
            <summary>
            Registers VS Extenders.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsHierarchyItemDataCacheEx.GetOrCreateHitemProperty``1(JetBrains.VsIntegration.ProjectModel.VsHierarchyItemDataCache,JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.Hierarchy.VsHierarchyItem,JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID)">
            <summary>
            Returns cached property <see cref="!:propid"/> value for specified <see cref="!:hitem"/> or evaluates and caches the value before returning.
            </summary>
            <typeparam name="T">Property type</typeparam>
            <param name="cache">Cache itself</param>
            <param name="hitem">Hierarchy item to query for property</param>
            <param name="propid">Property to query value</param>
            <returns>Cached value of a specified property of hierarchy item</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsHierarchyItemDataCacheEx.TryCreateAndCacheProjectDescriptor(JetBrains.VsIntegration.ProjectModel.VsHierarchyItemDataCache,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,JetBrains.ProjectModel.Update.UpdateFlags,JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.VSProjectModelDescriptionBuilder,JetBrains.VsIntegration.Shell.ActionManagement.VsLocalizer)">
            <summary>
            Build descriptor by VSProjectModelDescriptionBuilder, and cache it without items
            </summary>
            <returns>Pair or descriptor and boolean sign of correct project properties</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsHierarchyItemDataCacheEx.GetProjectPropertiesDescriptor(JetBrains.VsIntegration.ProjectModel.VsHierarchyItemDataCache,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.VSProjectModelDescriptionBuilder,JetBrains.VsIntegration.Shell.ActionManagement.VsLocalizer)">
            <summary>
            Get cached descriptor, or build it by VSProjectModelDescriptionBuilder, or create UnknownProjectDescriptor instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsHierarchyItemDataCacheEx.TryGetProjectPropertiesDescriptor(JetBrains.VsIntegration.ProjectModel.VsHierarchyItemDataCache,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Get cached descriptor, or return null
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.VsPopupWindowContextProjectModel">
            <summary>
            The project-model-aware part of <see cref="T:JetBrains.VsIntegration.Shell.WindowManagement.VsPopupWindowContextInterop" />.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.VsRegisterObjectInstaller">
            <summary>
            Registers objects with Visual Studio.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.VsSolutionWrapper">
            <summary>
            Wraps VS specific solution state
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.TextControl.ErrorStripe.VsErrorStripeAvailableLayoutsFront">
            <summary>
            Writes available error stripe layouts, based on the VS version, to the transport model, for the back to publish as <see cref="T:JetBrains.TextControl.ErrorStripe.IErrorStripeAvailableLayouts" /> inheritor.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.InterLineBlocks.InterLineBlock.Editor">
            <summary>
            Id of the editor where this block belongs
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.InterLineBlocks.InterLineBlock.Content">
            <summary>
            View or view model of content placed inside this inter line block
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.InterLineBlocks.InterLineBlock.Range">
            <summary>
            Range of text which is replaced by or offset in the text where it is inserted
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.InterLineBlocks.InterLineBlock.Extent">
            <summary>
            Represents the desired horizontal width for this block.
            If the width exceeds the text view's code content,
            the scroll area will be expanded accordingly.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.TextControl.IQuickInfoContent">
            <summary>
            A marker interface for R#'s quick info items.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.TextControl.Markup.VsHighlightingAttributeRegistry">
             Attribute registry which uses <see cref="T:JetBrains.Application.Environment.FullPartCatalogSet"/> insted of filtered by zones <see cref="T:JetBrains.Application.Environment.ShellPartCatalogSet"/>
            
             We don't have language-specific zones on VS side (in which highlighters are defined), but still need to know about all highlighters to present them.
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsEditorCommands.TryGetTypingCommandCharArg(System.IntPtr)">
            <summary>
            For <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSStd2KCmdID.ECMD_TYPECHAR" />, gets the typed char from its input parameter, or NULL if failed.
            </summary>
            <param name="pvaIn">IN-parameter of the command in the OLE Command Target execution.</param>
            <returns>Char, or NULL.</returns>
        </member>
        <member name="T:JetBrains.VsIntegration.TextControl.VsEditorCommands.Mappings">
            <summary>
            Stores the mappings, two-way.
            Note that some VS Commands might be mapped to a single Jet Action, but the mapping is not unique, more than one command might point to the same action.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsEditorCommands.Mappings.#ctor(System.Collections.Generic.Dictionary{JetBrains.VsIntegration.Interop.VsCommandIdMapping.GuidInt,System.String},System.Collections.Generic.List{System.ValueTuple{System.String,JetBrains.VsIntegration.Interop.VsCommandIdMapping.GuidInt}})">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.VsIntegration.TextControl.VsTextControlSchemeManager">
            TODO: OOP: protocolize, currently base TextControlSchemeManager implementation on the backend
        </member>
        <member name="P:JetBrains.VsIntegration.UI.Internal.ShortcutBrowser.VsCommandInfo.IsDualChord">
            <summary>
            Means that there are two chords that differ in the second modifier only. One has modifier and the other does not (e.g. Ctrl+E, Ctrl-W and Ctrl-E, W).
            Such chords are merged into one dual chord.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.AnonymousOleCommandTarget">
            <summary>
            Anonymous implementation for OLE command target, optionally taking a guard.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.AnonymousOleCommandTarget.ExecHandler">
            <summary>
            Executes the command just like in <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)" />.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.AnonymousOleCommandTarget.QueryStatusHandler">
            <summary>
            Splits <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)" /> into one call per action.
            </summary>
            <param name="commandid">The command.</param>
            <param name="sOutCmdText">The box is non-Null if you're allowed to modify the command text. Set box contents (initially Null) to supply text.</param>
            <returns>OLE command status. N.B. <see cref="F:JetBrains.Interop.WinApi.Declarations.Constants.OLECMDF.OLECMDF_SUPPORTED" />, or your value will be ignored.</returns>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.VsApplicationActiveStateWatchdog">
             <summary>
             A hack to repair IsApplicationActiveState, when foreground window was changed during modal progress dialogs in
             Visual Studio like reload project or open solution. During these operation Visual Studio uses some unknown magic
             to trick consumers, that the main window has the activation even when it isn't true. And messages like
             WM_ACTIVATE, WM_APPACTIVATE, WM_KILLFOCUS, WM_SETFOCUS aren't delivered to our native hooks during these
             operations, which leads to fake application active state.
            
             To workaround this issue this periodic check verifies that current foreground window corresponds to our awareness
             of Visual Studio's activation state.
             </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.UI.VsApplicationModalState.OnBeforeAccessingIsInModalState">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.VsIntegration.UI.VsFontsManager.VsFontsMightHaveChanged">
            <summary>
            A workaround not to inject IVsToolsOptionsMonitorInterop to VsFontsManager which lead to a circular dependency.
            </summary>
            <remarks>
            Circular dependency for component JetBrains.Platform.RdFramework.Serialization.Icons.IconIdMarshallers on type JetBrains.Platform.RdFramework.RdVerification.IRdConfigurator
            Data.Cycle.#0 = JetBrains.Platform.RdFramework.RdVerification.RdShellRegistrar depends on JetBrains.Platform.RdFramework.RdVerification.IRdConfigurator
            Data.Cycle.#1 = JetBrains.Platform.RdFramework.RdVerification.RdShell depends on JetBrains.Platform.RdFramework.RdVerification.RdShellRegistrar
            Data.Cycle.#2 = JetBrains.VsIntegration.Shell.VsToolsOptionsMonitorInterop depends on JetBrains.Platform.RdFramework.RdVerification.RdShell
            Data.Cycle.#3 = JetBrains.VsIntegration.UI.VsFontsManager depends on JetBrains.Platform.VisualStudio.Protocol.Frontend.Shell.IVsToolsOptionsMonitorInterop
            Data.Cycle.#4 = JetBrains.Application.UI.Components.Theming.ThemingAggregator depends on JetBrains.Application.UI.Components.Fonts.FontsManager
            Data.Cycle.#5 = JetBrains.Platform.RdFramework.Serialization.Icons.IconIdMarshallers wants JetBrains.Application.Icons.IThemedIconManager
            Data.Request = JetBrains.Platform.RdFramework.RdVerification.IRdConfigurator
            Data.RootDescriptor = JetBrains.Platform.RdFramework.Serialization.Icons.IconIdMarshallers
            Data.LastDescriptor = JetBrains.Platform.RdFramework.RdVerification.RdShellRegistrar
            </remarks>
        </member>
        <member name="F:JetBrains.VsIntegration.UI.VsKnownColorTheme.None">
            <summary>
            The theme is not initialized yet or not defined. For VS10/11/12 it probably means that the theme is Blue.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.VsOnIdle">
            <summary>
            Sinks the OnIdle event from Visual Studio
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.VsShowDialogGently">
            <summary>
            Helps to show dialogs when it's convenient to VS users: main VS window is focused and no other windows are opened.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.UI.VsShowDialogGently.CanShowDialog">
            <summary>
            When true, it is safe to show dialogs and popups to the VS user.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.VsStatusBarTextCommon">
            <summary>
            Manipulates status bar text in Visual Studios, which is currently done in a common way.
            Status bar subclassing is done in vs-version-specific way instead.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.VsThemedIconSettingsLoader">
            <summary>
            Select default icon theme based on VS version.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.WindowManagement.HackFixWindowFrameGenericPaneHwndDestroy">
            <summary>
            A hack-fix for a condition when the tool window pane content HWND gets destroyed without closing the tool window, and VS is unable to repair it.
            Detect the condition and hack tool window properties to cause a new content be created for the HWND.
            NOTE that it's not aiming at repairing the window state 100% correctly; it's pretty workable for a long period of time, but not guaranteed from memory leaks etc.
            For reference, see: RSRP-484259 "An error occured while initializing frame window's content" error while using VS with ReSharper
            Probable cause: intense memory usage in presence of R# causes some routine windowing operation to fail (probably, when changing resolution/theming when reconnecting RDP), which takes the tool window pane into an unexpected state.
            </summary>
            <remarks>
            Detect:
            IVsWindowFrame as Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame -&gt; DocumentObject as Microsoft.VisualStudio.Platform.WindowManagement.DocumentObject -&gt; ClientHost as Microsoft.VisualStudio.Platform.WindowManagement.GenericPaneClientHwndHost -&gt; $GPHost
            $GPHost.ChildWindow as System.Runtime.InteropServices.HandleRef -&gt; Handle not null but an invalid HWND =&gt; should respawn
            Check that $GPHost.documentObject is Microsoft.VisualStudio.Platform.WindowManagement.WindowPaneDocumentObject -&gt; $DO
            Heal:
            $GPHost.hwndWrapper = null 	// Kill wrapper nested in the $GPHost wrapper, that's what gets killed (with children incl us)
            $GPHost.DestroyWindow()	// Required for next call
            $GPHost.BuildOrReparentWindow()	// Drops the Error banner and acquires child wrapper, but it's empty
            $DO.Initialized = false	// Required for next call
            $DO.Init(false)	// Recreates our content, plants into the child wrapper established above
            </remarks>
        </member>
        <member name="M:JetBrains.VsIntegration.UI.WindowManagement.HackFixWindowFrameGenericPaneHwndDestroy.TryCheckOrHealWindowFrame(JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame,JetBrains.VsIntegration.UI.WindowManagement.HackFixWindowFrameGenericPaneHwndDestroy.FrameOperation,JetBrains.Util.ILogger)">
            <summary>Checks if tool window is broken in the known way. Can attempt respawning it.</summary>
            <param name="vsWindowFrame" />
            <param name="operation">What we do to the window.</param>
            <param name="logger" />
            <returns>Whether it's broken, or not, or <c>NULL</c> if this is not a window of the kind we understand for checking its brokeness. Whether we did healing.</returns>
        </member>
        <member name="F:JetBrains.VsIntegration.UI.WindowManagement.HackFixWindowFrameGenericPaneHwndDestroy.FrameOperation.CheckOnly">
            <summary>
            Just check.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.UI.WindowManagement.HackFixWindowFrameGenericPaneHwndDestroy.FrameOperation.CheckAndRepair">
            <summary>
            Repair if check indicates it's broken.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.UI.WindowManagement.HackFixWindowFrameGenericPaneHwndDestroy.FrameOperation.ForceRepair">
            <summary>
            Always do the repair cycle.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.UI.WindowManagement.HackFixWindowFrameGenericPaneHwndDestroy.FrameOperation.ForceBreak">
            <summary>
            Always break the widow.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.UI.WindowManagement.HackFixWindowFrameGenericPaneHwndDestroy.FrameRecord.LastManualOperationLogs">
            <summary>
            Only from manual operations, autorefreshes to not flush this.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.UI.WindowManagement.HackFixWindowFrameGenericPaneHwndDestroy.FrameRecord.ToString">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.VsIntegration.UI.WindowManagement.HackFixWindowFrameGenericPaneHwndDestroy.WindowFrameGenericPaneHwndDestroyedException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.VsIntegration.UI.WindowManagement.HackFixWindowFrameGenericPaneHwndDestroy.WindowFrameGenericPaneHwndDestroyedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.VsIntegration.UI.WindowManagement.Install.VsPackageEmitsToolWindowIcons">
            <summary>
            Tool window: collects icons of tool windows, schedules for package resources, emits mapping class for using in code.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.UI.WindowManagement.Install.VsPackageEmitsToolWindowIcons.EmitResourceMapping(System.Collections.Generic.List{System.Tuple{System.String,JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageBitmapResource}})">
            <summary>
            Emit a class implementing <c>IVsToolWindowIconResourceIds</c>.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.WindowManagement.Install.VsToolWindowInstaller">
            <summary>
            Registers VS tool windows.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.WindowManagement.VsToolWindowIconResourceIds">
            <summary>
              <para>Syncs autogenerated tool window data with statically-defined tool window data.</para>
              <para>This interface implementation must be available as a component on the environment level. It's emitted as a host component into the VS resources at local-install time.</para>
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.UI.WindowManagement.VsToolWindowIconResourceIds.TryGetIconResourceId(System.String)">
            <summary>
            Gets the ID of the package bitmap resource which contains an icon for the tool window of the current product identified by the given product-neutral tool window ID.
            </summary>
            <param name="sProductNeutralToolWindowId"><see cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.ProductNeutralId" /></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.WindowManagement.VsToolWindowFrame.SelectionContainer">
            <summary>
            A simple implementation of ISelectionContainer.
            </summary>
            <remarks>To avoid using Microsoft.VisualStudio.Shell.SelectionContainer from the assembly Microsoft.VisualStudio.Shell.</remarks>
        </member>
        <member name="M:JetBrains.VsIntegration.UI.WindowManagement.VsToolWindowPaneRootControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Paint themed tool window background. Only visible when there is no hosted control, of course.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.WindowManagement.VsWindowFrameManager">
            <summary>
            Helps with making a <see cref="T:JetBrains.Application.UI.WindowManagement.WindowFrame" /> for VS-based text controls when you have an <see cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame" /> to begin with. Note that a VS-based text control is not required to have an <see cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame" /> under it.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.UI.WindowManagement.VsWindowFrameManager.#ctor(JetBrains.Application.Threading.IShellLocks,JetBrains.Application.Components.ILazy{Microsoft.VisualStudio.Shell.Interop.IVsUIShell},JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.UI.WindowManagement.VsWindowFrameManager.VsWindowFrameKey">
            <summary>
            Specifies the <see cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame">VS window frame</see> on a <see cref="T:JetBrains.Application.UI.WindowManagement.WindowFrame" /> that has been created from a VS frame.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.UI.WindowManagement.VsWindowFrameManager.TryGetSelfOrParentVsWindowFrame(JetBrains.Application.UI.WindowManagement.WindowFrame)">
            <summary>
            If the frame is associated with a VS window frame (with <see cref="F:JetBrains.VsIntegration.UI.WindowManagement.VsWindowFrameManager.VsWindowFrameKey" /> bag entry), returns such.
            Otherwise attempts to walk up the parents chain and repeat.
            NOTE: Don't use if you need to get VS info for the SPECIFIC text control! You might be getting the frame (and all other info) for the parent text control, e.g. in case of an Embedded Peek Text View).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.UI.WindowManagement.VsWindowFrameManager.CreateFromVsWindowFrame(JetBrains.Lifetimes.Lifetime,JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame)">
            <summary>
            Creates a <see cref="T:JetBrains.Application.UI.WindowManagement.WindowFrame">Window Frame</see> based on the Visual Studio <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />.
            For text controls, you may have to add <c>VsAttachTextControlsToTextViews::AttachWindowFrameToTextViewRootParent</c>.
            Warning: the Frame does not know when it's closed (IVsWindowFrameNotify2::OnClose fires before the user can cancel closing), so it's up to you to dispose of the frame (if it has valueable resources attached) when whoever owns the frame closes.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.UI.WindowManagement.WinFormsToolWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsDpiAware#Mode">
            <summary>
            Required by VS16 in PMv2 DPI mode.
            Problem: without this flag, we're created in <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSDPIMODE.VSDM_System" />, and all of the controls on our creation stack also go as System.
            Then thread is switched to PMv2 for the most of the time.
            So when we create and add a control later, it becomes PMv2 (derived from thread), and would silently fail to become a child of our UI (this is only a problem with System-PMv2 parenting).
            Ensure we're ALWAYS operating under PMv2.
            NOTE: this only applies to VS16+, but as we have it as an embed-interop-type, there's no problem in implementing on the base class.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.UI.WindowManagement.WinFormsToolWindowPane.GetBackgroundColor">
            <summary>
            Themed tool window background color.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Util.EditorFactory.VsEditorFactoryHelpers.GetEmittedFactoryClassLocalName(System.Type)">
            <summary>
            Local name of the class emitted into the VS Package Assembly.
            It will be in the <see cref="P:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters.PackageInfo.PackageClass_Namespace"/> namespace.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Util.EditorFactory.VsEditorFactoryHelpers.GetFactoryGuid(System.Type)">
            <summary>
            Used to take part in generating per-product editor factories.
            </summary>
            <param name="typeFactoryBaseClass"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Util.EditorFactory.VsEditorFactoryHelpers.RegisterVsEditorFactory(JetBrains.Lifetimes.Lifetime,Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory,Microsoft.VisualStudio.Shell.Interop.IVsRegisterEditors)">
            <summary>
            This method is called automatically from the inherited editor factory class.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Util.EditorFactory.VsPersistableViewEditorFactory">
            <summary>
            Implements the editor factory for the Persistable Views subsystem.
            // NOTE: MUST NOT call for GUID on this component, it's defined by the autoemitted derived class.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Util.RawVsServiceProvider">
            <summary>
            Means for getting the raw VS Service Provider if <see cref="T:JetBrains.VsIntegration.Interop.VsServiceProviderResolver"/> cannot satisfy your needs by the means of injection.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Util.VsSpecialColorTableFromSysColorEx">
            <summary>
            Reads VS colors from <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell2.GetVSSysColorEx(System.Int32,System.UInt32@)"/> and feeds them into <see cref="T:JetBrains.UI.Theming.VsSpecialColorTable"/>.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Zones.AutoselectZoneByVsVersionRangeAttribute">
            <summary>
            Marker to help the Visual Studio JetHost choose the applicable zones by the current VS version in a universal fashion, without any special knowledge of the “Until…” stuff.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Zones.AutoselectZoneByVsVersionRangeAttribute.AutoselectZoneByJustThisVsVersion(System.Version,JetBrains.Application.Catalogs.PartCatalog,JetBrains.Util.OnError)">
            <summary>
            Gets the JustVsXX zone.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Zones.AutoselectZoneByVsVersionRangeAttribute.AutoselectZonesByVsVersionInRange(System.Version,JetBrains.Application.Catalogs.PartCatalog,JetBrains.Util.OnError,JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.Application.BuildScript.Application.Zones.ZonePart}@)">
            <summary>
            Gets all zones hitting the giving version (Just, Since, Until).
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Zones.ISinceVs08FrontEnvZone">
            <summary>
            Visual Studio integrated products, VS 8.0 and above.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Zones.IVisualStudioFrontendEnvZone">
            <summary>
            Visual Studio integrated products, all Visual Studio versions.
            </summary>
            <remarks>Basically the same as <see cref="T:JetBrains.VsIntegration.Zones.ISinceVs08FrontEnvZone" />, but more semantically specific.</remarks>
        </member>
        <member name="T:JetBrains.VsIntegration.Zones.IVsTextControlsZone">
            Frontend part of ITextControlsZone
        </member>
        <member name="T:JetBrains.VsIntegration.Zones.VsTextControlsZoneActivator">
            Activate VsTextControlZone when TextControl zone is activated
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDpiAware">
            <summary>
            Borrowed from VS as manual embed-interop-types.
            MUST be in namespace Microsoft.VisualStudio.Shell.Interop.
            </summary>
        </member>
    </members>
</doc>
