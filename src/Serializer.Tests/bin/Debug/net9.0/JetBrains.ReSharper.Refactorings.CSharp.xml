<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Refactorings.CSharp</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Refactorings.CSharp.ChangeSignature.Impl.TypeSuggestion">
            <summary>
            Suggestion for an unresolved type
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.CSharp.ConvertToGlobalUsing.IUsingInfo">
            <summary>
            Represents a resolved info about using directive.
            </summary>
            <remarks>
            An instance of <seealso cref="T:JetBrains.ReSharper.Refactorings.CSharp.ConvertToGlobalUsing.IUsingInfo"/> does not hold a tree node
            and only contains all the necessary semantic info.
            
            <seealso cref="M:JetBrains.ReSharper.Refactorings.CSharp.ConvertToGlobalUsing.UsingInfoUtil.TryGetInfo(JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective)"/> can be used
            to get an instance of <seealso cref="T:JetBrains.ReSharper.Refactorings.CSharp.ConvertToGlobalUsing.IUsingInfo"/> from <seealso cref="T:JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective"/>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Refactorings.CSharp.ConvertToGlobalUsing.UsingNamespaceInfo"/>
            <seealso cref="T:JetBrains.ReSharper.Refactorings.CSharp.ConvertToGlobalUsing.Statistics.UsingStatisticsInfo"/>
            <seealso cref="T:JetBrains.ReSharper.Refactorings.CSharp.ConvertToGlobalUsing.UsingAliasInfo"/>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.CSharp.ConvertToGlobalUsing.Statistics.UsingStatisticsCalculator.UsingStatisticsProcessor">
             <summary>
             Calculates usage statistics of using directives in the specified project module.
             </summary>
             <remarks>
             Resolving of using directives is quite expensive.
             However most of the using directives are specified at top-level of file
             and instead of resolving reference name reference we can get the imported namespace
             by quering the symbol scope with <seealso cref="M:JetBrains.ReSharper.Psi.Caches.ISymbolScope.GetNamespace(System.String)"/> method.
            
             With this idea in mind the implementation handles top-level using namespaces directives separately from
             all others directives and uses <seealso cref="T:JetBrains.ReSharper.Refactorings.CSharp.ConvertToGlobalUsing.Statistics.UsingStatisticsCalculator.ImportedNamespaceName"/> instead of <seealso cref="T:JetBrains.ReSharper.Refactorings.CSharp.ConvertToGlobalUsing.IUsingInfo"/>.
             Only those imports which are used in more number of files than a calculated threshold
             are getting converted into <seealso cref="T:JetBrains.ReSharper.Refactorings.CSharp.ConvertToGlobalUsing.IUsingInfo"/>.
            
             This optimization makes the calculating process ~3 times faster on a typical projects.
             </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.CSharp.ConvertToGlobalUsing.Statistics.UsingStatisticsCalculator.ImportedNamespaceName">
            <summary>
            Represents name of imported namespace as a pair of extern alias and qualified name of namespace.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.CSharp.ConvertToGlobalUsing.Statistics.UsingStatisticsCalculator.ImportedNamespaceName.#ctor(System.String,System.String)">
            <summary>
            Represents name of imported namespace as a pair of extern alias and qualified name of namespace.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.CSharp.ExtractMethod2.Common.CSharpExtractMethodLogic">
            <summary>
            General class to encapsulate logic for extract method action
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.CSharp.ExtractMethod2.Common.CSharpExtractMethodLogic.TryFindRangeToExtract(JetBrains.ReSharper.Psi.Tree.IFile,JetBrains.ReSharper.Psi.TreeTextRange,JetBrains.DocumentModel.DocumentRange)">
            <summary>
            Returns ICSharpStatementsRange | ICSharpExpression | null 
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.CSharp.ExtractMethod2.Common.CSharpExtractMethodParameterKind.PassByValue">
            <summary>
            p -> m
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.CSharp.ExtractMethod2.Common.CSharpExtractMethodParameterKind.ReturnOnly">
            <summary>
            return value only
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.CSharp.ExtractMethod2.Common.CSharpExtractMethodParameterKind.Return">
            <summary>
            return value, out parameter
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.CSharp.ExtractMethod2.Common.CSharpExtractMethodParameterKind.CanReturn">
            <summary>
            value is defined in the method and can be returned but it has no usages outside.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.CSharp.ExtractMethod2.Common.CSharpExtractMethodParameterKind.PassThrough">
            <summary>
            ref parameter or a combination of value parameter and return value...
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.CSharp.ExtractMethod2.Common.CSharpExtractMethodParameterKind.DoNotPass">
            <summary>
            Do not pass this parameter at all
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.CSharp.ExtractMethod2.Common.ExtractMethodResult.ResultDeclarationPointer">
            <summary>
            Result declaration
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.CSharp.Rename.ConstructorParameterRenameEvaluator">
            <summary>
            Constructor parameter to:
            1. Initialized field/property
            2. Base/derived/delegating constructor parameter
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.CSharp.Rename.EventRenameEvaluator">
            <summary>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.CSharp.Rename.FieldDerivedRenameEvaluator">
            <summary>
            Add renames derived from field rename
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.CSharp.Rename.PropertyDerivedRenameEvaluator">
            <summary>
            Property to its backing field
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.CSharp.Util.CSharpAbstractor.MakeDeclaration``1(JetBrains.ReSharper.Psi.Tree.IDeclaration,System.Boolean)">
            <summary>
            Create CS abstracts declaration
            </summary>
        </member>
    </members>
</doc>
