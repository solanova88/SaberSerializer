<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.ViewModels</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ViewModels.Options.OptionPages.InternalPage">
            <summary>
            This is the root Internal page. Only visible when running in Internal mode.<br />
            To add your own Internal options to this page:<br />
            • If they're veeeery common (declared in Shell or ViewModels), you can add right here.<br />
            • Got just a few options in your feature — you can declare a child page in your feature with <see cref="P:JetBrains.Application.UI.Options.OptionsPageAttribute.NestingType" /> of <see cref="F:JetBrains.Application.UI.Options.OptionPageNestingType.Inline" />. Your options would be embedded right into this page.<br />
            • Got a lot of options — consider making a regular subpage under this one.<br />
            • Alternatively, you can put stuff to R#'s main Internal Page. It's like a mass grave for internal options.<br />
            </summary>
        </member>
        <member name="M:JetBrains.ViewModels.Options.OptionPages.InternalPage.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.Options.OptionsSettingsSmartContext,JetBrains.Application.UI.Options.OptionsDialog.IOptionsDialogViewOwner)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.ViewModels.ToolWindowManagement.ToolWindowEmptyContentWithActionHint">
            <summary>
              <para>Defines so-called Empty Content for a multi-instance (tabbed) tool window to show when there are no tabs. Generally, it names the feature, tells why the window is empty, and how to invoke the feature related to this tool window.</para>
              <para>To use with your tool window:</para>
              <para>• Inherit a record class with a default ctor, passing all the parameters to the base initializer.</para>
              <para>• For shell-scoped tool windows, set it to your tool window descriptor's <see cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.EmptyContentAutomation" />.</para>
              <para>• For solution-scoped tool windows, if you want to only show this hint when a solution is open, wrap your type with <c>SolutionToolWindowContent</c> when setting to <see cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.EmptyContentAutomation" />.</para>
            </summary>
            <param name="NothingOpenedText">Caption-like text which names the feature and tells there's nothing to view. Example: “No hierarchies open”.</param>
            <param name="TypeOfAction">Identifies an <see cref="T:JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction" /> by its class. This action is supposed to execute the feature which makes the tool window useful. Optional.</param>
            <param name="UseActionToDoWhatText">If <see cref="P:JetBrains.ViewModels.ToolWindowManagement.ToolWindowEmptyContentWithActionHint.TypeOfAction" /> is defined, sets the text after the action name which explains what and why will happen. Pattern: “Use [action menu location and shortcut] [this text here]”. Example: “on an item to see its hierarchy”.</param>
            <param name="ActionIdAsAString">A fallback for the case when you absolutely cannot reference the action by its type (e.g. dependencies are convoluted). Preferably, streamline the dependencies so that you could reference the entities you are mentioning. If not possible, make a string constant, use it as an explicit action id, and put to this parameter.</param>
            <seealso cref="T:JetBrains.ViewModels.ToolWindowManagement.ToolWindowEmptyContentWithSimpleText" />
        </member>
        <member name="M:JetBrains.ViewModels.ToolWindowManagement.ToolWindowEmptyContentWithActionHint.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>
              <para>Defines so-called Empty Content for a multi-instance (tabbed) tool window to show when there are no tabs. Generally, it names the feature, tells why the window is empty, and how to invoke the feature related to this tool window.</para>
              <para>To use with your tool window:</para>
              <para>• Inherit a record class with a default ctor, passing all the parameters to the base initializer.</para>
              <para>• For shell-scoped tool windows, set it to your tool window descriptor's <see cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.EmptyContentAutomation" />.</para>
              <para>• For solution-scoped tool windows, if you want to only show this hint when a solution is open, wrap your type with <c>SolutionToolWindowContent</c> when setting to <see cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.EmptyContentAutomation" />.</para>
            </summary>
            <param name="NothingOpenedText">Caption-like text which names the feature and tells there's nothing to view. Example: “No hierarchies open”.</param>
            <param name="TypeOfAction">Identifies an <see cref="T:JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction" /> by its class. This action is supposed to execute the feature which makes the tool window useful. Optional.</param>
            <param name="UseActionToDoWhatText">If <see cref="P:JetBrains.ViewModels.ToolWindowManagement.ToolWindowEmptyContentWithActionHint.TypeOfAction" /> is defined, sets the text after the action name which explains what and why will happen. Pattern: “Use [action menu location and shortcut] [this text here]”. Example: “on an item to see its hierarchy”.</param>
            <param name="ActionIdAsAString">A fallback for the case when you absolutely cannot reference the action by its type (e.g. dependencies are convoluted). Preferably, streamline the dependencies so that you could reference the entities you are mentioning. If not possible, make a string constant, use it as an explicit action id, and put to this parameter.</param>
            <seealso cref="T:JetBrains.ViewModels.ToolWindowManagement.ToolWindowEmptyContentWithSimpleText" />
        </member>
        <member name="P:JetBrains.ViewModels.ToolWindowManagement.ToolWindowEmptyContentWithActionHint.NothingOpenedText">
            <summary>Caption-like text which names the feature and tells there's nothing to view. Example: “No hierarchies open”.</summary>
        </member>
        <member name="P:JetBrains.ViewModels.ToolWindowManagement.ToolWindowEmptyContentWithActionHint.TypeOfAction">
            <summary>Identifies an <see cref="T:JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction" /> by its class. This action is supposed to execute the feature which makes the tool window useful. Optional.</summary>
        </member>
        <member name="P:JetBrains.ViewModels.ToolWindowManagement.ToolWindowEmptyContentWithActionHint.UseActionToDoWhatText">
            <summary>If <see cref="P:JetBrains.ViewModels.ToolWindowManagement.ToolWindowEmptyContentWithActionHint.TypeOfAction" /> is defined, sets the text after the action name which explains what and why will happen. Pattern: “Use [action menu location and shortcut] [this text here]”. Example: “on an item to see its hierarchy”.</summary>
        </member>
        <member name="P:JetBrains.ViewModels.ToolWindowManagement.ToolWindowEmptyContentWithActionHint.ActionIdAsAString">
            <summary>A fallback for the case when you absolutely cannot reference the action by its type (e.g. dependencies are convoluted). Preferably, streamline the dependencies so that you could reference the entities you are mentioning. If not possible, make a string constant, use it as an explicit action id, and put to this parameter.</summary>
        </member>
        <member name="T:JetBrains.ViewModels.ToolWindowManagement.ToolWindowEmptyContentWithSimpleText">
            <summary>
              <para>Defines so-called Empty Content for a multi-instance (tabbed) tool window to show when there are no tabs. Generally, it names the feature or tells that there's nothing to show in the view at the moment. If the feature which owns your window has a related action to trigger the feature and make the window useful, mention the action with <see cref="T:JetBrains.ViewModels.ToolWindowManagement.ToolWindowEmptyContentWithActionHint"/>.</para>
              <para>To use with your tool window:</para>
              <para>• For shell-scoped tool windows, set it to your tool window descriptor's <see cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.EmptyContentAutomation" />.</para>
              <para>• For solution-scoped tool windows, if you want to only show this hint when a solution is open, wrap your type with <c>SolutionToolWindowContent</c> when setting to <see cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.EmptyContentAutomation" />.</para>
              <para>• For simple text, you can use this type directly and set the text to <see cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.EmptyContentParameter"/>.</para>
              <para>• For dynamic text (e.g. globalized), inherit a record class with a default ctor, passing the dynamically computed text to the base initializer.</para>
            </summary>
            <seealso cref="T:JetBrains.ViewModels.ToolWindowManagement.ToolWindowEmptyContentWithActionHint"/>
        </member>
        <member name="M:JetBrains.ViewModels.ToolWindowManagement.ToolWindowEmptyContentWithSimpleText.#ctor(System.String)">
            <summary>
              <para>Defines so-called Empty Content for a multi-instance (tabbed) tool window to show when there are no tabs. Generally, it names the feature or tells that there's nothing to show in the view at the moment. If the feature which owns your window has a related action to trigger the feature and make the window useful, mention the action with <see cref="T:JetBrains.ViewModels.ToolWindowManagement.ToolWindowEmptyContentWithActionHint"/>.</para>
              <para>To use with your tool window:</para>
              <para>• For shell-scoped tool windows, set it to your tool window descriptor's <see cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.EmptyContentAutomation" />.</para>
              <para>• For solution-scoped tool windows, if you want to only show this hint when a solution is open, wrap your type with <c>SolutionToolWindowContent</c> when setting to <see cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.EmptyContentAutomation" />.</para>
              <para>• For simple text, you can use this type directly and set the text to <see cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.EmptyContentParameter"/>.</para>
              <para>• For dynamic text (e.g. globalized), inherit a record class with a default ctor, passing the dynamically computed text to the base initializer.</para>
            </summary>
            <seealso cref="T:JetBrains.ViewModels.ToolWindowManagement.ToolWindowEmptyContentWithActionHint"/>
        </member>
        <member name="T:JetBrains.ViewModels.Transport.MouseDownOrClickTransportSession">
            <summary>
            Session object for controls which can react either on mouse down or click, and backend decides which should happen.
            Backend gets a signal on mousedown and responds with this session.
            1) Backend does not want to handle either mousedown or clicks at this moment — returns NULL session object (<see cref="M:JetBrains.ViewModels.Transport.MouseDownOrClickTransportSession.Refused" />).
            2) Backend wants to open a drop-down menu, which should happen on mousedown (so that mouseup on a menu item triggered the menu action, all with a single click) — returns a session object with <see cref="F:JetBrains.ViewModels.Transport.MouseDownOrClickTransportSession.IsWaitingForClick" /> set to <c>False</c> (<see cref="M:JetBrains.ViewModels.Transport.MouseDownOrClickTransportSession.HandledMouseDown" />).
            3) Backend wants to execute an action on click (mousedown + mouseup) — returns a session object with <see cref="F:JetBrains.ViewModels.Transport.MouseDownOrClickTransportSession.IsWaitingForClick" /> set to <c>True</c> and sinks <see cref="F:JetBrains.ViewModels.Transport.MouseDownOrClickTransportSession.BwdOnClick" />, which will be called only if the click is completed with a valid mouseup within the control. The task of the click handler should complete after click handling is done, frontend won't process further clicks until this one completes (<see cref="M:JetBrains.ViewModels.Transport.MouseDownOrClickTransportSession.WaitingForClick(JetBrains.Lifetimes.Lifetime,System.Func{JetBrains.Lifetimes.Lifetime,System.Threading.Tasks.Task})" />).
            </summary>
        </member>
        <member name="M:JetBrains.ViewModels.Transport.MouseDownOrClickTransportSession.HandledMouseDown">
            <summary>
            Backend wants to open a drop-down menu, which should happen on mousedown (so that mouseup on a menu item triggered the menu action, all with a single click) — returns a session object with <see cref="F:JetBrains.ViewModels.Transport.MouseDownOrClickTransportSession.IsWaitingForClick" /> set to <c>False</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ViewModels.Transport.MouseDownOrClickTransportSession.Read(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeReader)">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.ViewModels.Transport.MouseDownOrClickTransportSession.Refused">
            <summary>
            Backend does not want to handle either mousedown or clicks at this moment.
            </summary>
        </member>
        <member name="M:JetBrains.ViewModels.Transport.MouseDownOrClickTransportSession.WaitingForClick(JetBrains.Lifetimes.Lifetime,System.Func{JetBrains.Lifetimes.Lifetime,System.Threading.Tasks.Task})">
            <summary>
            Backend wants to execute an action on click (mousedown + mouseup) — returns a session object with <see cref="F:JetBrains.ViewModels.Transport.MouseDownOrClickTransportSession.IsWaitingForClick" /> set to <c>True</c> and sinks <see cref="F:JetBrains.ViewModels.Transport.MouseDownOrClickTransportSession.BwdOnClick" />, which will be called only if the click is completed with a valid mouseup within the control. The task of the click handler should complete after click handling is done, frontend won't process further clicks until this one completes.
            </summary>
            <param name="lifetime">Lifetime for watching the session for a click event.</param>
            <param name="FOnClick"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ViewModels.Transport.MouseDownOrClickTransportSession.Write(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeWriter,JetBrains.ViewModels.Transport.MouseDownOrClickTransportSession)">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.ViewModels.Transport.MouseDownOrClickTransportSession.OnBindNested(JetBrains.Lifetimes.Lifetime)">
            <inheritdoc />
        </member>
    </members>
</doc>
