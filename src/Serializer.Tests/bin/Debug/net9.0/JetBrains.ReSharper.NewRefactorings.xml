<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.NewRefactorings</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RefactoringsThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(RefactoringsThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = RefactoringsThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(RefactoringsThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;RefactoringsThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons.RefactorThis">
             <summary>
            	<para>
            		<para>RefactorThis Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons.RefactorThis"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons.RefactorThis.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                          lmmmmI`            
                        `oRT_-+Ok.           
                       .U#r_.~-~Hb_          
                      :Gd!,` /=-,XR~         
                     =R9=",  /!=--SD+        
                    ?Dk~"",  /!!='`tDJ       
                  `CDu~^"",  /!!=~-`rD5`     
                 `kDl~~^"",  /!!==~-`=R6'    
                -dD)=~~^"",  /!!==~^- _AR:   
               "DRr==~~^"",  /!!==~^"- .68=  
              !8b/===~~^"",  /!!==~^",-  28? 
             T%P!====~~^"",  /!!==~^",_.  i%[
             U%AaJ+==~~^"",  /!!==~:-` `~T4W6
              `,r58DZt+~"",  /!~:-`:+1O8Vc"` 
                   -/1#89C+"_-_=Tk8Do+_      
                       .=JwBBBBHt;-          
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RefactoringsThemedIcons+RefactorThis}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RefactoringsThemedIcons.RefactorThis))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RefactoringsThemedIcons.RefactorThis.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RefactoringsThemedIcons.RefactorThis&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons.RefactorThis.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons.RefactorThis">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons.RefactorThis.Load_Color">
            <summary>Loads the image for Themed Icon RefactorThis theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons.RefactorThis.Load_Gray">
            <summary>Loads the image for Themed Icon RefactorThis theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons.RefactorThis.Load_GrayDark">
            <summary>Loads the image for Themed Icon RefactorThis theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons.RefactorThis.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon RefactorThis.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons.Subexpression">
             <summary>
            	<para>
            		<para>Subexpression Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons.Subexpression"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons.Subexpression.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                        `^)||||||            
                      `~|+-   ^T/            
                    `~T+_````+7^             
                  `~7?_````_|JJJJJJJJJJJJJJ  
                 ~iL"....................ll  
                 /tr:--------------------tt  
                  .*{?"----=t{{{{{{{{{{{{{{  
                    .+xc^___^JF"             
                      .+I|~,,")I*            
                        .ruuuuuuu            
                                             
             kkT.`;|CxT!``;|CxT!``;|CxT!``ckk
             99oXEk=.`^5XEk=.`^5XEk=.`^5XES99
             OO`55` ll `55` ll `55` ll `55`OO
             DD,  _SDDX"  _SDDX"  _SDDX"  ,DD
             .)HM%bx-'}w8%bx-'}w8%bx-'}w8MAl_
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:RefactoringsThemedIcons+Subexpression}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(RefactoringsThemedIcons.Subexpression))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = RefactoringsThemedIcons.Subexpression.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;RefactoringsThemedIcons.Subexpression&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons.Subexpression.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons.Subexpression">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons.Subexpression.Load_Color">
            <summary>Loads the image for Themed Icon Subexpression theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons.Subexpression.Load_Gray">
            <summary>Loads the image for Themed Icon Subexpression theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons.Subexpression.Load_GrayDark">
            <summary>Loads the image for Themed Icon Subexpression theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Resources.RefactoringsThemedIcons.Subexpression.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Subexpression.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.ChangeSignature.ChangeSignatureModel`1.GetParameterKindDescription(JetBrains.ReSharper.Psi.ParameterKind,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <returns>
            Human-readable parameter kind description, like '[optional] in',
            -or-
            <c>null</c> if such a parameter modifier is not supported
            -or-
            <c>null</c> if <paramref name="nullIfNotSupported"/> is set to true and such a parameter modifier is
            not supported in current language level.
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.ChangeSignature.ChangeSignatureModel`1.GetParameterModifierString(JetBrains.ReSharper.Psi.ParameterKind,System.Boolean,System.Boolean,System.Boolean)">
            <returns>Language-specific modifier string for parameter declaration</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.ChangeSignature.Impl.ChangeSignatureConflictSearcher">
            <summary>
            Searches conflicts when changing signature
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.ChangeSignature.Impl.ChangeSignatureConflictSearcher.#ctor(JetBrains.ReSharper.Refactorings.ChangeSignature.ClrChangeSignatureModel)">
            <summary>
            Searches conflicts when changing signature
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.ChangeSignature.ISignatureUsage.TryUpdateSignatureUsage(System.Collections.Generic.List{JetBrains.ReSharper.Refactorings.ChangeSignature.Impl.ArgumentLikeInfo})">
            <summary>
            Tries to update the signature usage.
            If fails, returns <c>false</c>, and caller is allowed to <see cref="M:JetBrains.ReSharper.Refactorings.ChangeSignature.ISignatureUsage.TryConvertToSimplerUsage"/> for retry.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.ChangeSignature.ISignatureUsage.TryConvertToSimplerUsage">
            <summary>
            Converts signature usage into simpler form (as-is), allowing to <see cref="M:JetBrains.ReSharper.Refactorings.ChangeSignature.ISignatureUsage.TryUpdateSignatureUsage(System.Collections.Generic.List{JetBrains.ReSharper.Refactorings.ChangeSignature.Impl.ArgumentLikeInfo})"/> on it again.
            </summary>
            <remarks>
            If there is no implemented conversion to simpler code,
            returns <c>null</c> and turns current code into red (typically via <see cref="T:JetBrains.ReSharper.Refactorings.ChangeSignature.NonCompilableParameterValue"/>).
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Conflicts.CompositeConflictSearcher">
            <summary>
            Composites multiple conflict searchers
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Conflicts.NewLocalElementConflictSearcher">
            <summary>
            Searches conflicts caused by adding a new local declaration
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Conflicts.TypeMemberQualifier">
            <summary>
            Remembers all references to type members in a scope and resurrects the broken ones by qualifying them
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Rename.IDerivedRenamesEvaluator.SuggestedElementsHaveDerivedName">
            <summary>
            This options controls if new name of related symbol should be derived from the name of the initial symbol.
            When it is 'false' the same name will be applied all related symbols of the evaluator.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Rename.IDerivedRenamesEvaluator.CreateFromElement(System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Psi.IDeclaredElement},JetBrains.ReSharper.Refactorings.Rename.DerivedElement,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            This method is called for
              - each <see cref="T:JetBrains.ReSharper.Psi.IDeclaredElement"/> from <see cref="!:initialElements"/>
              - each <see cref="T:JetBrains.ReSharper.Psi.IDeclaredElement"/> that is added by a call to <see cref="M:JetBrains.ReSharper.Refactorings.Rename.IDerivedRenamesEvaluator.CreateFromElement(System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Psi.IDeclaredElement},JetBrains.ReSharper.Refactorings.Rename.DerivedElement,JetBrains.Application.Progress.IProgressIndicator)"/> or <see cref="M:JetBrains.ReSharper.Refactorings.Rename.IDerivedRenamesEvaluator.CreateFromReference(JetBrains.ReSharper.Psi.Resolve.IReference,JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.Application.Progress.IProgressIndicator)"/>
            </summary>
            <param name="initialElements">Declared elements that are initially detected (i.e. by caret position) when rename refactoring is called</param>
            <param name="derivedElement">Wrapped <see cref="T:JetBrains.ReSharper.Psi.IDeclaredElement"/> from <see cref="!:initialElements"/> or added later</param>
            <param name="pi">Progress indicator</param>
            <returns>Additional declared elements to rename</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Rename.IDerivedRenamesEvaluator.CreateFromReference(JetBrains.ReSharper.Psi.Resolve.IReference,JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            This method call always follows the <see cref="M:JetBrains.ReSharper.Refactorings.Rename.IDerivedRenamesEvaluator.CreateFromElement(System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Psi.IDeclaredElement},JetBrains.ReSharper.Refactorings.Rename.DerivedElement,JetBrains.Application.Progress.IProgressIndicator)"/> call with the <see cref="!:declaredElement"/> corresponding to the derivedElement
            </summary>
            <param name="reference">Reference to <see cref="!:declaredElement"/></param>
            <param name="declaredElement">Declared element corresponding to the derived element for preceding call to <see cref="M:JetBrains.ReSharper.Refactorings.Rename.IDerivedRenamesEvaluator.CreateFromElement(System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Psi.IDeclaredElement},JetBrains.ReSharper.Refactorings.Rename.DerivedElement,JetBrains.Application.Progress.IProgressIndicator)"/></param>
            <param name="pi">Progress indicator</param>
            <returns>Additional declared elements to rename</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Rename.ParameterInOverloadRenameEvaluator">
            <summary>
            Corresponding parameter of overload.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.ILanguageSpecificRefactoringService">
            <summary>
            Tag interface for all language-specific refactroing services
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.InlineParameter.Impl.SubExpressionSearcher.myQualifier">
            <summary>
            Qualifier of invoced expression
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.InlineParameter.Impl.SubExpressionSearcher.myHasThisQualifier">
            <summary>
            Qualifier of invoced expression is this (or omitted)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.IntroduceVariable.IntroduceVariableHelper.AdditionalInitialization(JetBrains.ReSharper.Refactorings.IntroduceVariable.IntroduceVariableWorkflow,JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.Application.DataContext.IDataContext)">
            <summary>
            should return false if refactoring should be terminated
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.MoveMembers.Analysis.IMoveAnalyser.BaseClass2MemberInfosMap">
            <summary>
            Table of methods that should be declared abstract in the base classes.
            This is only actual for Pull Up refactoring.  
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.MoveMembers.Common.IImageCollector.GetMemberImages(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.ReSharper.Psi.ITypeElement)">
            <summary>
            Return all images of a given type member.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.MoveMembers.Common.MovedMemberInfo">
            <summary>
              Stores declared element even when it was removed.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.MoveMembers.Util.MemberListDataProvider.mySelectedMembers">
            <summary>
            Selected members, eg 1,4,6
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.MoveMembers.Util.MemberListDataProvider.myAbstract">
            <summary>
            Members selected abstract, eg 1,6
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.MoveStaticMembers.MoveStaticMembersRefactoring.TryRemoveQualification(JetBrains.ReSharper.Psi.Resolve.IReference)">
            <remarks>Trying to not introduce new namespace using for non-user code</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.MoveTypeToOuterScope.IMoveTypeToOuterScope.NeedsTypeParameterOfOuterClass(JetBrains.ReSharper.Psi.ITypeParameter,JetBrains.ReSharper.Psi.Tree.IDeclaration)">
            <summary>
            STEP 2: Calculate new CLR name of a type, including its type parameters<br/>
             phase a: is given parameter of outer class needed in a body of new class?
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.MoveTypeToOuterScope.IMoveTypeToOuterScope.SaveLocalReferences(System.Collections.Generic.ICollection{JetBrains.ReSharper.Psi.Tree.IDeclaration})">
            <summary>
            STEP 4: Prepare to move; save information about references inside your declarations
            </summary>
            <param name="declarations"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.MoveTypeToOuterScope.IMoveTypeToOuterScope.CutDeclaration(JetBrains.ReSharper.Psi.Tree.IDeclaration)">
            <summary>
            STEP 5a: Prepare to changing declarations
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.MoveTypeToOuterScope.IMoveTypeToOuterScope.PasteDeclarations(JetBrains.Util.Pair{JetBrains.ReSharper.Psi.Tree.IDeclaration,JetBrains.ReSharper.Psi.Tree.IDeclaration})">
            <summary>
            STEP 5b: Change declarations; resulting class should have correct CLR name as given by SetNewCLRName
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.MoveTypeToOuterScope.IMoveTypeToOuterScope.RestoreLocalReferences(System.Collections.Generic.ICollection{JetBrains.ReSharper.Psi.Tree.IDeclaration})">
            <summary>
            STEP 6: Restore references inside new declarations
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Move.AdjustNamespaces.Impl.ClassPartsCollector.myFqnToElements">
            <summary>
            Element names collisions...
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Move.AdjustNamespaces.Impl.ClassPartsCollector.myDeclaredElementsToNamespaces">
            <summary>
            List of type parts with new namespaces...
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Move.AdjustNamespaces.Impl.ClassPartsCollector.myOutOfScopeParts">
            <summary>
            Elements having parts out of refactoring scope...
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Move.AdjustNamespaces.Impl.ClassPartsCollector.ImportedSymbols">
            <summary>
            Imported symbols of files are collected and then are explicitly inserted into new files.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Move.AdjustNamespaces.Impl.ClassPartsCollector.TopmostElements">
            <summary>
            Elements that can be used externally without qualifier...
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Move.MoveToFolder.Impl.MoveToFolderHierarchyItem.CreatedProjectFile">
            <summary>
            Create project file for this item...
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.PushPullTool.FixFactory.Priority">
            <summary>
            The smaller the number, the higher fix's position in UI
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.RenameProject.RenameProjectSupport">
            <summary>
            IDE - specific part of the refactoring
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.SafeDeleteProjects.IProjectToDelete">
            <summary>
              IDE - specific project entity. In Rider ProjectMark prefer to use
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.SafeDeleteProjects.IProjectToDelete.Children">
            <summary>
              For solution folder returns projects and solution folders inside.
              For regular projects return empty list.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.SafeDeleteProjects.IProjectToDelete.GetLocationsToDelete">
            <summary>
              Project directories that will be deleted
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.SafeDeleteProjects.SafeDeleteProjectDataModel.GetAllProjectsToDelete">
            <summary>
              If selected solution folder returns it and all children
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.SafeDeleteProjects.SafeDeleteProjectsHelper">
            <summary>
              IDE - specific part of the refactoring
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.SafeDeleteProjects.SafeDeleteProjectsHelper.GetLocationsToDeleteWithDisableUndo(JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Refactorings.SafeDeleteProjects.IProjectToDelete)">
            <summary>
              Gets bin and obj directories if they are inside project directory.
              It's better to generate them again if user undo refactoring
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.TransformParameters.SignatureGenerifier.BuildSubstitution(JetBrains.ReSharper.Psi.IType,JetBrains.ReSharper.Psi.IType)">
            <summary>
            Example:
            mostGenericType = List{T[], T1}
            specializedType = List{string[], U}
            result is T -> string, T1 -> U. 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Util.NewTypeImages.ResolveImagesRepository.Substitute(JetBrains.ReSharper.Psi.IType)">
            <summary>
            Use on your own risk. Source image should be valid! And type identity should be provided.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.WorkflowNew.BeRefactoringsTaskExecutor">
            <summary>
            Facilitates implementation of UI-based ITaskExecutors
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.WorkflowNew.WorkflowHostWithBeWizardForm">
            <summary>
            Runs refactoring on the refactoring wizard form...
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Workflow.RefactoringAction">
            <summary>
            Implements the standard action that spawns a refactoring.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Workflow.RefactoringAction.myAfterRefactoringExecuted">
            <summary>
            Executes after the refactoring completes successfully.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Workflow.RefactoringAction.#ctor(System.Func{JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringWorkflow})">
            <summary>
            Inits with a functor that produces the refactoring workflow.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Workflow.RefactoringAction.AfterRefactoringExecuted">
            <summary>
            If non-Null, executes after the refactoring completes successfully.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Workflow.RefactoringAction.Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Workflow.RefactoringAction.Update(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.ActionPresentation,JetBrains.Application.UI.Actions.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
    </members>
</doc>
