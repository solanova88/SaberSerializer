<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Features.Internal</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesInternalThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesInternalThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = FeaturesInternalThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(FeaturesInternalThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;FeaturesInternalThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.CodeBehindToolWindow">
             <summary>
            	<para>
            		<para>CodeBehindToolWindow Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.CodeBehindToolWindow"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.CodeBehindToolWindow.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                       333333333333I/`       
                       oo----------~Ju\`     
                       ee------------~lj+`   
                       aa----````------~t5+  
                       SS----    --------SS  
                       kk----        ----kk  
               aaaaaaaaaaaaaaaaaaaa  ----EE  
               kkr?Lc|T7ilt{]Iuoekk  ----hh  
               XXr?Lc|T7ilt{]IuoeXX  ----XX  
               ww  ````````````"^ww------44  
               GG  ''''''''''''"^GG______ww  
               RR  ::::::::::::"^RRdddddddd  
               DD  ````..---__,"^DD          
               %%%%%%%%%%%%%%%%%%%%          
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesInternalThemedIcons+CodeBehindToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesInternalThemedIcons.CodeBehindToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesInternalThemedIcons.CodeBehindToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesInternalThemedIcons.CodeBehindToolWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.CodeBehindToolWindow.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.CodeBehindToolWindow">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.CodeBehindToolWindow.Load_Color">
            <summary>Loads the image for Themed Icon CodeBehindToolWindow theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.CodeBehindToolWindow.Load_Gray">
            <summary>Loads the image for Themed Icon CodeBehindToolWindow theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.CodeBehindToolWindow.Load_GrayDark">
            <summary>Loads the image for Themed Icon CodeBehindToolWindow theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.CodeBehindToolWindow.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CodeBehindToolWindow.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.QuickStartToolWindow">
             <summary>
            	<para>
            		<para>QuickStartToolWindow Themed Icon generated identifiers:</para>
            		<para>— <see cref = "T:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.QuickStartToolWindow"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref = "F:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.QuickStartToolWindow.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref = "T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                  tEEEEEEEEEEEEEEEE{         
                 _kkkEEEEEEEEEEEEEkk         
                 $$$$$$$$$$$$$$$$$$$$$$$$    
                _$$     `-LN$$G _$w _$$$$    
                7$$  S$8P` c$`       =$$$``  
               _u$$  =rr^ 'R$$. %$` %$$$$~^"-
               |I$$  =r_ -%$r   ``   $$$$=~~'
              -C]$$  S$$+ .6$; I$= I$$$$$==~ 
              L}{$$$$$$$$$$$$$$$$$$$$$$$$!;- 
             -llt$$$$$$$$$$$$$$$$$$$$$$$$/!  
             ~\*+$$$$$$$$$$$$$$$$$$$$$$$$+_  
                 $$          $$$$$$$$$$$$c   
                 $$$$$$$$$$$$$$$$$$$$$$$$~   
                 $$$$$$$$$$$$$$$$$$$$$$$$`   
                       /Cx1Iuoj5aSVkkEEk;    
                      `lt}F]1Iuoj5ayVkko`    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesInternalThemedIcons+QuickStartToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesInternalThemedIcons.QuickStartToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesInternalThemedIcons.QuickStartToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesInternalThemedIcons.QuickStartToolWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.TypeBrowserToolWindow">
             <summary>
            	<para>
            		<para>TypeBrowserToolWindow Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.TypeBrowserToolWindow"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.TypeBrowserToolWindow.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                  tEEEEEEEEEEEEEEEE{         
                 _kkkEEEEEEEEEEEEEkk         
                 $$$$$$$$$$$$$$$$$$$$$$$$    
                _$$     `-LN$$G _$w _$$$$    
                7$$  S$8P` c$`       =$$$``  
               _u$$  =rr^ 'R$$. %$` %$$$$~^"-
               |I$$  =r_ -%$r   ``   $$$$=~~'
              -C]$$  S$$+ .6$; I$= I$$$$$==~ 
              L}{$$$$$$$$$$$$$$$$$$$$$$$$!;- 
             -llt$$$$$$$$$$$$$$$$$$$$$$$$/!  
             ~\*+$$$$$$$$$$$$$$$$$$$$$$$$+_  
                 $$          $$$$$$$$$$$$c   
                 $$$$$$$$$$$$$$$$$$$$$$$$~   
                 $$$$$$$$$$$$$$$$$$$$$$$$`   
                       /Cx1Iuoj5aSVkkEEk;    
                      `lt}F]1Iuoj5ayVkko`    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesInternalThemedIcons+TypeBrowserToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesInternalThemedIcons.TypeBrowserToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesInternalThemedIcons.TypeBrowserToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesInternalThemedIcons.TypeBrowserToolWindow&gt;()        // Icon image for rendering</code>
            </example>
             <summary>
            	<para>
            		<para>TypeBrowserToolWindow Themed Icon generated identifiers:</para>
            		<para>— <see cref = "T:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.TypeBrowserToolWindow"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref = "F:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.TypeBrowserToolWindow.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref = "T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                  tEEEEEEEEEEEEEEEE{         
                 _kkkEEEEEEEEEEEEEkk         
                 $$$$$$$$$$$$$$$$$$$$$$$$    
                _$$     `-LN$$G _$w _$$$$    
                7$$  S$8P` c$`       =$$$``  
               _u$$  =rr^ 'R$$. %$` %$$$$~^"-
               |I$$  =r_ -%$r   ``   $$$$=~~'
              -C]$$  S$$+ .6$; I$= I$$$$$==~ 
              L}{$$$$$$$$$$$$$$$$$$$$$$$$!;- 
             -llt$$$$$$$$$$$$$$$$$$$$$$$$/!  
             ~\*+$$$$$$$$$$$$$$$$$$$$$$$$+_  
                 $$          $$$$$$$$$$$$c   
                 $$$$$$$$$$$$$$$$$$$$$$$$~   
                 $$$$$$$$$$$$$$$$$$$$$$$$`   
                       /Cx1Iuoj5aSVkkEEk;    
                      `lt}F]1Iuoj5ayVkko`    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesInternalThemedIcons+TypeBrowserToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesInternalThemedIcons.TypeBrowserToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesInternalThemedIcons.TypeBrowserToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesInternalThemedIcons.TypeBrowserToolWindow&gt;()        // Icon image for rendering</code>
            </example>
             <summary>
            	<para>
            		<para>TypeBrowserToolWindow Themed Icon generated identifiers:</para>
            		<para>— <see cref = "T:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.TypeBrowserToolWindow"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref = "F:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.TypeBrowserToolWindow.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref = "T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                  tEEEEEEEEEEEEEEEE{         
                 _kkkEEEEEEEEEEEEEkk         
                 $$$$$$$$$$$$$$$$$$$$$$$$    
                _$$     `-LN$$G _$w _$$$$    
                7$$  S$8P` c$`       =$$$``  
               _u$$  =rr^ 'R$$. %$` %$$$$~^"-
               |I$$  =r_ -%$r   ``   $$$$=~~'
              -C]$$  S$$+ .6$; I$= I$$$$$==~ 
              L}{$$$$$$$$$$$$$$$$$$$$$$$$!;- 
             -llt$$$$$$$$$$$$$$$$$$$$$$$$/!  
             ~\*+$$$$$$$$$$$$$$$$$$$$$$$$+_  
                 $$          $$$$$$$$$$$$c   
                 $$$$$$$$$$$$$$$$$$$$$$$$~   
                 $$$$$$$$$$$$$$$$$$$$$$$$`   
                       /Cx1Iuoj5aSVkkEEk;    
                      `lt}F]1Iuoj5ayVkko`    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesInternalThemedIcons+TypeBrowserToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesInternalThemedIcons.TypeBrowserToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesInternalThemedIcons.TypeBrowserToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesInternalThemedIcons.TypeBrowserToolWindow&gt;()        // Icon image for rendering</code>
            </example>
             <summary>
            	<para>
            		<para>TypeBrowserToolWindow Themed Icon generated identifiers:</para>
            		<para>— <see cref = "T:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.TypeBrowserToolWindow"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref = "F:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.TypeBrowserToolWindow.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref = "T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                  tEEEEEEEEEEEEEEEE{         
                 _kkkEEEEEEEEEEEEEkk         
                 $$$$$$$$$$$$$$$$$$$$$$$$    
                _$$     `-LN$$G _$w _$$$$    
                7$$  S$8P` c$`       =$$$``  
               _u$$  =rr^ 'R$$. %$` %$$$$~^"-
               |I$$  =r_ -%$r   ``   $$$$=~~'
              -C]$$  S$$+ .6$; I$= I$$$$$==~ 
              L}{$$$$$$$$$$$$$$$$$$$$$$$$!;- 
             -llt$$$$$$$$$$$$$$$$$$$$$$$$/!  
             ~\*+$$$$$$$$$$$$$$$$$$$$$$$$+_  
                 $$          $$$$$$$$$$$$c   
                 $$$$$$$$$$$$$$$$$$$$$$$$~   
                 $$$$$$$$$$$$$$$$$$$$$$$$`   
                       /Cx1Iuoj5aSVkkEEk;    
                      `lt}F]1Iuoj5ayVkko`    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesInternalThemedIcons+TypeBrowserToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesInternalThemedIcons.TypeBrowserToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesInternalThemedIcons.TypeBrowserToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesInternalThemedIcons.TypeBrowserToolWindow&gt;()        // Icon image for rendering</code>
            </example>
             <summary>
            	<para>
            		<para>TypeBrowserToolWindow Themed Icon generated identifiers:</para>
            		<para>— <see cref = "T:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.TypeBrowserToolWindow"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref = "F:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.TypeBrowserToolWindow.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref = "T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                  tEEEEEEEEEEEEEEEE{         
                 _kkkEEEEEEEEEEEEEkk         
                 $$$$$$$$$$$$$$$$$$$$$$$$    
                _$$     `-LN$$G _$w _$$$$    
                7$$  S$8P` c$`       =$$$``  
               _u$$  =rr^ 'R$$. %$` %$$$$~^"-
               |I$$  =r_ -%$r   ``   $$$$=~~'
              -C]$$  S$$+ .6$; I$= I$$$$$==~ 
              L}{$$$$$$$$$$$$$$$$$$$$$$$$!;- 
             -llt$$$$$$$$$$$$$$$$$$$$$$$$/!  
             ~\*+$$$$$$$$$$$$$$$$$$$$$$$$+_  
                 $$          $$$$$$$$$$$$c   
                 $$$$$$$$$$$$$$$$$$$$$$$$~   
                 $$$$$$$$$$$$$$$$$$$$$$$$`   
                       /Cx1Iuoj5aSVkkEEk;    
                      `lt}F]1Iuoj5ayVkko`    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesInternalThemedIcons+TypeBrowserToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesInternalThemedIcons.TypeBrowserToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesInternalThemedIcons.TypeBrowserToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesInternalThemedIcons.TypeBrowserToolWindow&gt;()        // Icon image for rendering</code>
            </example>
             <summary>
            	<para>
            		<para>TypeBrowserToolWindow Themed Icon generated identifiers:</para>
            		<para>— <see cref = "T:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.TypeBrowserToolWindow"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref = "F:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.TypeBrowserToolWindow.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref = "T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                  tEEEEEEEEEEEEEEEE{         
                 _kkkEEEEEEEEEEEEEkk         
                 $$$$$$$$$$$$$$$$$$$$$$$$    
                _$$     `-LN$$G _$w _$$$$    
                7$$  S$8P` c$`       =$$$``  
               _u$$  =rr^ 'R$$. %$` %$$$$~^"-
               |I$$  =r_ -%$r   ``   $$$$=~~'
              -C]$$  S$$+ .6$; I$= I$$$$$==~ 
              L}{$$$$$$$$$$$$$$$$$$$$$$$$!;- 
             -llt$$$$$$$$$$$$$$$$$$$$$$$$/!  
             ~\*+$$$$$$$$$$$$$$$$$$$$$$$$+_  
                 $$          $$$$$$$$$$$$c   
                 $$$$$$$$$$$$$$$$$$$$$$$$~   
                 $$$$$$$$$$$$$$$$$$$$$$$$`   
                       /Cx1Iuoj5aSVkkEEk;    
                      `lt}F]1Iuoj5ayVkko`    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesInternalThemedIcons+TypeBrowserToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesInternalThemedIcons.TypeBrowserToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesInternalThemedIcons.TypeBrowserToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesInternalThemedIcons.TypeBrowserToolWindow&gt;()        // Icon image for rendering</code>
            </example>
             <summary>
            	<para>
            		<para>TypeBrowserToolWindow Themed Icon generated identifiers:</para>
            		<para>— <see cref = "T:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.TypeBrowserToolWindow"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref = "F:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.TypeBrowserToolWindow.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref = "T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                  tEEEEEEEEEEEEEEEE{         
                 _kkkEEEEEEEEEEEEEkk         
                 $$$$$$$$$$$$$$$$$$$$$$$$    
                _$$     `-LN$$G _$w _$$$$    
                7$$  S$8P` c$`       =$$$``  
               _u$$  =rr^ 'R$$. %$` %$$$$~^"-
               |I$$  =r_ -%$r   ``   $$$$=~~'
              -C]$$  S$$+ .6$; I$= I$$$$$==~ 
              L}{$$$$$$$$$$$$$$$$$$$$$$$$!;- 
             -llt$$$$$$$$$$$$$$$$$$$$$$$$/!  
             ~\*+$$$$$$$$$$$$$$$$$$$$$$$$+_  
                 $$          $$$$$$$$$$$$c   
                 $$$$$$$$$$$$$$$$$$$$$$$$~   
                 $$$$$$$$$$$$$$$$$$$$$$$$`   
                       /Cx1Iuoj5aSVkkEEk;    
                      `lt}F]1Iuoj5ayVkko`    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesInternalThemedIcons+TypeBrowserToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesInternalThemedIcons.TypeBrowserToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesInternalThemedIcons.TypeBrowserToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesInternalThemedIcons.TypeBrowserToolWindow&gt;()        // Icon image for rendering</code>
            </example>
             <summary>
            	<para>
            		<para>TypeBrowserToolWindow Themed Icon generated identifiers:</para>
            		<para>— <see cref = "T:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.TypeBrowserToolWindow"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref = "F:JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons.TypeBrowserToolWindow.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref = "T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                  tEEEEEEEEEEEEEEEE{         
                 _kkkEEEEEEEEEEEEEkk         
                 $$$$$$$$$$$$$$$$$$$$$$$$    
                _$$     `-LN$$G _$w _$$$$    
                7$$  S$8P` c$`       =$$$``  
               _u$$  =rr^ 'R$$. %$` %$$$$~^"-
               |I$$  =r_ -%$r   ``   $$$$=~~'
              -C]$$  S$$+ .6$; I$= I$$$$$==~ 
              L}{$$$$$$$$$$$$$$$$$$$$$$$$!;- 
             -llt$$$$$$$$$$$$$$$$$$$$$$$$/!  
             ~\*+$$$$$$$$$$$$$$$$$$$$$$$$+_  
                 $$          $$$$$$$$$$$$c   
                 $$$$$$$$$$$$$$$$$$$$$$$$~   
                 $$$$$$$$$$$$$$$$$$$$$$$$`   
                       /Cx1Iuoj5aSVkkEEk;    
                      `lt}F]1Iuoj5ayVkko`    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesInternalThemedIcons+TypeBrowserToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesInternalThemedIcons.TypeBrowserToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesInternalThemedIcons.TypeBrowserToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesInternalThemedIcons.TypeBrowserToolWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Internal.Actions.Tooling.ActionIdIsNotAssigned">
            <summary>
            suppressed because id is no longer obligatory
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.Annotator.Annotator.HierarchyConsistencChecker.AnalyzePostconditions(System.Collections.Generic.IList{JetBrains.ReSharper.Psi.IOverridableMember},JetBrains.ReSharper.Features.Internal.Annotator.AnnotationsStorage,JetBrains.ReSharper.Features.Internal.Annotator.AnnotationsStorage)">
            <summary>
            Analyzes virtual method hierarchy for consistency.
            </summary>
            <param name="topolgicallySortedOverridableMembers">A root of virtual method hierarchy.</param>
            <param name="storage">A storage that contains result of per method NRE-analysis before this method invocation and result of 
              current analysis after.</param>
            <param name="preDefinedAnnotations"></param>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Internal.Annotator.AnnotatorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.Annotator.AnnotatorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.Annotator.AnnotatorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Internal.Annotator.ExportDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.Annotator.ExportDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.Annotator.ExportDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Internal.Annotator.ImportContractAssemblyDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.Annotator.ImportContractAssemblyDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.Annotator.ImportContractAssemblyDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.AttributedClassesCache.SourceAttributedTypesCache.UpdateIndexAfterLoad(JetBrains.Util.DataStructures.CompactMap{System.String,JetBrains.ReSharper.Features.Internal.AttributedClassesCache.SourceAttributedTypesTrieNode})">
            <summary>
            Returns of some data was added to the index
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.AttributedClassesCache.SourceAttributedTypesTrieNode.Merge(JetBrains.ReSharper.Features.Internal.AttributedClassesCache.SourceAttributedTypesTrieNode,JetBrains.Util.OneToSetMap{JetBrains.ReSharper.Psi.IPsiSourceFile,JetBrains.ReSharper.Features.Internal.AttributedClassesCache.SourceAttributedTypesTrieNode})">
            <summary>
            return true when some data was added
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.ContextActions.ExportContextActionsListAction.Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.ContextActions.ExportContextActionsListAction.Update(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.ActionPresentation,JetBrains.Application.UI.Actions.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.ContextActions.TryProjectTransactionAction.Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.ContextActions.TryProjectTransactionAction.Update(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.ActionPresentation,JetBrains.Application.UI.Actions.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Internal.ProjectDependenciesBuilder.DependenciesBuilder.myGroups">
            <summary>
            Project node to group node
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.Internal.ProjectDependenciesBuilder.ProjectInHierarchyItem.Name">
            <summary>
            Gets name of the setting
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.Internal.ProjectDependenciesBuilder.ProjectInHierarchyItem.Description">
            <summary>
            Gets description of the setting
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.Internal.ProjectDependenciesBuilder.ProjectInHierarchyItem.Children">
            <summary>
            Gets children nodes
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.ReSharper.Options.CSharpInternalPage.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.Options.OptionsDialog.OptionsPageContext,JetBrains.Application.UI.Options.OptionsSettingsSmartContext,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.ReSharper.Options.ExternalSourcesInternalPage.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.Options.OptionsDialog.OptionsPageContext,JetBrains.Application.UI.Options.OptionsSettingsSmartContext,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.ReSharper.Features.Internal.TestForm.TestForm.components">
            <summary>Required designer variable.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.TestForm.TestForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.TestForm.TestForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.Zones.ZoneMarkersService.GetZoneMarkersForNamespace(JetBrains.ReSharper.Psi.INamespace,JetBrains.ReSharper.Psi.Modules.IPsiModule)">
            <summary>
            Return all ZoneMarker classes for the given namespace hierarchy
            </summary>
            <remarks>
            <para>
            This method only returns classes called <c>ZoneMarker</c>, which apply their zone definition requirements
            to the whole namespace. Any <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZoneMarkerAttribute"/> instances applied to another class do not
            contribute to the zone requirements of a namespace.
            </para>
            <para>
            Zone requirements are per-module, so this method only returns <c>ZoneMarker</c> instances in the given
            namespace hierarchy, in the given module.
            </para>
            </remarks>
            <param name="ns">The namespace to return ZoneMarker instances for</param>
            <param name="module">Only return ZoneMarker instances from this module</param>
            <returns>
            All zone marker classes in the namespace hierarchy, in the given module. It will only return markers called
            <c>ZoneMarker</c>. Any classes with a private zone marker attribute are not included.
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.Zones.ZoneMarkersService.GetZoneMarkersForType(JetBrains.ReSharper.Psi.ITypeElement)">
            <summary>
            Returns all zone markers for the given type
            </summary>
            <param name="typeElement">The type element to examine</param>
            <returns>
            All zone markers in the type's namespace and module. Also returns the type element itself, if it's marked with
            <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZoneMarkerAttribute"/>.
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.Zones.ZoneMarkersService.GetZoneDefinitionsForNamespace(JetBrains.ReSharper.Psi.INamespace,JetBrains.ReSharper.Psi.Modules.IPsiModule)">
            <summary>
            Returns the full set of zone definitions required by a namespace hierarchy in a specific module.
            </summary>
            <remarks>
            <para>Be careful with this API!</para>
            <para>
            The full set of zone definitions required by a class is the union of the zone definitions required by the
            containing namespace (and outer namespaces) and any zone definitions applied to the class itself via
            <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZoneMarkerAttribute"/>. This method will only return the zones for the namespace (also remember that
            zones are per-module).
            </para>
            </remarks>
            <param name="ns">The namespace to return zone definitions for</param>
            <param name="module">Only returns zone definitions required by this namespace in this module</param>
            <returns>
            All zone definitions that are applied to <c>ZoneMarker</c> classes in the given namespace hierarchy and module.
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.Zones.ZoneMarkersService.GetUnsatisfiedZoneDefinitions(JetBrains.ReSharper.Psi.ITypeElement,JetBrains.ReSharper.Psi.ITypeElement)">
            <summary>
            Get a list of missing zone definitions required by <see cref="!:referencedType"/> when used in <see cref="!:referencingType"/>.
            </summary>
            <remarks>
            <para>
            Compares the zone definitions required by <see cref="!:referencedType"/>, and checks to see if they are all
            satisfied for <see cref="!:referencingType"/>. This compares the zone definitions for each type's namespaces, and
            also any zone definitions on the type itself, via <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZoneMarkerAttribute"/>.
            </para>
            <para>
            Note that zones are defined per-module, so the zones for namespaces are filtered by module.
            </para>
            </remarks>
            <param name="referencedType">The type being referenced, e.g. as a constructor parameter</param>
            <param name="referencingType">The type that contains the reference, e.g. that owns the constructor parameter</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.Zones.ZoneMarkersService.ExpandZoneDefinitions(JetBrains.ReSharper.Psi.ITypeElement)">
            <summary>
            Recursively expand the given zone definition to include all required and inherited zone definitions.
            </summary>
            <param name="zoneDefinition">The zone definition to expand.</param>
            <returns>
            A set of <see cref="T:JetBrains.ReSharper.Psi.ITypeElement"/> instances representing the transitive set of definitions, including the
            original zone definition.
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Internal.Zones.ZoneMarkersService.GetZoneDefinitionsForZoneMarker(JetBrains.ReSharper.Psi.ITypeElement,System.Boolean)">
            <summary>
            Returns zone definitions explicitly required by this class
            </summary>
            <remarks>
            <para>
            By default, will return the full recursive set of zone definitions required by this class. The zone definitions
            are either required with <see cref="T:JetBrains.Application.BuildScript.Application.Zones.IRequire`1"/>, or via constructor parameters to
            <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZoneMarkerAttribute"/>.
            </para>
            <para>
            This method does NOT expand to include zones required in the containing namespaces.
            </para>
            </remarks>
            <param name="zoneMarker">
            A class marked with a <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZoneMarkerAttribute"/>. This can be a <c>ZoneMarker</c> class, or a simple
            clas with private zone requirements.
            </param>
            <param name="recursive">
            True to recursively gather all zone definitions required by the top level zone definitions. False will return
            only the zone definitions directly required or inherited by the zone marker.
            </param>
            <returns>The set of zone definitions either immediately or recursively required by the zone marker.</returns>
        </member>
    </members>
</doc>
