<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.PsiFeatures.VisualStudio.Backend</name>
    </assembly>
    <members>
        <member name="T:JetBrains.PsiFeatures.VisualStudio.Backend.TextControl.FormatSettings.EditorConfigToolWindowView">
            <summary>
            EditorConfigToolWindowView
            </summary>
        </member>
        <member name="M:JetBrains.PsiFeatures.VisualStudio.Backend.TextControl.FormatSettings.EditorConfigToolWindowView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.PsiFeatures.VisualStudio.Backend.TextControl.Intellisense.ReSharperCompletionIsDisabledIfVsContainsReadonlyRegions">
            <summary>
            Detect the situation when current text control contains readonly regions, thus R# completion should be disabled and fall back to VS completion.
            </summary>
            <remarks>
            When VS debugger is standing at breakpoint and text control contains method calls from the current call stack, VS marks these calls as readonly regions.
            In such a case R# code completion couldn't be applied to the document, VS code completion is disabled by R#, so the user has no completion at all.
            </remarks>
        </member>
        <member name="T:JetBrains.PsiFeatures.VisualStudio.Backend.Options.Intellisense.IntellisenseEnabledListView2">
            <summary>
            IntellisenseEnabledListView2
            </summary>
        </member>
        <member name="M:JetBrains.PsiFeatures.VisualStudio.Backend.Options.Intellisense.IntellisenseEnabledListView2.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.PsiFeatures.VisualStudio.Backend.Resources.PsiFeaturesVisualStudioBackendThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.PsiFeatures.VisualStudio.Backend.Resources.PsiFeaturesVisualStudioBackendThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiFeaturesVisualStudioBackendThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.PsiFeatures.VisualStudio.Backend.Resources.PsiFeaturesVisualStudioBackendThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(PsiFeaturesVisualStudioBackendThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.PsiFeatures.VisualStudio.Backend.Resources.PsiFeaturesVisualStudioBackendThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.PsiFeatures.VisualStudio.Backend.Resources.PsiFeaturesVisualStudioBackendThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiFeaturesVisualStudioBackendThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(PsiFeaturesVisualStudioBackendThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiFeaturesVisualStudioBackendThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.PsiFeatures.VisualStudio.Backend.Resources.PsiFeaturesVisualStudioBackendThemedIcons.NewFolder">
             <summary>
            	<para>
            		<para>NewFolder Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.PsiFeatures.VisualStudio.Backend.Resources.PsiFeaturesVisualStudioBackendThemedIcons.NewFolder"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.PsiFeatures.VisualStudio.Backend.Resources.PsiFeaturesVisualStudioBackendThemedIcons.NewFolder.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                              `"r????????????
                            `~T\_``````````TT
               ||||||||||||||L:------------||
               FF''''''''''''''''''''''''''FF
               CC''''''''''''''''''''''''''CC
               II__||||||||||||||||||||||__II
               55^_lCCCC1l1llllllllllllll__55
               YtCi}C^:C}tCtf[[[[[[[[[[[[::jj
              _}l__*1'`CL:'FtY22222222222""yy
             ;;ICC;``  ``=1C3YYSSSSSSSSSS~~PP
             CC::-``     ``::CCPPPPPPPPPP^^VV
             LL[CCL`    `+CC{55KKKKKKKKKK==kk
              'Yl,'=i.`l;'_FFL;;;;;;;;;;;;;ww
              `Et|fYC~_CYfiCu4XXXXXXXXXXXXXXX
                `_`'CCCC: _-                 
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiFeaturesVisualStudioBackendThemedIcons+NewFolder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiFeaturesVisualStudioBackendThemedIcons.NewFolder))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiFeaturesVisualStudioBackendThemedIcons.NewFolder.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiFeaturesVisualStudioBackendThemedIcons.NewFolder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.PsiFeatures.VisualStudio.Backend.Resources.PsiFeaturesVisualStudioBackendThemedIcons.NewFolder.Id">
            <inheritdoc cref="T:JetBrains.PsiFeatures.VisualStudio.Backend.Resources.PsiFeaturesVisualStudioBackendThemedIcons.NewFolder">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.PsiFeatures.VisualStudio.Backend.Resources.PsiFeaturesVisualStudioBackendThemedIcons.NewFolder.Load_Color">
            <summary>Loads the image for Themed Icon NewFolder theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.PsiFeatures.VisualStudio.Backend.Resources.PsiFeaturesVisualStudioBackendThemedIcons.NewFolder.Load_Gray">
            <summary>Loads the image for Themed Icon NewFolder theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.PsiFeatures.VisualStudio.Backend.Resources.PsiFeaturesVisualStudioBackendThemedIcons.NewFolder.Load_GrayDark">
            <summary>Loads the image for Themed Icon NewFolder theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.PsiFeatures.VisualStudio.Backend.Resources.PsiFeaturesVisualStudioBackendThemedIcons.NewFolder.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon NewFolder.</summary>
        </member>
        <member name="T:JetBrains.PsiFeatures.VisualStudio.Backend.Daemon.RequestRoslynDiagnosticsForVisibleDocuments">
            <summary>
            Tells front to collect for visible documents.
            </summary>
        </member>
        <member name="F:JetBrains.PsiFeatures.VisualStudio.Backend.Daemon.RoslynDiagnosticFilter.RegexRedundantDiagnosticIds">
            <summary>
            Roslyn diagnostic IDs which we consider redundant in presence of our code analysis, e.g. compiler warnings/errors are handled by our code, displaying them from Roslyn would be duplicating them, so they're redundant and should be skipped.
            TODO: unskip stuff which we cannot into, like unevident "assembly reference required for overload resolution" error
            </summary>
        </member>
        <member name="P:JetBrains.PsiFeatures.VisualStudio.Backend.Daemon.RoslynDiagnosticsDaemonProcess.RoslynDiagnosticHighlighting.JetBrains#ReSharper#Feature#Services#Daemon#ICustomCompilerIdHighlighting#CompilerId">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.PsiFeatures.VisualStudio.Backend.Daemon.RoslynDiagnosticsDaemonProcess.RoslynDiagnosticHighlighting.JetBrains#ReSharper#Feature#Services#Daemon#IRichTextToolTipHighlighting#TryGetTooltip(JetBrains.TextControl.DocumentMarkup.HighlighterTooltipKind)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.PsiFeatures.VisualStudio.Backend.Daemon.RoslynDiagnosticsDaemonTrigger">
            <summary>
            When new diagnostics come from Roslyn, trigger a special daemon process to sync them in our markup model for this document
            Hopefully, all big things are cached.
            TODO: check more if we can get analysis status for Roslyn doc. If so, we could make our stage a Slow one and wait in it for daemon just for any external analysing process.
            </summary>
        </member>
        <member name="T:JetBrains.PsiFeatures.VisualStudio.Backend.Ide.Alter.DisableXamlAutoUpdateTagAlter">
            The difference with the default implementation is that in alter mode the auto update tags should be updated for each document change, not only in commands.
            We want to force disable this feature when changes arrives from the backend.
            TODO: this should be happened completely on the frontend. It is too overcomplicated now with several roundtrip
        </member>
        <member name="M:JetBrains.PsiFeatures.VisualStudio.Backend.LightBulbs.VsBulbItemsProvider.NormalizeSuggestedActionText(System.String)">
            <summary>
            Remove all unnecessary stuff from VS ISuggestedAction.DisplayText.
            It seems that suggested action text could contain a piece of source code with new lines (at least VS LightBulb class expects it).
            Underscore '_' can be used as an accelerator symbol. If suggestion text contains underscores VS quotes them with another underscore.
            </summary>
        </member>
        <member name="T:JetBrains.PsiFeatures.VisualStudio.Backend.Navigation.AlterHackGlueTabState">
            See <see cref="P:JetBrains.Platform.VisualStudio.Protocol.Common.Alter.AlterState.SelectionSetByStructuralNavigation"/> for docs
        </member>
        <member name="M:JetBrains.PsiFeatures.VisualStudio.Backend.PeekSessions.IPeekSessionsBackend.IsAvailable">
            <summary>
            Whether peeking is available
            </summary>
        </member>
        <member name="M:JetBrains.PsiFeatures.VisualStudio.Backend.PeekSessions.IPeekSessionsBackend.IsPeekSessionActive(JetBrains.TextControl.ITextControl)">
            <summary>
            Whether there is an active peek session
            </summary>
            <param name="textControl">Text control in which the peek session is being searched</param>
            <returns>True if there's an active peek session</returns>
        </member>
        <member name="M:JetBrains.PsiFeatures.VisualStudio.Backend.PeekSessions.IPeekSessionsBackend.TriggerPeekSessionAsync(JetBrains.TextControl.ITextControl,System.String,JetBrains.Util.IUserDataHolder)">
            <summary>
            Triggers peek session
            </summary>
            <param name="textControl">Text control in which the session is to be triggered</param>
            <param name="relationshipName">Name of the peek session relationship</param>
            <param name="userData">Optional user data for the peek session. When null the text control context will be used</param>
            <returns>Awaitable result whether peek session is created</returns>
        </member>
        <member name="M:JetBrains.PsiFeatures.VisualStudio.Backend.TypeBrowser.IVsObjectBrowserInterceptorSubscriber.Execute(JetBrains.Lifetimes.Lifetime,JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Intercept object browser opening
            </summary>
            <returns>Whether the interception was successful and object browser opening can be cancelled</returns>
        </member>
        <member name="F:JetBrains.PsiFeatures.VisualStudio.Backend.VsLanguages.VsConstants.XamlLanguageServiceGuid">
            <summary>
            XAML Language Service guid until VS12
            </summary>
        </member>
        <member name="F:JetBrains.PsiFeatures.VisualStudio.Backend.VsLanguages.VsConstants.ScriptLanguageServiceGuid">
            <summary>
            Until VS10 this is the common language ID for Script languages in VS (like JavaScript and VbScript)
            </summary>
        </member>
        <member name="F:JetBrains.PsiFeatures.VisualStudio.Backend.VsLanguages.VsConstants.VbScriptLanguageServiceGuid">
            <summary>
             Since VS11 <see cref="F:JetBrains.PsiFeatures.VisualStudio.Backend.VsLanguages.VsConstants.ScriptLanguageServiceGuid"/> became just <see cref="F:JetBrains.PsiFeatures.VisualStudio.Backend.VsLanguages.VsConstants.VbScriptLanguageServiceGuid"/>.
            </summary>
        </member>
        <member name="F:JetBrains.PsiFeatures.VisualStudio.Backend.VsLanguages.VsConstants.JavaScriptLanguageServiceGuid">
            <summary>
            Since VS11 there is distinguished language service for JavaScript (<see cref="F:JetBrains.PsiFeatures.VisualStudio.Backend.VsLanguages.VsConstants.ScriptLanguageServiceGuid"/>).
            </summary>
        </member>
        <member name="F:JetBrains.PsiFeatures.VisualStudio.Backend.VsLanguages.VsConstants.HtmlXLanguageServiceGuid">
            <summary>
            Since VS12 Language Service guid for cshtml, vbhtml files and html files (<see cref="F:JetBrains.PsiFeatures.VisualStudio.Backend.VsLanguages.VsConstants.HtmlWebFormsLanguageServiceGuid"/>)
            </summary>
        </member>
        <member name="F:JetBrains.PsiFeatures.VisualStudio.Backend.VsLanguages.VsConstants.TypeScriptLanguageServiceGuid">
            <summary>
            TypeScript Language Service guid since VS12
            </summary>
        </member>
        <member name="F:JetBrains.PsiFeatures.VisualStudio.Backend.VsLanguages.VsConstants.XamlLanguageServiceGuidSinceVs14">
            <summary>
            XAML Language Service guid since VS14 (<see cref="F:JetBrains.PsiFeatures.VisualStudio.Backend.VsLanguages.VsConstants.XamlLanguageServiceGuid"/>). In VS 2015 CTP XAML language service guid was changed.
            </summary>
        </member>
        <member name="F:JetBrains.PsiFeatures.VisualStudio.Backend.VsLanguages.VsConstants.RazorLanguageServiceGuidSinceVs17">
            <summary>
            Since VS17. Razor language service guid.
            </summary>
        </member>
        <member name="T:JetBrains.PsiFeatures.VisualStudio.Backend.VsLanguages.VsPsiLanguageAsp">
            <summary>
            Until VS11 Asp, Html and Razor share the same language service.
            Since VS12 Html and Razor get a new language service, and Asp keeps the old one. <see cref="T:JetBrains.PsiFeatures.VisualStudio.Backend.VsLanguages.VsPsiLanguageHtml"/>
            </summary>
        </member>
        <member name="T:JetBrains.PsiFeatures.VisualStudio.Backend.VsLanguages.VsPsiLanguageAsxx">
            <summary>
            Until VS11 Asp, Html and Razor share the same language service.
            Since VS12 Html and Razor get a new language service, and Asp keeps the old one. <see cref="T:JetBrains.PsiFeatures.VisualStudio.Backend.VsLanguages.VsPsiLanguageHtml"/>
            </summary>
        </member>
        <member name="M:JetBrains.PsiFeatures.VisualStudio.Backend.VsLanguages.VsPsiLanguages.#ctor(System.Collections.Generic.IEnumerable{JetBrains.PsiFeatures.VisualStudio.Backend.VsLanguages.IVsPsiLanguage})">
            <summary>
            (DK) Please note that one VS language could be associated with more than one R# Psi languages.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
