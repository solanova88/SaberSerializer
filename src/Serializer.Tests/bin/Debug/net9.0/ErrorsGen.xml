<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ErrorsGen</name>
    </assembly>
    <members>
        <member name="M:JetBrains.ReSharper.Build.Tools.ErrorDescriptionGenerator.ParseCommandLine(System.String[])">
            <summary>
            Entry point for the cmdline-mode.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Build.Tools.ErrorDescriptionGenerator.Generate(JetBrains.ReSharper.Build.Tools.WorkModes,System.String,System.String,System.String,System.String,System.String,System.Action{System.String},System.Action{System.String})">
            <summary>
            Does all the useful sorta things.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Build.Tools.ErrorsGenTaskStub">
             <summary>
             Generates source code definitions from the <c>Errors.xml</c> files.
             This complies with the <c>ProxyToSolutionCompiledTask</c> calling convention.
            
             Expected parameters (task items with metadata <c>ParameterName</c> equal to these):
            
             • <c>Inputs</c>, multiple input files to process. Metadata:
             • • <c>ParameterName</c> — <c>Inputs</c> (that's how we pick these items). Required.
             • • <c>FullPath</c> — full path to the input file. Required.
             • • <c>OutputFile</c> — full path to the output file. Required.
             • • <c>Mode</c> — <see cref="T:JetBrains.ReSharper.Build.Tools.WorkModes"/>. Optional if a <c>JetGenerator</c> parameter item is given, otherwise required.
             • • <c>LangMacro</c> — macro to replace with language name. Optional.
             • • <c>Namespace</c> — NS to put generated files into. Optional if <c>Link</c> metadata is available on this item, otherwise required.
             • • <c>Link</c> — Logical name of the item under its project directory, can be used for inferring the namespace if it's not given. Optional.
             
             • <c>JetGenerator</c> — when running under SDK Mini, the ID of the generator being called, which comes from the task item name it is serving. For errorsgen, this allows to set its operation mode by item name rather than by additional metadata on it. Metadata:
             • • <c>ParameterName</c> — <c>JetGenerator</c> (that's how we pick this item, only one expected).
             • • <c>Identity</c> — the item spec, the Generator ID. See <see cref="T:JetBrains.ReSharper.Build.Tools.ErrorsGenTaskStub.WorkModeAsGeneratorId"/> for values expected here.
             
             • <c>RootNamespace</c> — if an explicit namespace is omitted on Inputs items, allows to infer it from the relative path. Metadata:
             • • <c>ParameterName</c> — <c>RootNamespace</c> (that's how we pick this item, only one expected).
             • • <c>Identity</c> — the root namespace of the project.
             </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Build.Tools.ErrorsGenTaskStub.#ctor(System.Collections.Generic.Dictionary{System.String,System.String}[],System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.String}},System.Collections.Generic.IDictionary{System.String,System.Action{System.String}})">
            <summary>
            This complies with the <c>ProxyToSolutionCompiledTask</c> calling convention.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Build.Tools.ErrorsGenTaskStub.WorkModeAsGeneratorId">
            <summary>
            Declares expected values for <c>JetGenerator</c> input parameter.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Build.Tools.QuickFixRegistrarComponent.Registration.MakeUpperCamelCaseName(System.String)">
            <summary>
            Changes the name from lowerCamelCase or MixedCAMELCase or
            dashed-words or underscored_words into the UpperCamelCase format.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field
            and property members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
</doc>
